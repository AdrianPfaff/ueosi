// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_trafficsign.proto

#include "osi_trafficsign.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace osi3 {
PROTOBUF_CONSTEXPR TrafficSignValue::TrafficSignValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.value_unit_)*/0} {}
struct TrafficSignValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficSignValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficSignValueDefaultTypeInternal() {}
  union {
    TrafficSignValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficSignValueDefaultTypeInternal _TrafficSignValue_default_instance_;
PROTOBUF_CONSTEXPR TrafficSign_MainSign_Classification::TrafficSign_MainSign_Classification(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.assigned_lane_id_)*/{}
  , /*decltype(_impl_.logical_lane_assignment_)*/{}
  , /*decltype(_impl_.country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_revision_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sub_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_.variability_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.direction_scope_)*/0
  , /*decltype(_impl_.vertically_mirrored_)*/false
  , /*decltype(_impl_.is_out_of_service_)*/false} {}
struct TrafficSign_MainSign_ClassificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficSign_MainSign_ClassificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficSign_MainSign_ClassificationDefaultTypeInternal() {}
  union {
    TrafficSign_MainSign_Classification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficSign_MainSign_ClassificationDefaultTypeInternal _TrafficSign_MainSign_Classification_default_instance_;
PROTOBUF_CONSTEXPR TrafficSign_MainSign::TrafficSign_MainSign(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.model_reference_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.classification_)*/nullptr} {}
struct TrafficSign_MainSignDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficSign_MainSignDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficSign_MainSignDefaultTypeInternal() {}
  union {
    TrafficSign_MainSign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficSign_MainSignDefaultTypeInternal _TrafficSign_MainSign_default_instance_;
PROTOBUF_CONSTEXPR TrafficSign_SupplementarySign_Classification_Arrow::TrafficSign_SupplementarySign_Classification_Arrow(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lane_id_)*/{}
  , /*decltype(_impl_.direction_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrafficSign_SupplementarySign_Classification_ArrowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficSign_SupplementarySign_Classification_ArrowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficSign_SupplementarySign_Classification_ArrowDefaultTypeInternal() {}
  union {
    TrafficSign_SupplementarySign_Classification_Arrow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficSign_SupplementarySign_Classification_ArrowDefaultTypeInternal _TrafficSign_SupplementarySign_Classification_Arrow_default_instance_;
PROTOBUF_CONSTEXPR TrafficSign_SupplementarySign_Classification::TrafficSign_SupplementarySign_Classification(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_.assigned_lane_id_)*/{}
  , /*decltype(_impl_.actor_)*/{}
  , /*decltype(_impl_.arrow_)*/{}
  , /*decltype(_impl_.logical_lane_assignment_)*/{}
  , /*decltype(_impl_.country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_revision_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sub_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.variability_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.is_out_of_service_)*/false} {}
struct TrafficSign_SupplementarySign_ClassificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficSign_SupplementarySign_ClassificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficSign_SupplementarySign_ClassificationDefaultTypeInternal() {}
  union {
    TrafficSign_SupplementarySign_Classification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficSign_SupplementarySign_ClassificationDefaultTypeInternal _TrafficSign_SupplementarySign_Classification_default_instance_;
PROTOBUF_CONSTEXPR TrafficSign_SupplementarySign::TrafficSign_SupplementarySign(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.model_reference_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.classification_)*/nullptr} {}
struct TrafficSign_SupplementarySignDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficSign_SupplementarySignDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficSign_SupplementarySignDefaultTypeInternal() {}
  union {
    TrafficSign_SupplementarySign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficSign_SupplementarySignDefaultTypeInternal _TrafficSign_SupplementarySign_default_instance_;
PROTOBUF_CONSTEXPR TrafficSign::TrafficSign(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.supplementary_sign_)*/{}
  , /*decltype(_impl_.source_reference_)*/{}
  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_.main_sign_)*/nullptr} {}
struct TrafficSignDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficSignDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficSignDefaultTypeInternal() {}
  union {
    TrafficSign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficSignDefaultTypeInternal _TrafficSign_default_instance_;
}  // namespace osi3
static ::_pb::Metadata file_level_metadata_osi_5ftrafficsign_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_osi_5ftrafficsign_2eproto[7];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_osi_5ftrafficsign_2eproto = nullptr;

const uint32_t TableStruct_osi_5ftrafficsign_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSignValue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSignValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSignValue, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSignValue, _impl_.value_unit_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSignValue, _impl_.text_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, _impl_.variability_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, _impl_.direction_scope_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, _impl_.assigned_lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, _impl_.vertically_mirrored_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, _impl_.is_out_of_service_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, _impl_.country_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, _impl_.country_revision_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, _impl_.sub_code_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, _impl_.logical_lane_assignment_),
  5,
  6,
  4,
  7,
  ~0u,
  8,
  9,
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign, _impl_.classification_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign, _impl_.model_reference_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification_Arrow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification_Arrow, _impl_.lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification_Arrow, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, _impl_.variability_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, _impl_.assigned_lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, _impl_.actor_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, _impl_.arrow_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, _impl_.is_out_of_service_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, _impl_.country_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, _impl_.country_revision_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, _impl_.sub_code_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, _impl_.logical_lane_assignment_),
  4,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  6,
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign, _impl_.classification_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign, _impl_.model_reference_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign, _impl_.main_sign_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign, _impl_.supplementary_sign_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign, _impl_.source_reference_),
  0,
  1,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::osi3::TrafficSignValue)},
  { 12, 30, -1, sizeof(::osi3::TrafficSign_MainSign_Classification)},
  { 42, 51, -1, sizeof(::osi3::TrafficSign_MainSign)},
  { 54, -1, -1, sizeof(::osi3::TrafficSign_SupplementarySign_Classification_Arrow)},
  { 62, 80, -1, sizeof(::osi3::TrafficSign_SupplementarySign_Classification)},
  { 92, 101, -1, sizeof(::osi3::TrafficSign_SupplementarySign)},
  { 104, 114, -1, sizeof(::osi3::TrafficSign)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::osi3::_TrafficSignValue_default_instance_._instance,
  &::osi3::_TrafficSign_MainSign_Classification_default_instance_._instance,
  &::osi3::_TrafficSign_MainSign_default_instance_._instance,
  &::osi3::_TrafficSign_SupplementarySign_Classification_Arrow_default_instance_._instance,
  &::osi3::_TrafficSign_SupplementarySign_Classification_default_instance_._instance,
  &::osi3::_TrafficSign_SupplementarySign_default_instance_._instance,
  &::osi3::_TrafficSign_default_instance_._instance,
};

const char descriptor_table_protodef_osi_5ftrafficsign_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025osi_trafficsign.proto\022\004osi3\032\020osi_commo"
  "n.proto\"\364\003\n\020TrafficSignValue\022\r\n\005value\030\001 "
  "\001(\001\022/\n\nvalue_unit\030\002 \001(\0162\033.osi3.TrafficSi"
  "gnValue.Unit\022\014\n\004text\030\003 \001(\t\"\221\003\n\004Unit\022\020\n\014U"
  "NIT_UNKNOWN\020\000\022\016\n\nUNIT_OTHER\020\001\022\020\n\014UNIT_NO"
  "_UNIT\020\002\022\033\n\027UNIT_KILOMETER_PER_HOUR\020\003\022\026\n\022"
  "UNIT_MILE_PER_HOUR\020\004\022\016\n\nUNIT_METER\020\005\022\022\n\016"
  "UNIT_KILOMETER\020\006\022\r\n\tUNIT_FEET\020\007\022\r\n\tUNIT_"
  "MILE\020\010\022\023\n\017UNIT_METRIC_TON\020\t\022\021\n\rUNIT_LONG"
  "_TON\020\n\022\022\n\016UNIT_SHORT_TON\020\013\022\r\n\tUNIT_HOUR\020"
  "\017\022\020\n\014UNIT_MINUTES\020\014\022\025\n\021UNIT_DAY_OF_MONTH"
  "\020\020\022\014\n\010UNIT_DAY\020\r\022\023\n\017UNIT_PERCENTAGE\020\016\022\025\n"
  "\021UNIT_DURATION_DAY\020\021\022\026\n\022UNIT_DURATION_HO"
  "UR\020\022\022\030\n\024UNIT_DURATION_MINUTE\020\023\"\270h\n\013Traff"
  "icSign\022\034\n\002id\030\001 \001(\0132\020.osi3.Identifier\022-\n\t"
  "main_sign\030\002 \001(\0132\032.osi3.TrafficSign.MainS"
  "ign\022\?\n\022supplementary_sign\030\003 \003(\0132#.osi3.T"
  "rafficSign.SupplementarySign\0221\n\020source_r"
  "eference\030\004 \003(\0132\027.osi3.ExternalReference\032"
  "\233A\n\010MainSign\022\"\n\004base\030\001 \001(\0132\024.osi3.BaseSt"
  "ationary\022A\n\016classification\030\002 \001(\0132).osi3."
  "TrafficSign.MainSign.Classification\022\027\n\017m"
  "odel_reference\030\003 \001(\t\032\216@\n\016Classification\022"
  "2\n\013variability\030\001 \001(\0162\035.osi3.TrafficSign."
  "Variability\022<\n\004type\030\002 \001(\0162..osi3.Traffic"
  "Sign.MainSign.Classification.Type\022%\n\005val"
  "ue\030\003 \001(\0132\026.osi3.TrafficSignValue\022Q\n\017dire"
  "ction_scope\030\004 \001(\01628.osi3.TrafficSign.Mai"
  "nSign.Classification.DirectionScope\022*\n\020a"
  "ssigned_lane_id\030\005 \003(\0132\020.osi3.Identifier\022"
  "\033\n\023vertically_mirrored\030\006 \001(\010\022\031\n\021is_out_o"
  "f_service\030\007 \001(\010\022\017\n\007country\030\010 \001(\t\022\030\n\020coun"
  "try_revision\030\t \001(\t\022\014\n\004code\030\n \001(\t\022\020\n\010sub_"
  "code\030\013 \001(\t\022<\n\027logical_lane_assignment\030\014 "
  "\003(\0132\033.osi3.LogicalLaneAssignment\"\340:\n\004Typ"
  "e\022\020\n\014TYPE_UNKNOWN\020\000\022\016\n\nTYPE_OTHER\020\001\022\024\n\020T"
  "YPE_DANGER_SPOT\020\002\022\027\n\023TYPE_ZEBRA_CROSSING"
  "\020W\022\017\n\013TYPE_FLIGHT\020n\022\020\n\013TYPE_CATTLE\020\310\001\022\026\n"
  "\021TYPE_HORSE_RIDERS\020\305\001\022\024\n\017TYPE_AMPHIBIANS"
  "\020\274\001\022\026\n\022TYPE_FALLING_ROCKS\020`\022\024\n\020TYPE_SNOW"
  "_OR_ICE\020^\022\025\n\021TYPE_LOOSE_GRAVEL\020a\022\022\n\016TYPE"
  "_WATERSIDE\020f\022\023\n\016TYPE_CLEARANCE\020\322\001\022\027\n\023TYP"
  "E_MOVABLE_BRIDGE\020e\022,\n(TYPE_RIGHT_BEFORE_"
  "LEFT_NEXT_INTERSECTION\020\003\022\022\n\016TYPE_TURN_LE"
  "FT\020\004\022\023\n\017TYPE_TURN_RIGHT\020\005\022\031\n\025TYPE_DOUBLE"
  "_TURN_LEFT\020\006\022\032\n\026TYPE_DOUBLE_TURN_RIGHT\020\007"
  "\022\027\n\023TYPE_HILL_DOWNWARDS\020\010\022\025\n\021TYPE_HILL_U"
  "PWARDS\020\t\022\024\n\020TYPE_UNEVEN_ROAD\020]\022#\n\037TYPE_R"
  "OAD_SLIPPERY_WET_OR_DIRTY\020_\022\023\n\017TYPE_SIDE"
  "_WINDS\020b\022\027\n\023TYPE_ROAD_NARROWING\020\n\022\035\n\031TYP"
  "E_ROAD_NARROWING_RIGHT\020\014\022\034\n\030TYPE_ROAD_NA"
  "RROWING_LEFT\020\013\022\023\n\017TYPE_ROAD_WORKS\020\r\022\027\n\023T"
  "YPE_TRAFFIC_QUEUES\020d\022\030\n\024TYPE_TWO_WAY_TRA"
  "FFIC\020\016\022 \n\034TYPE_ATTENTION_TRAFFIC_LIGHT\020\017"
  "\022\024\n\020TYPE_PEDESTRIANS\020g\022\032\n\026TYPE_CHILDREN_"
  "CROSSING\020j\022\024\n\020TYPE_CYCLE_ROUTE\020k\022\026\n\022TYPE"
  "_DEER_CROSSING\020m\022 \n\033TYPE_UNGATED_LEVEL_C"
  "ROSSING\020\220\001\022\036\n\032TYPE_LEVEL_CROSSING_MARKER"
  "\020p\022\"\n\035TYPE_RAILWAY_TRAFFIC_PRIORITY\020\207\001\022\021"
  "\n\rTYPE_GIVE_WAY\020\020\022\r\n\tTYPE_STOP\020\021\022\'\n#TYPE"
  "_PRIORITY_TO_OPPOSITE_DIRECTION\020\022\0223\n/TYP"
  "E_PRIORITY_TO_OPPOSITE_DIRECTION_UPSIDE_"
  "DOWN\020\023\022\035\n\031TYPE_PRESCRIBED_LEFT_TURN\020\024\022\036\n"
  "\032TYPE_PRESCRIBED_RIGHT_TURN\020\025\022\034\n\030TYPE_PR"
  "ESCRIBED_STRAIGHT\020\026\022\035\n\031TYPE_PRESCRIBED_R"
  "IGHT_WAY\020\030\022\034\n\030TYPE_PRESCRIBED_LEFT_WAY\020\027"
  "\022+\n\'TYPE_PRESCRIBED_RIGHT_TURN_AND_STRAI"
  "GHT\020\032\022*\n&TYPE_PRESCRIBED_LEFT_TURN_AND_S"
  "TRAIGHT\020\031\022,\n(TYPE_PRESCRIBED_LEFT_TURN_A"
  "ND_RIGHT_TURN\020\033\0225\n1TYPE_PRESCRIBED_LEFT_"
  "TURN_RIGHT_TURN_AND_STRAIGHT\020\034\022\023\n\017TYPE_R"
  "OUNDABOUT\020\035\022\024\n\020TYPE_ONEWAY_LEFT\020\036\022\025\n\021TYP"
  "E_ONEWAY_RIGHT\020\037\022\022\n\016TYPE_PASS_LEFT\020 \022\023\n\017"
  "TYPE_PASS_RIGHT\020!\022$\n\037TYPE_SIDE_LANE_OPEN"
  "_FOR_TRAFFIC\020\200\001\022&\n!TYPE_SIDE_LANE_CLOSED"
  "_FOR_TRAFFIC\020\201\001\022\'\n\"TYPE_SIDE_LANE_CLOSIN"
  "G_FOR_TRAFFIC\020\202\001\022\022\n\rTYPE_BUS_STOP\020\211\001\022\024\n\017"
  "TYPE_TAXI_STAND\020\212\001\022\027\n\022TYPE_BICYCLES_ONLY"
  "\020\221\001\022\033\n\026TYPE_HORSE_RIDERS_ONLY\020\222\001\022\032\n\025TYPE"
  "_PEDESTRIANS_ONLY\020\223\001\022*\n%TYPE_BICYCLES_PE"
  "DESTRIANS_SHARED_ONLY\020\224\001\0222\n-TYPE_BICYCLE"
  "S_PEDESTRIANS_SEPARATED_LEFT_ONLY\020\225\001\0223\n."
  "TYPE_BICYCLES_PEDESTRIANS_SEPARATED_RIGH"
  "T_ONLY\020\226\001\022\037\n\032TYPE_PEDESTRIAN_ZONE_BEGIN\020"
  "\227\001\022\035\n\030TYPE_PEDESTRIAN_ZONE_END\020\230\001\022\034\n\027TYP"
  "E_BICYCLE_ROAD_BEGIN\020\231\001\022\032\n\025TYPE_BICYCLE_"
  "ROAD_END\020\232\001\022\021\n\rTYPE_BUS_LANE\020\"\022\027\n\023TYPE_B"
  "US_LANE_BEGIN\020#\022\025\n\021TYPE_BUS_LANE_END\020$\022\027"
  "\n\023TYPE_ALL_PROHIBITED\020%\022(\n$TYPE_MOTORIZE"
  "D_MULTITRACK_PROHIBITED\020&\022\032\n\026TYPE_TRUCKS"
  "_PROHIBITED\020\'\022\034\n\030TYPE_BICYCLES_PROHIBITE"
  "D\020(\022\037\n\033TYPE_MOTORCYCLES_PROHIBITED\020)\022\033\n\026"
  "TYPE_MOPEDS_PROHIBITED\020\233\001\022!\n\034TYPE_HORSE_"
  "RIDERS_PROHIBITED\020\234\001\022$\n\037TYPE_HORSE_CARRI"
  "AGES_PROHIBITED\020\235\001\022\033\n\026TYPE_CATTLE_PROHIB"
  "ITED\020\236\001\022\032\n\025TYPE_BUSES_PROHIBITED\020\237\001\022\031\n\024T"
  "YPE_CARS_PROHIBITED\020\240\001\022\"\n\035TYPE_CARS_TRAI"
  "LERS_PROHIBITED\020\241\001\022$\n\037TYPE_TRUCKS_TRAILE"
  "RS_PROHIBITED\020\242\001\022\035\n\030TYPE_TRACTORS_PROHIB"
  "ITED\020\243\001\022\037\n\033TYPE_PEDESTRIANS_PROHIBITED\020*"
  "\022\"\n\036TYPE_MOTOR_VEHICLES_PROHIBITED\020+\022-\n("
  "TYPE_HAZARDOUS_GOODS_VEHICLES_PROHIBITED"
  "\020\244\001\022)\n$TYPE_OVER_WEIGHT_VEHICLES_PROHIBI"
  "TED\020\245\001\022.\n)TYPE_VEHICLES_AXLE_OVER_WEIGHT"
  "_PROHIBITED\020\246\001\022*\n%TYPE_VEHICLES_EXCESS_W"
  "IDTH_PROHIBITED\020\247\001\022+\n&TYPE_VEHICLES_EXCE"
  "SS_HEIGHT_PROHIBITED\020\250\001\022+\n&TYPE_VEHICLES"
  "_EXCESS_LENGTH_PROHIBITED\020\251\001\022\025\n\021TYPE_DO_"
  "NOT_ENTER\020,\022\036\n\031TYPE_SNOW_CHAINS_REQUIRED"
  "\020\252\001\022-\n(TYPE_WATER_POLLUTANT_VEHICLES_PRO"
  "HIBITED\020\253\001\022!\n\035TYPE_ENVIRONMENTAL_ZONE_BE"
  "GIN\020-\022\037\n\033TYPE_ENVIRONMENTAL_ZONE_END\020.\022\027"
  "\n\023TYPE_NO_U_TURN_LEFT\020/\022\030\n\024TYPE_NO_U_TUR"
  "N_RIGHT\0200\022\037\n\033TYPE_PRESCRIBED_U_TURN_LEFT"
  "\0201\022 \n\034TYPE_PRESCRIBED_U_TURN_RIGHT\0202\022$\n "
  "TYPE_MINIMUM_DISTANCE_FOR_TRUCKS\0203\022\032\n\026TY"
  "PE_SPEED_LIMIT_BEGIN\0204\022\037\n\033TYPE_SPEED_LIM"
  "IT_ZONE_BEGIN\0205\022\035\n\031TYPE_SPEED_LIMIT_ZONE"
  "_END\0206\022\034\n\030TYPE_MINIMUM_SPEED_BEGIN\0207\022\035\n\031"
  "TYPE_OVERTAKING_BAN_BEGIN\0208\022(\n$TYPE_OVER"
  "TAKING_BAN_FOR_TRUCKS_BEGIN\0209\022\030\n\024TYPE_SP"
  "EED_LIMIT_END\020:\022\032\n\026TYPE_MINIMUM_SPEED_EN"
  "D\020;\022\033\n\027TYPE_OVERTAKING_BAN_END\020<\022&\n\"TYPE"
  "_OVERTAKING_BAN_FOR_TRUCKS_END\020=\022\035\n\031TYPE"
  "_ALL_RESTRICTIONS_END\020>\022\024\n\020TYPE_NO_STOPP"
  "ING\020\?\022\023\n\017TYPE_NO_PARKING\020@\022\036\n\032TYPE_NO_PA"
  "RKING_ZONE_BEGIN\020A\022\034\n\030TYPE_NO_PARKING_ZO"
  "NE_END\020B\022\'\n#TYPE_RIGHT_OF_WAY_NEXT_INTER"
  "SECTION\020C\022\033\n\027TYPE_RIGHT_OF_WAY_BEGIN\020D\022\031"
  "\n\025TYPE_RIGHT_OF_WAY_END\020E\022)\n%TYPE_PRIORI"
  "TY_OVER_OPPOSITE_DIRECTION\020F\0225\n1TYPE_PRI"
  "ORITY_OVER_OPPOSITE_DIRECTION_UPSIDE_DOW"
  "N\020G\022\023\n\017TYPE_TOWN_BEGIN\020H\022\021\n\rTYPE_TOWN_EN"
  "D\020I\022\024\n\020TYPE_CAR_PARKING\020J\022\037\n\033TYPE_CAR_PA"
  "RKING_ZONE_BEGIN\020K\022\035\n\031TYPE_CAR_PARKING_Z"
  "ONE_END\020L\022$\n\037TYPE_SIDEWALK_HALF_PARKING_"
  "LEFT\020\254\001\022%\n TYPE_SIDEWALK_HALF_PARKING_RI"
  "GHT\020\255\001\022\037\n\032TYPE_SIDEWALK_PARKING_LEFT\020\256\001\022"
  " \n\033TYPE_SIDEWALK_PARKING_RIGHT\020\257\001\0222\n-TYP"
  "E_SIDEWALK_PERPENDICULAR_HALF_PARKING_LE"
  "FT\020\260\001\0223\n.TYPE_SIDEWALK_PERPENDICULAR_HAL"
  "F_PARKING_RIGHT\020\261\001\022-\n(TYPE_SIDEWALK_PERP"
  "ENDICULAR_PARKING_LEFT\020\262\001\022.\n)TYPE_SIDEWA"
  "LK_PERPENDICULAR_PARKING_RIGHT\020\263\001\022\034\n\030TYP"
  "E_LIVING_STREET_BEGIN\020M\022\032\n\026TYPE_LIVING_S"
  "TREET_END\020N\022\017\n\013TYPE_TUNNEL\020O\022 \n\034TYPE_EME"
  "RGENCY_STOPPING_LEFT\020P\022!\n\035TYPE_EMERGENCY"
  "_STOPPING_RIGHT\020Q\022\026\n\022TYPE_HIGHWAY_BEGIN\020"
  "R\022\024\n\020TYPE_HIGHWAY_END\020S\022\031\n\025TYPE_EXPRESSW"
  "AY_BEGIN\020T\022\027\n\023TYPE_EXPRESSWAY_END\020U\022\034\n\027T"
  "YPE_NAMED_HIGHWAY_EXIT\020\267\001\022\037\n\032TYPE_NAMED_"
  "EXPRESSWAY_EXIT\020\270\001\022\031\n\024TYPE_NAMED_ROAD_EX"
  "IT\020\271\001\022\025\n\021TYPE_HIGHWAY_EXIT\020V\022\031\n\024TYPE_EXP"
  "RESSWAY_EXIT\020\272\001\022\027\n\022TYPE_ONEWAY_STREET\020\273\001"
  "\022\031\n\024TYPE_CROSSING_GUARDS\020\275\001\022\021\n\014TYPE_DEAD"
  "END\020\276\001\022-\n(TYPE_DEADEND_EXCLUDING_DESIGNA"
  "TED_ACTORS\020\277\001\022\033\n\026TYPE_FIRST_AID_STATION\020"
  "\302\001\022\030\n\023TYPE_POLICE_STATION\020\303\001\022\023\n\016TYPE_TEL"
  "EPHONE\020\304\001\022\031\n\024TYPE_FILLING_STATION\020\306\001\022\017\n\n"
  "TYPE_HOTEL\020\311\001\022\r\n\010TYPE_INN\020\312\001\022\017\n\nTYPE_KIO"
  "SK\020\313\001\022\020\n\013TYPE_TOILET\020\314\001\022\020\n\013TYPE_CHAPEL\020\315"
  "\001\022\026\n\021TYPE_TOURIST_INFO\020\316\001\022\030\n\023TYPE_REPAIR"
  "_SERVICE\020\317\001\022\036\n\031TYPE_PEDESTRIAN_UNDERPASS"
  "\020\320\001\022\033\n\026TYPE_PEDESTRIAN_BRIDGE\020\321\001\022\026\n\021TYPE"
  "_CAMPER_PLACE\020\325\001\022$\n\037TYPE_ADVISORY_SPEED_"
  "LIMIT_BEGIN\020\326\001\022\"\n\035TYPE_ADVISORY_SPEED_LI"
  "MIT_END\020\327\001\022\024\n\017TYPE_PLACE_NAME\020\330\001\022\034\n\027TYPE"
  "_TOURIST_ATTRACTION\020\331\001\022\027\n\022TYPE_TOURIST_R"
  "OUTE\020\332\001\022\026\n\021TYPE_TOURIST_AREA\020\333\001\022.\n)TYPE_"
  "SHOULDER_NOT_PASSABLE_MOTOR_VEHICLES\020\334\001\022"
  ")\n$TYPE_SHOULDER_UNSAFE_TRUCKS_TRACTORS\020"
  "\335\001\022\024\n\017TYPE_TOLL_BEGIN\020\336\001\022\022\n\rTYPE_TOLL_EN"
  "D\020\337\001\022\023\n\016TYPE_TOLL_ROAD\020\340\001\022\021\n\014TYPE_CUSTOM"
  "S\020\341\001\022#\n\036TYPE_INTERNATIONAL_BORDER_INFO\020\342"
  "\001\022\036\n\031TYPE_STREETLIGHT_RED_BAND\020\343\001\022&\n!TYP"
  "E_FEDERAL_HIGHWAY_ROUTE_NUMBER\020\344\001\022\036\n\031TYP"
  "E_HIGHWAY_ROUTE_NUMBER\020\345\001\022$\n\037TYPE_HIGHWA"
  "Y_INTERCHANGE_NUMBER\020\346\001\022\037\n\032TYPE_EUROPEAN"
  "_ROUTE_NUMBER\020\347\001\022(\n#TYPE_FEDERAL_HIGHWAY"
  "_DIRECTION_LEFT\020\350\001\022)\n$TYPE_FEDERAL_HIGHW"
  "AY_DIRECTION_RIGHT\020\351\001\022%\n TYPE_PRIMARY_RO"
  "AD_DIRECTION_LEFT\020\352\001\022&\n!TYPE_PRIMARY_ROA"
  "D_DIRECTION_RIGHT\020\353\001\022\'\n\"TYPE_SECONDARY_R"
  "OAD_DIRECTION_LEFT\020\354\001\022(\n#TYPE_SECONDARY_"
  "ROAD_DIRECTION_RIGHT\020\355\001\022*\n%TYPE_DIRECTIO"
  "N_DESIGNATED_ACTORS_LEFT\020\356\001\022+\n&TYPE_DIRE"
  "CTION_DESIGNATED_ACTORS_RIGHT\020\357\001\022#\n\036TYPE"
  "_ROUTING_DESIGNATED_ACTORS\020\360\001\022#\n\036TYPE_DI"
  "RECTION_TO_HIGHWAY_LEFT\020\217\001\022#\n\037TYPE_DIREC"
  "TION_TO_HIGHWAY_RIGHT\020l\022,\n(TYPE_DIRECTIO"
  "N_TO_LOCAL_DESTINATION_LEFT\020\177\022.\n)TYPE_DI"
  "RECTION_TO_LOCAL_DESTINATION_RIGHT\020\210\001\022 \n"
  "\034TYPE_CONSOLIDATED_DIRECTIONS\020v\022\024\n\020TYPE_"
  "STREET_NAME\020w\022\"\n\036TYPE_DIRECTION_PREANNOU"
  "NCEMENT\020x\022.\n*TYPE_DIRECTION_PREANNOUNCEM"
  "ENT_LANE_CONFIG\020y\0222\n.TYPE_DIRECTION_PREA"
  "NNOUNCEMENT_HIGHWAY_ENTRIES\020z\022\035\n\031TYPE_HI"
  "GHWAY_ANNOUNCEMENT\020{\022 \n\034TYPE_OTHER_ROAD_"
  "ANNOUNCEMENT\020|\022(\n$TYPE_HIGHWAY_ANNOUNCEM"
  "ENT_TRUCK_STOP\020}\022+\n\'TYPE_HIGHWAY_PREANNO"
  "UNCEMENT_DIRECTIONS\020~\022\022\n\016TYPE_POLE_EXIT\020"
  "X\022 \n\033TYPE_HIGHWAY_DISTANCE_BOARD\020\264\001\022\025\n\020T"
  "YPE_DETOUR_LEFT\020\265\001\022\026\n\021TYPE_DETOUR_RIGHT\020"
  "\266\001\022\031\n\024TYPE_NUMBERED_DETOUR\020\203\001\022\026\n\021TYPE_DE"
  "TOUR_BEGIN\020\204\001\022\024\n\017TYPE_DETOUR_END\020\205\001\022\036\n\031T"
  "YPE_DETOUR_ROUTING_BOARD\020\206\001\022\030\n\024TYPE_OPTI"
  "ONAL_DETOUR\020o\022!\n\034TYPE_OPTIONAL_DETOUR_RO"
  "UTING\020\307\001\022\036\n\031TYPE_ROUTE_RECOMMENDATION\020\323\001"
  "\022\"\n\035TYPE_ROUTE_RECOMMENDATION_END\020\324\001\022\'\n\""
  "TYPE_ANNOUNCE_LANE_TRANSITION_LEFT\020\300\001\022(\n"
  "#TYPE_ANNOUNCE_LANE_TRANSITION_RIGHT\020\301\001\022"
  " \n\034TYPE_ANNOUNCE_RIGHT_LANE_END\020Z\022\037\n\033TYP"
  "E_ANNOUNCE_LEFT_LANE_END\020Y\022\"\n\036TYPE_ANNOU"
  "NCE_RIGHT_LANE_BEGIN\020s\022!\n\035TYPE_ANNOUNCE_"
  "LEFT_LANE_BEGIN\020t\022$\n TYPE_ANNOUNCE_LANE_"
  "CONSOLIDATION\020u\022\033\n\026TYPE_DETOUR_CITY_BLOC"
  "K\020\216\001\022\016\n\tTYPE_GATE\020\215\001\022\025\n\021TYPE_POLE_WARNIN"
  "G\020[\022\026\n\021TYPE_TRAFFIC_CONE\020\214\001\022\035\n\030TYPE_MOBI"
  "LE_LANE_CLOSURE\020\213\001\022\027\n\023TYPE_REFLECTOR_POS"
  "T\020r\022\"\n\036TYPE_DIRECTIONAL_BOARD_WARNING\020q\022"
  "\026\n\022TYPE_GUIDING_PLATE\020h\022\035\n\031TYPE_GUIDING_"
  "PLATE_WEDGES\020i\022\027\n\023TYPE_PARKING_HAZARD\020c\022"
  "\"\n\036TYPE_TRAFFIC_LIGHT_GREEN_ARROW\020\\\"\277\001\n\016"
  "DirectionScope\022\033\n\027DIRECTION_SCOPE_UNKNOW"
  "N\020\000\022\031\n\025DIRECTION_SCOPE_OTHER\020\001\022 \n\034DIRECT"
  "ION_SCOPE_NO_DIRECTION\020\002\022\030\n\024DIRECTION_SC"
  "OPE_LEFT\020\003\022\031\n\025DIRECTION_SCOPE_RIGHT\020\004\022\036\n"
  "\032DIRECTION_SCOPE_LEFT_RIGHT\020\005\032\201$\n\021Supple"
  "mentarySign\022\"\n\004base\030\001 \001(\0132\024.osi3.BaseSta"
  "tionary\022J\n\016classification\030\002 \001(\01322.osi3.T"
  "rafficSign.SupplementarySign.Classificat"
  "ion\022\027\n\017model_reference\030\003 \001(\t\032\342\"\n\016Classif"
  "ication\0222\n\013variability\030\001 \001(\0162\035.osi3.Traf"
  "ficSign.Variability\022E\n\004type\030\002 \001(\01627.osi3"
  ".TrafficSign.SupplementarySign.Classific"
  "ation.Type\022%\n\005value\030\003 \003(\0132\026.osi3.Traffic"
  "SignValue\022*\n\020assigned_lane_id\030\004 \003(\0132\020.os"
  "i3.Identifier\022G\n\005actor\030\005 \003(\01628.osi3.Traf"
  "ficSign.SupplementarySign.Classification"
  ".Actor\022G\n\005arrow\030\006 \003(\01328.osi3.TrafficSign"
  ".SupplementarySign.Classification.Arrow\022"
  "\031\n\021is_out_of_service\030\007 \001(\010\022\017\n\007country\030\010 "
  "\001(\t\022\030\n\020country_revision\030\t \001(\t\022\014\n\004code\030\n "
  "\001(\t\022\020\n\010sub_code\030\013 \001(\t\022<\n\027logical_lane_as"
  "signment\030\014 \003(\0132\033.osi3.LogicalLaneAssignm"
  "ent\032\222\n\n\005Arrow\022!\n\007lane_id\030\001 \003(\0132\020.osi3.Id"
  "entifier\022U\n\tdirection\030\002 \003(\0162B.osi3.Traff"
  "icSign.SupplementarySign.Classification."
  "Arrow.Direction\"\216\t\n\tDirection\022\025\n\021DIRECTI"
  "ON_UNKNOWN\020\000\022\023\n\017DIRECTION_OTHER\020\001\022\032\n\026DIR"
  "ECTION_NO_DIRECTION\020\002\022\032\n\026DIRECTION_DIREC"
  "T_0_DEG\020\003\022!\n\035DIRECTION_DIRECT_45_DEG_RIG"
  "HT\020\004\022 \n\034DIRECTION_DIRECT_45_DEG_LEFT\020\005\022!"
  "\n\035DIRECTION_DIRECT_90_DEG_RIGHT\020\006\022 \n\034DIR"
  "ECTION_DIRECT_90_DEG_LEFT\020\007\022\"\n\036DIRECTION"
  "_DIRECT_135_DEG_RIGHT\020\010\022!\n\035DIRECTION_DIR"
  "ECT_135_DEG_LEFT\020\t\022\034\n\030DIRECTION_DIRECT_1"
  "80_DEG\020\n\022\037\n\033DIRECTION_TURN_45_DEG_RIGHT\020"
  "\013\022\036\n\032DIRECTION_TURN_45_DEG_LEFT\020\014\022\037\n\033DIR"
  "ECTION_TURN_90_DEG_RIGHT\020\r\022\036\n\032DIRECTION_"
  "TURN_90_DEG_LEFT\020\016\022 \n\034DIRECTION_TURN_135"
  "_DEG_RIGHT\020\017\022\037\n\033DIRECTION_TURN_135_DEG_L"
  "EFT\020\020\022 \n\034DIRECTION_TURN_180_DEG_RIGHT\020\021\022"
  "\037\n\033DIRECTION_TURN_180_DEG_LEFT\020\022\022\032\n\026DIRE"
  "CTION_CIRCLE_0_DEG\020\023\022!\n\035DIRECTION_CIRCLE"
  "_45_DEG_RIGHT\020\024\022 \n\034DIRECTION_CIRCLE_45_D"
  "EG_LEFT\020\025\022!\n\035DIRECTION_CIRCLE_90_DEG_RIG"
  "HT\020\026\022 \n\034DIRECTION_CIRCLE_90_DEG_LEFT\020\027\022\""
  "\n\036DIRECTION_CIRCLE_135_DEG_RIGHT\020\030\022!\n\035DI"
  "RECTION_CIRCLE_135_DEG_LEFT\020\031\022\034\n\030DIRECTI"
  "ON_CIRCLE_180_DEG\020\032\022%\n!DIRECTION_KEEP_LE"
  "FT_TO_TURN_0_DEG\020\033\022&\n\"DIRECTION_KEEP_RIG"
  "HT_TO_TURN_0_DEG\020\034\022,\n(DIRECTION_KEEP_LEF"
  "T_TO_TURN_90_DEG_RIGHT\020\035\022,\n(DIRECTION_KE"
  "EP_RIGHT_TO_TURN_90_DEG_LEFT\020\036\0227\n3DIRECT"
  "ION_KEEP_LEFT_DRIVE_BACK_TO_TURN_90_DEG_"
  "RIGHT\020\037\0227\n3DIRECTION_KEEP_RIGHT_DRIVE_BA"
  "CK_TO_TURN_90_DEG_LEFT\020 \"\265\n\n\004Type\022\020\n\014TYP"
  "E_UNKNOWN\020\000\022\016\n\nTYPE_OTHER\020\001\022\020\n\014TYPE_NO_S"
  "IGN\020\002\022\r\n\tTYPE_TEXT\020)\022\016\n\nTYPE_SPACE\020\'\022\r\n\t"
  "TYPE_TIME\020\032\022\016\n\nTYPE_ARROW\020\036\022\027\n\023TYPE_CONS"
  "TRAINED_TO\020.\022\017\n\013TYPE_EXCEPT\020-\022\033\n\027TYPE_VA"
  "LID_FOR_DISTANCE\020\003\022+\n\'TYPE_PRIORITY_ROAD"
  "_BOTTOM_LEFT_FOUR_WAY\020\033\022(\n$TYPE_PRIORITY"
  "_ROAD_TOP_LEFT_FOUR_WAY\020\034\0225\n1TYPE_PRIORI"
  "TY_ROAD_BOTTOM_LEFT_THREE_WAY_STRAIGHT\020 "
  "\0225\n1TYPE_PRIORITY_ROAD_BOTTOM_LEFT_THREE"
  "_WAY_SIDEWAYS\020!\0222\n.TYPE_PRIORITY_ROAD_TO"
  "P_LEFT_THREE_WAY_STRAIGHT\020\"\022,\n(TYPE_PRIO"
  "RITY_ROAD_BOTTOM_RIGHT_FOUR_WAY\020\035\022)\n%TYP"
  "E_PRIORITY_ROAD_TOP_RIGHT_FOUR_WAY\020\037\0226\n2"
  "TYPE_PRIORITY_ROAD_BOTTOM_RIGHT_THREE_WA"
  "Y_STRAIGHT\020#\0225\n1TYPE_PRIORITY_ROAD_BOTTO"
  "M_RIGHT_THREE_WAY_SIDEWAY\020$\0223\n/TYPE_PRIO"
  "RITY_ROAD_TOP_RIGHT_THREE_WAY_STRAIGHT\020%"
  "\022\032\n\026TYPE_VALID_IN_DISTANCE\020\004\022\020\n\014TYPE_STO"
  "P_IN\020\031\022\023\n\017TYPE_LEFT_ARROW\020\013\022\030\n\024TYPE_LEFT"
  "_BEND_ARROW\020\r\022\024\n\020TYPE_RIGHT_ARROW\020\014\022\031\n\025T"
  "YPE_RIGHT_BEND_ARROW\020\016\022\021\n\rTYPE_ACCIDENT\020"
  "(\022\r\n\tTYPE_SNOW\020\t\022\014\n\010TYPE_FOG\020\010\022$\n TYPE_R"
  "OLLING_HIGHWAY_INFORMATION\0200\022\021\n\rTYPE_SER"
  "VICES\020/\022\023\n\017TYPE_TIME_RANGE\020\005\022&\n\"TYPE_PAR"
  "KING_DISC_TIME_RESTRICTION\020+\022\017\n\013TYPE_WEI"
  "GHT\020\006\022\014\n\010TYPE_WET\020,\022\033\n\027TYPE_PARKING_CONS"
  "TRAINT\020*\022 \n\034TYPE_NO_WAITING_SIDE_STRIPES"
  "\020&\022\r\n\tTYPE_RAIN\020\007\022\022\n\016TYPE_SNOW_RAIN\020\n\022\016\n"
  "\nTYPE_NIGHT\020\023\022\023\n\017TYPE_STOP_4_WAY\020\025\022\016\n\nTY"
  "PE_TRUCK\020\017\022\037\n\033TYPE_TRACTORS_MAY_BE_PASSE"
  "D\020\020\022\022\n\016TYPE_HAZARDOUS\020\021\022\020\n\014TYPE_TRAILER\020"
  "\022\022\r\n\tTYPE_ZONE\020\024\022\023\n\017TYPE_MOTORCYCLE\020\026\022\033\n"
  "\027TYPE_MOTORCYCLE_ALLOWED\020\027\022\014\n\010TYPE_CAR\020\030"
  "\"\376\t\n\005Actor\022\021\n\rACTOR_UNKNOWN\020\000\022\017\n\013ACTOR_O"
  "THER\020\001\022\022\n\016ACTOR_NO_ACTOR\020\002\022\037\n\033ACTOR_AGRI"
  "CULTURAL_VEHICLES\020\003\022\022\n\016ACTOR_BICYCLES\020\004\022"
  "\017\n\013ACTOR_BUSES\020\005\022\021\n\rACTOR_CAMPERS\020\006\022\022\n\016A"
  "CTOR_CARAVANS\020\007\022\016\n\nACTOR_CARS\020\010\022\034\n\030ACTOR"
  "_CARS_WITH_CARAVANS\020\t\022\034\n\030ACTOR_CARS_WITH"
  "_TRAILERS\020\n\022\020\n\014ACTOR_CATTLE\020\013\022\022\n\016ACTOR_C"
  "HILDREN\020\014\022\037\n\033ACTOR_CONSTRUCTION_VEHICLES"
  "\020\r\022\033\n\027ACTOR_DELIVERY_VEHICLES\020\016\022\032\n\026ACTOR"
  "_DISABLED_PERSONS\020\017\022\020\n\014ACTOR_EBIKES\020\020\022\033\n"
  "\027ACTOR_ELECTRIC_VEHICLES\020\021\022\034\n\030ACTOR_EMER"
  "GENCY_VEHICLES\020\022\022\025\n\021ACTOR_FERRY_USERS\020\023\022"
  "\033\n\027ACTOR_FORESTRY_VEHICLES\020\024\022\"\n\036ACTOR_HA"
  "ZARDOUS_GOODS_VEHICLES\020\025\022\031\n\025ACTOR_HORSE_"
  "CARRIAGES\020\026\022\026\n\022ACTOR_HORSE_RIDERS\020\027\022\030\n\024A"
  "CTOR_INLINE_SKATERS\020\030\022\032\n\026ACTOR_MEDICAL_V"
  "EHICLES\020\031\022\033\n\027ACTOR_MILITARY_VEHICLES\020\032\022\020"
  "\n\014ACTOR_MOPEDS\020\033\022\025\n\021ACTOR_MOTORCYCLES\020\034\022"
  "\'\n#ACTOR_MOTORIZED_MULTITRACK_VEHICLES\020\035"
  "\022*\n&ACTOR_OPERATIONAL_AND_UTILITY_VEHICL"
  "ES\020\036\022\025\n\021ACTOR_PEDESTRIANS\020\037\022#\n\037ACTOR_PUB"
  "LIC_TRANSPORT_VEHICLES\020 \022\032\n\026ACTOR_RAILRO"
  "AD_TRAFFIC\020!\022\023\n\017ACTOR_RESIDENTS\020\"\022\032\n\026ACT"
  "OR_SLURRY_TRANSPORT\020#\022\017\n\013ACTOR_TAXIS\020$\022\022"
  "\n\016ACTOR_TRACTORS\020%\022\022\n\016ACTOR_TRAILERS\020&\022\017"
  "\n\013ACTOR_TRAMS\020\'\022\020\n\014ACTOR_TRUCKS\020(\022\"\n\036ACT"
  "OR_TRUCKS_WITH_SEMITRAILERS\020)\022\036\n\032ACTOR_T"
  "RUCKS_WITH_TRAILERS\020*\022$\n ACTOR_VEHICLES_"
  "WITH_GREEN_BADGES\020+\022\"\n\036ACTOR_VEHICLES_WI"
  "TH_RED_BADGES\020,\022%\n!ACTOR_VEHICLES_WITH_Y"
  "ELLOW_BADGES\020-\022\"\n\036ACTOR_WATER_POLLUTANT_"
  "VEHICLES\020.\022\035\n\031ACTOR_WINTER_SPORTSPEOPLE\020"
  "/\"\305\001\n\013Variability\022\027\n\023VARIABILITY_UNKNOWN"
  "\020\000\022\025\n\021VARIABILITY_OTHER\020\001\022\025\n\021VARIABILITY"
  "_FIXED\020\002\022\030\n\024VARIABILITY_VARIABLE\020\003\022\027\n\023VA"
  "RIABILITY_MOVABLE\020\004\022\027\n\023VARIABILITY_MUTAB"
  "LE\020\005\022#\n\037VARIABILITY_MOVABLE_AND_MUTABLE\020"
  "\006B\002H\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_osi_5ftrafficsign_2eproto_deps[1] = {
  &::descriptor_table_osi_5fcommon_2eproto,
};
static ::_pbi::once_flag descriptor_table_osi_5ftrafficsign_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_osi_5ftrafficsign_2eproto = {
    false, false, 13925, descriptor_table_protodef_osi_5ftrafficsign_2eproto,
    "osi_trafficsign.proto",
    &descriptor_table_osi_5ftrafficsign_2eproto_once, descriptor_table_osi_5ftrafficsign_2eproto_deps, 1, 7,
    schemas, file_default_instances, TableStruct_osi_5ftrafficsign_2eproto::offsets,
    file_level_metadata_osi_5ftrafficsign_2eproto, file_level_enum_descriptors_osi_5ftrafficsign_2eproto,
    file_level_service_descriptors_osi_5ftrafficsign_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_osi_5ftrafficsign_2eproto_getter() {
  return &descriptor_table_osi_5ftrafficsign_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_osi_5ftrafficsign_2eproto(&descriptor_table_osi_5ftrafficsign_2eproto);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficSignValue_Unit_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficsign_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficsign_2eproto[0];
}
bool TrafficSignValue_Unit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_UNKNOWN;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_OTHER;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_NO_UNIT;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_KILOMETER_PER_HOUR;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_MILE_PER_HOUR;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_METER;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_KILOMETER;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_FEET;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_MILE;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_METRIC_TON;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_LONG_TON;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_SHORT_TON;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_HOUR;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_MINUTES;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_DAY_OF_MONTH;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_DAY;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_PERCENTAGE;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_DURATION_DAY;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_DURATION_HOUR;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_DURATION_MINUTE;
constexpr TrafficSignValue_Unit TrafficSignValue::Unit_MIN;
constexpr TrafficSignValue_Unit TrafficSignValue::Unit_MAX;
constexpr int TrafficSignValue::Unit_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficSign_MainSign_Classification_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficsign_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficsign_2eproto[1];
}
bool TrafficSign_MainSign_Classification_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_UNKNOWN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OTHER;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DANGER_SPOT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ZEBRA_CROSSING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_FLIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CATTLE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HORSE_RIDERS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_AMPHIBIANS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_FALLING_ROCKS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SNOW_OR_ICE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_LOOSE_GRAVEL;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_WATERSIDE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CLEARANCE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MOVABLE_BRIDGE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_RIGHT_BEFORE_LEFT_NEXT_INTERSECTION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TURN_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TURN_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DOUBLE_TURN_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DOUBLE_TURN_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HILL_DOWNWARDS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HILL_UPWARDS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_UNEVEN_ROAD;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROAD_SLIPPERY_WET_OR_DIRTY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDE_WINDS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROAD_NARROWING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROAD_NARROWING_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROAD_NARROWING_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROAD_WORKS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TRAFFIC_QUEUES;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TWO_WAY_TRAFFIC;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ATTENTION_TRAFFIC_LIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PEDESTRIANS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CHILDREN_CROSSING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CYCLE_ROUTE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DEER_CROSSING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_UNGATED_LEVEL_CROSSING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_LEVEL_CROSSING_MARKER;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_RAILWAY_TRAFFIC_PRIORITY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_GIVE_WAY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_STOP;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRIORITY_TO_OPPOSITE_DIRECTION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRIORITY_TO_OPPOSITE_DIRECTION_UPSIDE_DOWN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_LEFT_TURN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_RIGHT_TURN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_STRAIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_RIGHT_WAY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_LEFT_WAY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_RIGHT_TURN_AND_STRAIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_LEFT_TURN_AND_STRAIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_LEFT_TURN_AND_RIGHT_TURN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_LEFT_TURN_RIGHT_TURN_AND_STRAIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROUNDABOUT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ONEWAY_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ONEWAY_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PASS_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PASS_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDE_LANE_OPEN_FOR_TRAFFIC;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDE_LANE_CLOSED_FOR_TRAFFIC;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDE_LANE_CLOSING_FOR_TRAFFIC;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BUS_STOP;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TAXI_STAND;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BICYCLES_ONLY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HORSE_RIDERS_ONLY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PEDESTRIANS_ONLY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BICYCLES_PEDESTRIANS_SHARED_ONLY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BICYCLES_PEDESTRIANS_SEPARATED_LEFT_ONLY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BICYCLES_PEDESTRIANS_SEPARATED_RIGHT_ONLY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PEDESTRIAN_ZONE_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PEDESTRIAN_ZONE_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BICYCLE_ROAD_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BICYCLE_ROAD_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BUS_LANE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BUS_LANE_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BUS_LANE_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ALL_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MOTORIZED_MULTITRACK_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TRUCKS_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BICYCLES_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MOTORCYCLES_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MOPEDS_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HORSE_RIDERS_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HORSE_CARRIAGES_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CATTLE_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BUSES_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CARS_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CARS_TRAILERS_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TRUCKS_TRAILERS_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TRACTORS_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PEDESTRIANS_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MOTOR_VEHICLES_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HAZARDOUS_GOODS_VEHICLES_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OVER_WEIGHT_VEHICLES_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_VEHICLES_AXLE_OVER_WEIGHT_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_VEHICLES_EXCESS_WIDTH_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_VEHICLES_EXCESS_HEIGHT_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_VEHICLES_EXCESS_LENGTH_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DO_NOT_ENTER;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SNOW_CHAINS_REQUIRED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_WATER_POLLUTANT_VEHICLES_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ENVIRONMENTAL_ZONE_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ENVIRONMENTAL_ZONE_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NO_U_TURN_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NO_U_TURN_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_U_TURN_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_U_TURN_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MINIMUM_DISTANCE_FOR_TRUCKS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SPEED_LIMIT_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SPEED_LIMIT_ZONE_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SPEED_LIMIT_ZONE_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MINIMUM_SPEED_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OVERTAKING_BAN_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OVERTAKING_BAN_FOR_TRUCKS_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SPEED_LIMIT_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MINIMUM_SPEED_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OVERTAKING_BAN_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OVERTAKING_BAN_FOR_TRUCKS_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ALL_RESTRICTIONS_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NO_STOPPING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NO_PARKING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NO_PARKING_ZONE_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NO_PARKING_ZONE_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_RIGHT_OF_WAY_NEXT_INTERSECTION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_RIGHT_OF_WAY_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_RIGHT_OF_WAY_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRIORITY_OVER_OPPOSITE_DIRECTION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRIORITY_OVER_OPPOSITE_DIRECTION_UPSIDE_DOWN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOWN_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOWN_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CAR_PARKING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CAR_PARKING_ZONE_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CAR_PARKING_ZONE_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_HALF_PARKING_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_HALF_PARKING_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_PARKING_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_PARKING_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_PERPENDICULAR_HALF_PARKING_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_PERPENDICULAR_HALF_PARKING_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_PERPENDICULAR_PARKING_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_PERPENDICULAR_PARKING_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_LIVING_STREET_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_LIVING_STREET_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TUNNEL;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_EMERGENCY_STOPPING_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_EMERGENCY_STOPPING_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_EXPRESSWAY_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_EXPRESSWAY_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NAMED_HIGHWAY_EXIT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NAMED_EXPRESSWAY_EXIT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NAMED_ROAD_EXIT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_EXIT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_EXPRESSWAY_EXIT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ONEWAY_STREET;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CROSSING_GUARDS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DEADEND;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DEADEND_EXCLUDING_DESIGNATED_ACTORS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_FIRST_AID_STATION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_POLICE_STATION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TELEPHONE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_FILLING_STATION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HOTEL;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_INN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_KIOSK;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOILET;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CHAPEL;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOURIST_INFO;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_REPAIR_SERVICE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PEDESTRIAN_UNDERPASS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PEDESTRIAN_BRIDGE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CAMPER_PLACE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ADVISORY_SPEED_LIMIT_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ADVISORY_SPEED_LIMIT_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PLACE_NAME;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOURIST_ATTRACTION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOURIST_ROUTE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOURIST_AREA;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SHOULDER_NOT_PASSABLE_MOTOR_VEHICLES;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SHOULDER_UNSAFE_TRUCKS_TRACTORS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOLL_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOLL_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOLL_ROAD;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CUSTOMS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_INTERNATIONAL_BORDER_INFO;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_STREETLIGHT_RED_BAND;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_FEDERAL_HIGHWAY_ROUTE_NUMBER;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_ROUTE_NUMBER;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_INTERCHANGE_NUMBER;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_EUROPEAN_ROUTE_NUMBER;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_FEDERAL_HIGHWAY_DIRECTION_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_FEDERAL_HIGHWAY_DIRECTION_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRIMARY_ROAD_DIRECTION_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRIMARY_ROAD_DIRECTION_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SECONDARY_ROAD_DIRECTION_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SECONDARY_ROAD_DIRECTION_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_DESIGNATED_ACTORS_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_DESIGNATED_ACTORS_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROUTING_DESIGNATED_ACTORS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_TO_HIGHWAY_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_TO_HIGHWAY_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_TO_LOCAL_DESTINATION_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_TO_LOCAL_DESTINATION_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CONSOLIDATED_DIRECTIONS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_STREET_NAME;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_PREANNOUNCEMENT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_PREANNOUNCEMENT_LANE_CONFIG;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_PREANNOUNCEMENT_HIGHWAY_ENTRIES;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_ANNOUNCEMENT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OTHER_ROAD_ANNOUNCEMENT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_ANNOUNCEMENT_TRUCK_STOP;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_PREANNOUNCEMENT_DIRECTIONS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_POLE_EXIT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_DISTANCE_BOARD;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DETOUR_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DETOUR_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NUMBERED_DETOUR;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DETOUR_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DETOUR_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DETOUR_ROUTING_BOARD;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OPTIONAL_DETOUR;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OPTIONAL_DETOUR_ROUTING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROUTE_RECOMMENDATION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROUTE_RECOMMENDATION_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ANNOUNCE_LANE_TRANSITION_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ANNOUNCE_LANE_TRANSITION_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ANNOUNCE_RIGHT_LANE_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ANNOUNCE_LEFT_LANE_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ANNOUNCE_RIGHT_LANE_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ANNOUNCE_LEFT_LANE_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ANNOUNCE_LANE_CONSOLIDATION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DETOUR_CITY_BLOCK;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_GATE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_POLE_WARNING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TRAFFIC_CONE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MOBILE_LANE_CLOSURE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_REFLECTOR_POST;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTIONAL_BOARD_WARNING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_GUIDING_PLATE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_GUIDING_PLATE_WEDGES;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PARKING_HAZARD;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TRAFFIC_LIGHT_GREEN_ARROW;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::Type_MIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::Type_MAX;
constexpr int TrafficSign_MainSign_Classification::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficSign_MainSign_Classification_DirectionScope_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficsign_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficsign_2eproto[2];
}
bool TrafficSign_MainSign_Classification_DirectionScope_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DIRECTION_SCOPE_UNKNOWN;
constexpr TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DIRECTION_SCOPE_OTHER;
constexpr TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DIRECTION_SCOPE_NO_DIRECTION;
constexpr TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DIRECTION_SCOPE_LEFT;
constexpr TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DIRECTION_SCOPE_RIGHT;
constexpr TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DIRECTION_SCOPE_LEFT_RIGHT;
constexpr TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DirectionScope_MIN;
constexpr TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DirectionScope_MAX;
constexpr int TrafficSign_MainSign_Classification::DirectionScope_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficSign_SupplementarySign_Classification_Arrow_Direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficsign_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficsign_2eproto[3];
}
bool TrafficSign_SupplementarySign_Classification_Arrow_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_UNKNOWN;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_OTHER;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_NO_DIRECTION;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_0_DEG;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_45_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_45_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_90_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_90_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_135_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_135_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_180_DEG;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_45_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_45_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_90_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_90_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_135_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_135_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_180_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_180_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_0_DEG;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_45_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_45_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_90_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_90_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_135_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_135_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_180_DEG;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_KEEP_LEFT_TO_TURN_0_DEG;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_KEEP_RIGHT_TO_TURN_0_DEG;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_KEEP_LEFT_TO_TURN_90_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_KEEP_RIGHT_TO_TURN_90_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_KEEP_LEFT_DRIVE_BACK_TO_TURN_90_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_KEEP_RIGHT_DRIVE_BACK_TO_TURN_90_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::Direction_MIN;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::Direction_MAX;
constexpr int TrafficSign_SupplementarySign_Classification_Arrow::Direction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficSign_SupplementarySign_Classification_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficsign_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficsign_2eproto[4];
}
bool TrafficSign_SupplementarySign_Classification_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_UNKNOWN;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_OTHER;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_NO_SIGN;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_TEXT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_SPACE;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_TIME;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_ARROW;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_CONSTRAINED_TO;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_EXCEPT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_VALID_FOR_DISTANCE;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_BOTTOM_LEFT_FOUR_WAY;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_TOP_LEFT_FOUR_WAY;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_BOTTOM_LEFT_THREE_WAY_STRAIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_BOTTOM_LEFT_THREE_WAY_SIDEWAYS;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_TOP_LEFT_THREE_WAY_STRAIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_BOTTOM_RIGHT_FOUR_WAY;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_TOP_RIGHT_FOUR_WAY;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_BOTTOM_RIGHT_THREE_WAY_STRAIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_BOTTOM_RIGHT_THREE_WAY_SIDEWAY;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_TOP_RIGHT_THREE_WAY_STRAIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_VALID_IN_DISTANCE;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_STOP_IN;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_LEFT_ARROW;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_LEFT_BEND_ARROW;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_RIGHT_ARROW;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_RIGHT_BEND_ARROW;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_ACCIDENT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_SNOW;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_FOG;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_ROLLING_HIGHWAY_INFORMATION;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_SERVICES;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_TIME_RANGE;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PARKING_DISC_TIME_RESTRICTION;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_WEIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_WET;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PARKING_CONSTRAINT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_NO_WAITING_SIDE_STRIPES;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_RAIN;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_SNOW_RAIN;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_NIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_STOP_4_WAY;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_TRUCK;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_TRACTORS_MAY_BE_PASSED;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_HAZARDOUS;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_TRAILER;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_ZONE;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_MOTORCYCLE;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_MOTORCYCLE_ALLOWED;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_CAR;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::Type_MIN;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::Type_MAX;
constexpr int TrafficSign_SupplementarySign_Classification::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficSign_SupplementarySign_Classification_Actor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficsign_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficsign_2eproto[5];
}
bool TrafficSign_SupplementarySign_Classification_Actor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_UNKNOWN;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_OTHER;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_NO_ACTOR;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_AGRICULTURAL_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_BICYCLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_BUSES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CAMPERS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CARAVANS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CARS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CARS_WITH_CARAVANS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CARS_WITH_TRAILERS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CATTLE;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CHILDREN;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CONSTRUCTION_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_DELIVERY_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_DISABLED_PERSONS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_EBIKES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_ELECTRIC_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_EMERGENCY_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_FERRY_USERS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_FORESTRY_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_HAZARDOUS_GOODS_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_HORSE_CARRIAGES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_HORSE_RIDERS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_INLINE_SKATERS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_MEDICAL_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_MILITARY_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_MOPEDS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_MOTORCYCLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_MOTORIZED_MULTITRACK_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_OPERATIONAL_AND_UTILITY_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_PEDESTRIANS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_PUBLIC_TRANSPORT_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_RAILROAD_TRAFFIC;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_RESIDENTS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_SLURRY_TRANSPORT;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_TAXIS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_TRACTORS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_TRAILERS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_TRAMS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_TRUCKS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_TRUCKS_WITH_SEMITRAILERS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_TRUCKS_WITH_TRAILERS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_VEHICLES_WITH_GREEN_BADGES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_VEHICLES_WITH_RED_BADGES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_VEHICLES_WITH_YELLOW_BADGES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_WATER_POLLUTANT_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_WINTER_SPORTSPEOPLE;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::Actor_MIN;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::Actor_MAX;
constexpr int TrafficSign_SupplementarySign_Classification::Actor_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficSign_Variability_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficsign_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficsign_2eproto[6];
}
bool TrafficSign_Variability_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TrafficSign_Variability TrafficSign::VARIABILITY_UNKNOWN;
constexpr TrafficSign_Variability TrafficSign::VARIABILITY_OTHER;
constexpr TrafficSign_Variability TrafficSign::VARIABILITY_FIXED;
constexpr TrafficSign_Variability TrafficSign::VARIABILITY_VARIABLE;
constexpr TrafficSign_Variability TrafficSign::VARIABILITY_MOVABLE;
constexpr TrafficSign_Variability TrafficSign::VARIABILITY_MUTABLE;
constexpr TrafficSign_Variability TrafficSign::VARIABILITY_MOVABLE_AND_MUTABLE;
constexpr TrafficSign_Variability TrafficSign::Variability_MIN;
constexpr TrafficSign_Variability TrafficSign::Variability_MAX;
constexpr int TrafficSign::Variability_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class TrafficSignValue::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficSignValue>()._impl_._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrafficSignValue::TrafficSignValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficSignValue)
}
TrafficSignValue::TrafficSignValue(const TrafficSignValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrafficSignValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.value_unit_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_unit_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.value_unit_));
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficSignValue)
}

inline void TrafficSignValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.value_unit_){0}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrafficSignValue::~TrafficSignValue() {
  // @@protoc_insertion_point(destructor:osi3.TrafficSignValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrafficSignValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void TrafficSignValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrafficSignValue::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficSignValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.text_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.value_unit_) -
        reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.value_unit_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficSignValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficSignValue.Unit value_unit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::TrafficSignValue_Unit_IsValid(val))) {
            _internal_set_value_unit(static_cast<::osi3::TrafficSignValue_Unit>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "osi3.TrafficSignValue.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficSignValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficSignValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double value = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  // optional .osi3.TrafficSignValue.Unit value_unit = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_value_unit(), target);
  }

  // optional string text = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.TrafficSignValue.text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficSignValue)
  return target;
}

size_t TrafficSignValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficSignValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string text = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional double value = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .osi3.TrafficSignValue.Unit value_unit = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_value_unit());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficSignValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrafficSignValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficSignValue::GetClassData() const { return &_class_data_; }


void TrafficSignValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrafficSignValue*>(&to_msg);
  auto& from = static_cast<const TrafficSignValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficSignValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.value_unit_ = from._impl_.value_unit_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSignValue::CopyFrom(const TrafficSignValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficSignValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignValue::IsInitialized() const {
  return true;
}

void TrafficSignValue::InternalSwap(TrafficSignValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSignValue, _impl_.value_unit_)
      + sizeof(TrafficSignValue::_impl_.value_unit_)
      - PROTOBUF_FIELD_OFFSET(TrafficSignValue, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSignValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5ftrafficsign_2eproto_getter, &descriptor_table_osi_5ftrafficsign_2eproto_once,
      file_level_metadata_osi_5ftrafficsign_2eproto[0]);
}

// ===================================================================

class TrafficSign_MainSign_Classification::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficSign_MainSign_Classification>()._impl_._has_bits_);
  static void set_has_variability(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::osi3::TrafficSignValue& value(const TrafficSign_MainSign_Classification* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_direction_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_vertically_mirrored(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_out_of_service(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_country_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sub_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::osi3::TrafficSignValue&
TrafficSign_MainSign_Classification::_Internal::value(const TrafficSign_MainSign_Classification* msg) {
  return *msg->_impl_.value_;
}
void TrafficSign_MainSign_Classification::clear_assigned_lane_id() {
  _impl_.assigned_lane_id_.Clear();
}
void TrafficSign_MainSign_Classification::clear_logical_lane_assignment() {
  _impl_.logical_lane_assignment_.Clear();
}
TrafficSign_MainSign_Classification::TrafficSign_MainSign_Classification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficSign.MainSign.Classification)
}
TrafficSign_MainSign_Classification::TrafficSign_MainSign_Classification(const TrafficSign_MainSign_Classification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrafficSign_MainSign_Classification* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.assigned_lane_id_){from._impl_.assigned_lane_id_}
    , decltype(_impl_.logical_lane_assignment_){from._impl_.logical_lane_assignment_}
    , decltype(_impl_.country_){}
    , decltype(_impl_.country_revision_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.sub_code_){}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.variability_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.direction_scope_){}
    , decltype(_impl_.vertically_mirrored_){}
    , decltype(_impl_.is_out_of_service_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country()) {
    _this->_impl_.country_.Set(from._internal_country(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_revision_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_revision_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country_revision()) {
    _this->_impl_.country_revision_.Set(from._internal_country_revision(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_code()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sub_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sub_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sub_code()) {
    _this->_impl_.sub_code_.Set(from._internal_sub_code(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::osi3::TrafficSignValue(*from._impl_.value_);
  }
  ::memcpy(&_impl_.variability_, &from._impl_.variability_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_out_of_service_) -
    reinterpret_cast<char*>(&_impl_.variability_)) + sizeof(_impl_.is_out_of_service_));
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficSign.MainSign.Classification)
}

inline void TrafficSign_MainSign_Classification::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.assigned_lane_id_){arena}
    , decltype(_impl_.logical_lane_assignment_){arena}
    , decltype(_impl_.country_){}
    , decltype(_impl_.country_revision_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.sub_code_){}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.variability_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.direction_scope_){0}
    , decltype(_impl_.vertically_mirrored_){false}
    , decltype(_impl_.is_out_of_service_){false}
  };
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_revision_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_revision_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sub_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sub_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrafficSign_MainSign_Classification::~TrafficSign_MainSign_Classification() {
  // @@protoc_insertion_point(destructor:osi3.TrafficSign.MainSign.Classification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrafficSign_MainSign_Classification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.assigned_lane_id_.~RepeatedPtrField();
  _impl_.logical_lane_assignment_.~RepeatedPtrField();
  _impl_.country_.Destroy();
  _impl_.country_revision_.Destroy();
  _impl_.code_.Destroy();
  _impl_.sub_code_.Destroy();
  if (this != internal_default_instance()) delete _impl_.value_;
}

void TrafficSign_MainSign_Classification::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrafficSign_MainSign_Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficSign.MainSign.Classification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.assigned_lane_id_.Clear();
  _impl_.logical_lane_assignment_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.country_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.country_revision_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.sub_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.value_ != nullptr);
      _impl_.value_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.variability_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.direction_scope_) -
        reinterpret_cast<char*>(&_impl_.variability_)) + sizeof(_impl_.direction_scope_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.vertically_mirrored_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_out_of_service_) -
        reinterpret_cast<char*>(&_impl_.vertically_mirrored_)) + sizeof(_impl_.is_out_of_service_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficSign_MainSign_Classification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.TrafficSign.Variability variability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::TrafficSign_Variability_IsValid(val))) {
            _internal_set_variability(static_cast<::osi3::TrafficSign_Variability>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficSign.MainSign.Classification.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::TrafficSign_MainSign_Classification_Type_IsValid(val))) {
            _internal_set_type(static_cast<::osi3::TrafficSign_MainSign_Classification_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficSignValue value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficSign.MainSign.Classification.DirectionScope direction_scope = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::TrafficSign_MainSign_Classification_DirectionScope_IsValid(val))) {
            _internal_set_direction_scope(static_cast<::osi3::TrafficSign_MainSign_Classification_DirectionScope>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Identifier assigned_lane_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assigned_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool vertically_mirrored = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_vertically_mirrored(&has_bits);
          _impl_.vertically_mirrored_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_out_of_service = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_out_of_service(&has_bits);
          _impl_.is_out_of_service_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string country = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "osi3.TrafficSign.MainSign.Classification.country");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string country_revision = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_country_revision();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "osi3.TrafficSign.MainSign.Classification.country_revision");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string code = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "osi3.TrafficSign.MainSign.Classification.code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string sub_code = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_sub_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "osi3.TrafficSign.MainSign.Classification.sub_code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logical_lane_assignment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficSign_MainSign_Classification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficSign.MainSign.Classification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.TrafficSign.Variability variability = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_variability(), target);
  }

  // optional .osi3.TrafficSign.MainSign.Classification.Type type = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional .osi3.TrafficSignValue value = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.TrafficSign.MainSign.Classification.DirectionScope direction_scope = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_direction_scope(), target);
  }

  // repeated .osi3.Identifier assigned_lane_id = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_assigned_lane_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_assigned_lane_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool vertically_mirrored = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_vertically_mirrored(), target);
  }

  // optional bool is_out_of_service = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_out_of_service(), target);
  }

  // optional string country = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.TrafficSign.MainSign.Classification.country");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_country(), target);
  }

  // optional string country_revision = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_revision().data(), static_cast<int>(this->_internal_country_revision().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.TrafficSign.MainSign.Classification.country_revision");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_country_revision(), target);
  }

  // optional string code = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.TrafficSign.MainSign.Classification.code");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_code(), target);
  }

  // optional string sub_code = 11;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sub_code().data(), static_cast<int>(this->_internal_sub_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.TrafficSign.MainSign.Classification.sub_code");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_sub_code(), target);
  }

  // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_logical_lane_assignment_size()); i < n; i++) {
    const auto& repfield = this->_internal_logical_lane_assignment(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficSign.MainSign.Classification)
  return target;
}

size_t TrafficSign_MainSign_Classification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficSign.MainSign.Classification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Identifier assigned_lane_id = 5;
  total_size += 1UL * this->_internal_assigned_lane_id_size();
  for (const auto& msg : this->_impl_.assigned_lane_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 12;
  total_size += 1UL * this->_internal_logical_lane_assignment_size();
  for (const auto& msg : this->_impl_.logical_lane_assignment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string country = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country());
    }

    // optional string country_revision = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_revision());
    }

    // optional string code = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code());
    }

    // optional string sub_code = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sub_code());
    }

    // optional .osi3.TrafficSignValue value = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_);
    }

    // optional .osi3.TrafficSign.Variability variability = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_variability());
    }

    // optional .osi3.TrafficSign.MainSign.Classification.Type type = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .osi3.TrafficSign.MainSign.Classification.DirectionScope direction_scope = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_direction_scope());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool vertically_mirrored = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool is_out_of_service = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficSign_MainSign_Classification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrafficSign_MainSign_Classification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficSign_MainSign_Classification::GetClassData() const { return &_class_data_; }


void TrafficSign_MainSign_Classification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrafficSign_MainSign_Classification*>(&to_msg);
  auto& from = static_cast<const TrafficSign_MainSign_Classification&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficSign.MainSign.Classification)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.assigned_lane_id_.MergeFrom(from._impl_.assigned_lane_id_);
  _this->_impl_.logical_lane_assignment_.MergeFrom(from._impl_.logical_lane_assignment_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_country(from._internal_country());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_country_revision(from._internal_country_revision());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_code(from._internal_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_sub_code(from._internal_sub_code());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_value()->::osi3::TrafficSignValue::MergeFrom(
          from._internal_value());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.variability_ = from._impl_.variability_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.direction_scope_ = from._impl_.direction_scope_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.vertically_mirrored_ = from._impl_.vertically_mirrored_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.is_out_of_service_ = from._impl_.is_out_of_service_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSign_MainSign_Classification::CopyFrom(const TrafficSign_MainSign_Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficSign.MainSign.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign_MainSign_Classification::IsInitialized() const {
  return true;
}

void TrafficSign_MainSign_Classification::InternalSwap(TrafficSign_MainSign_Classification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.assigned_lane_id_.InternalSwap(&other->_impl_.assigned_lane_id_);
  _impl_.logical_lane_assignment_.InternalSwap(&other->_impl_.logical_lane_assignment_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_, lhs_arena,
      &other->_impl_.country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_revision_, lhs_arena,
      &other->_impl_.country_revision_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sub_code_, lhs_arena,
      &other->_impl_.sub_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSign_MainSign_Classification, _impl_.is_out_of_service_)
      + sizeof(TrafficSign_MainSign_Classification::_impl_.is_out_of_service_)
      - PROTOBUF_FIELD_OFFSET(TrafficSign_MainSign_Classification, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSign_MainSign_Classification::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5ftrafficsign_2eproto_getter, &descriptor_table_osi_5ftrafficsign_2eproto_once,
      file_level_metadata_osi_5ftrafficsign_2eproto[1]);
}

// ===================================================================

class TrafficSign_MainSign::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficSign_MainSign>()._impl_._has_bits_);
  static const ::osi3::BaseStationary& base(const TrafficSign_MainSign* msg);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::TrafficSign_MainSign_Classification& classification(const TrafficSign_MainSign* msg);
  static void set_has_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_model_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osi3::BaseStationary&
TrafficSign_MainSign::_Internal::base(const TrafficSign_MainSign* msg) {
  return *msg->_impl_.base_;
}
const ::osi3::TrafficSign_MainSign_Classification&
TrafficSign_MainSign::_Internal::classification(const TrafficSign_MainSign* msg) {
  return *msg->_impl_.classification_;
}
void TrafficSign_MainSign::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TrafficSign_MainSign::TrafficSign_MainSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficSign.MainSign)
}
TrafficSign_MainSign::TrafficSign_MainSign(const TrafficSign_MainSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrafficSign_MainSign* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.model_reference_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.classification_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_reference_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_reference_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_model_reference()) {
    _this->_impl_.model_reference_.Set(from._internal_model_reference(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::osi3::BaseStationary(*from._impl_.base_);
  }
  if (from._internal_has_classification()) {
    _this->_impl_.classification_ = new ::osi3::TrafficSign_MainSign_Classification(*from._impl_.classification_);
  }
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficSign.MainSign)
}

inline void TrafficSign_MainSign::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.model_reference_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.classification_){nullptr}
  };
  _impl_.model_reference_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_reference_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrafficSign_MainSign::~TrafficSign_MainSign() {
  // @@protoc_insertion_point(destructor:osi3.TrafficSign.MainSign)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrafficSign_MainSign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_reference_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
  if (this != internal_default_instance()) delete _impl_.classification_;
}

void TrafficSign_MainSign::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrafficSign_MainSign::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficSign.MainSign)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.model_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.base_ != nullptr);
      _impl_.base_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.classification_ != nullptr);
      _impl_.classification_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficSign_MainSign::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.BaseStationary base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficSign.MainSign.Classification classification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_classification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string model_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_model_reference();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "osi3.TrafficSign.MainSign.model_reference");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficSign_MainSign::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficSign.MainSign)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.BaseStationary base = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.TrafficSign.MainSign.Classification classification = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::classification(this),
        _Internal::classification(this).GetCachedSize(), target, stream);
  }

  // optional string model_reference = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model_reference().data(), static_cast<int>(this->_internal_model_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.TrafficSign.MainSign.model_reference");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficSign.MainSign)
  return target;
}

size_t TrafficSign_MainSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficSign.MainSign)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string model_reference = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model_reference());
    }

    // optional .osi3.BaseStationary base = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.base_);
    }

    // optional .osi3.TrafficSign.MainSign.Classification classification = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.classification_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficSign_MainSign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrafficSign_MainSign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficSign_MainSign::GetClassData() const { return &_class_data_; }


void TrafficSign_MainSign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrafficSign_MainSign*>(&to_msg);
  auto& from = static_cast<const TrafficSign_MainSign&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficSign.MainSign)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_model_reference(from._internal_model_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_base()->::osi3::BaseStationary::MergeFrom(
          from._internal_base());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_classification()->::osi3::TrafficSign_MainSign_Classification::MergeFrom(
          from._internal_classification());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSign_MainSign::CopyFrom(const TrafficSign_MainSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficSign.MainSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign_MainSign::IsInitialized() const {
  return true;
}

void TrafficSign_MainSign::InternalSwap(TrafficSign_MainSign* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_reference_, lhs_arena,
      &other->_impl_.model_reference_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSign_MainSign, _impl_.classification_)
      + sizeof(TrafficSign_MainSign::_impl_.classification_)
      - PROTOBUF_FIELD_OFFSET(TrafficSign_MainSign, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSign_MainSign::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5ftrafficsign_2eproto_getter, &descriptor_table_osi_5ftrafficsign_2eproto_once,
      file_level_metadata_osi_5ftrafficsign_2eproto[2]);
}

// ===================================================================

class TrafficSign_SupplementarySign_Classification_Arrow::_Internal {
 public:
};

void TrafficSign_SupplementarySign_Classification_Arrow::clear_lane_id() {
  _impl_.lane_id_.Clear();
}
TrafficSign_SupplementarySign_Classification_Arrow::TrafficSign_SupplementarySign_Classification_Arrow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
}
TrafficSign_SupplementarySign_Classification_Arrow::TrafficSign_SupplementarySign_Classification_Arrow(const TrafficSign_SupplementarySign_Classification_Arrow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrafficSign_SupplementarySign_Classification_Arrow* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lane_id_){from._impl_.lane_id_}
    , decltype(_impl_.direction_){from._impl_.direction_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
}

inline void TrafficSign_SupplementarySign_Classification_Arrow::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lane_id_){arena}
    , decltype(_impl_.direction_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TrafficSign_SupplementarySign_Classification_Arrow::~TrafficSign_SupplementarySign_Classification_Arrow() {
  // @@protoc_insertion_point(destructor:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrafficSign_SupplementarySign_Classification_Arrow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lane_id_.~RepeatedPtrField();
  _impl_.direction_.~RepeatedField();
}

void TrafficSign_SupplementarySign_Classification_Arrow::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrafficSign_SupplementarySign_Classification_Arrow::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lane_id_.Clear();
  _impl_.direction_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficSign_SupplementarySign_Classification_Arrow::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .osi3.Identifier lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow.Direction direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::osi3::TrafficSign_SupplementarySign_Classification_Arrow_Direction_IsValid(val))) {
              _internal_add_direction(static_cast<::osi3::TrafficSign_SupplementarySign_Classification_Arrow_Direction>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_direction(), ptr, ctx, ::osi3::TrafficSign_SupplementarySign_Classification_Arrow_Direction_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficSign_SupplementarySign_Classification_Arrow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .osi3.Identifier lane_id = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lane_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_lane_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow.Direction direction = 2;
  for (int i = 0, n = this->_internal_direction_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_direction(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  return target;
}

size_t TrafficSign_SupplementarySign_Classification_Arrow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Identifier lane_id = 1;
  total_size += 1UL * this->_internal_lane_id_size();
  for (const auto& msg : this->_impl_.lane_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow.Direction direction = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_direction_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_direction(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficSign_SupplementarySign_Classification_Arrow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrafficSign_SupplementarySign_Classification_Arrow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficSign_SupplementarySign_Classification_Arrow::GetClassData() const { return &_class_data_; }


void TrafficSign_SupplementarySign_Classification_Arrow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrafficSign_SupplementarySign_Classification_Arrow*>(&to_msg);
  auto& from = static_cast<const TrafficSign_SupplementarySign_Classification_Arrow&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lane_id_.MergeFrom(from._impl_.lane_id_);
  _this->_impl_.direction_.MergeFrom(from._impl_.direction_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSign_SupplementarySign_Classification_Arrow::CopyFrom(const TrafficSign_SupplementarySign_Classification_Arrow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign_SupplementarySign_Classification_Arrow::IsInitialized() const {
  return true;
}

void TrafficSign_SupplementarySign_Classification_Arrow::InternalSwap(TrafficSign_SupplementarySign_Classification_Arrow* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lane_id_.InternalSwap(&other->_impl_.lane_id_);
  _impl_.direction_.InternalSwap(&other->_impl_.direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSign_SupplementarySign_Classification_Arrow::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5ftrafficsign_2eproto_getter, &descriptor_table_osi_5ftrafficsign_2eproto_once,
      file_level_metadata_osi_5ftrafficsign_2eproto[3]);
}

// ===================================================================

class TrafficSign_SupplementarySign_Classification::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficSign_SupplementarySign_Classification>()._impl_._has_bits_);
  static void set_has_variability(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_out_of_service(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_country_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sub_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

void TrafficSign_SupplementarySign_Classification::clear_assigned_lane_id() {
  _impl_.assigned_lane_id_.Clear();
}
void TrafficSign_SupplementarySign_Classification::clear_logical_lane_assignment() {
  _impl_.logical_lane_assignment_.Clear();
}
TrafficSign_SupplementarySign_Classification::TrafficSign_SupplementarySign_Classification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficSign.SupplementarySign.Classification)
}
TrafficSign_SupplementarySign_Classification::TrafficSign_SupplementarySign_Classification(const TrafficSign_SupplementarySign_Classification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrafficSign_SupplementarySign_Classification* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){from._impl_.value_}
    , decltype(_impl_.assigned_lane_id_){from._impl_.assigned_lane_id_}
    , decltype(_impl_.actor_){from._impl_.actor_}
    , decltype(_impl_.arrow_){from._impl_.arrow_}
    , decltype(_impl_.logical_lane_assignment_){from._impl_.logical_lane_assignment_}
    , decltype(_impl_.country_){}
    , decltype(_impl_.country_revision_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.sub_code_){}
    , decltype(_impl_.variability_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.is_out_of_service_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country()) {
    _this->_impl_.country_.Set(from._internal_country(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_revision_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_revision_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country_revision()) {
    _this->_impl_.country_revision_.Set(from._internal_country_revision(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_code()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sub_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sub_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sub_code()) {
    _this->_impl_.sub_code_.Set(from._internal_sub_code(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.variability_, &from._impl_.variability_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_out_of_service_) -
    reinterpret_cast<char*>(&_impl_.variability_)) + sizeof(_impl_.is_out_of_service_));
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficSign.SupplementarySign.Classification)
}

inline void TrafficSign_SupplementarySign_Classification::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){arena}
    , decltype(_impl_.assigned_lane_id_){arena}
    , decltype(_impl_.actor_){arena}
    , decltype(_impl_.arrow_){arena}
    , decltype(_impl_.logical_lane_assignment_){arena}
    , decltype(_impl_.country_){}
    , decltype(_impl_.country_revision_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.sub_code_){}
    , decltype(_impl_.variability_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.is_out_of_service_){false}
  };
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_revision_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_revision_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sub_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sub_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrafficSign_SupplementarySign_Classification::~TrafficSign_SupplementarySign_Classification() {
  // @@protoc_insertion_point(destructor:osi3.TrafficSign.SupplementarySign.Classification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrafficSign_SupplementarySign_Classification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedPtrField();
  _impl_.assigned_lane_id_.~RepeatedPtrField();
  _impl_.actor_.~RepeatedField();
  _impl_.arrow_.~RepeatedPtrField();
  _impl_.logical_lane_assignment_.~RepeatedPtrField();
  _impl_.country_.Destroy();
  _impl_.country_revision_.Destroy();
  _impl_.code_.Destroy();
  _impl_.sub_code_.Destroy();
}

void TrafficSign_SupplementarySign_Classification::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrafficSign_SupplementarySign_Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficSign.SupplementarySign.Classification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _impl_.assigned_lane_id_.Clear();
  _impl_.actor_.Clear();
  _impl_.arrow_.Clear();
  _impl_.logical_lane_assignment_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.country_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.country_revision_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.sub_code_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&_impl_.variability_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_out_of_service_) -
        reinterpret_cast<char*>(&_impl_.variability_)) + sizeof(_impl_.is_out_of_service_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficSign_SupplementarySign_Classification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.TrafficSign.Variability variability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::TrafficSign_Variability_IsValid(val))) {
            _internal_set_variability(static_cast<::osi3::TrafficSign_Variability>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficSign.SupplementarySign.Classification.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::TrafficSign_SupplementarySign_Classification_Type_IsValid(val))) {
            _internal_set_type(static_cast<::osi3::TrafficSign_SupplementarySign_Classification_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.TrafficSignValue value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Identifier assigned_lane_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assigned_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.TrafficSign.SupplementarySign.Classification.Actor actor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::osi3::TrafficSign_SupplementarySign_Classification_Actor_IsValid(val))) {
              _internal_add_actor(static_cast<::osi3::TrafficSign_SupplementarySign_Classification_Actor>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_actor(), ptr, ctx, ::osi3::TrafficSign_SupplementarySign_Classification_Actor_IsValid, &_internal_metadata_, 5);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow arrow = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arrow(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_out_of_service = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_out_of_service(&has_bits);
          _impl_.is_out_of_service_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string country = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "osi3.TrafficSign.SupplementarySign.Classification.country");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string country_revision = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_country_revision();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "osi3.TrafficSign.SupplementarySign.Classification.country_revision");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string code = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "osi3.TrafficSign.SupplementarySign.Classification.code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string sub_code = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_sub_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "osi3.TrafficSign.SupplementarySign.Classification.sub_code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logical_lane_assignment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficSign_SupplementarySign_Classification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficSign.SupplementarySign.Classification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.TrafficSign.Variability variability = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_variability(), target);
  }

  // optional .osi3.TrafficSign.SupplementarySign.Classification.Type type = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // repeated .osi3.TrafficSignValue value = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_size()); i < n; i++) {
    const auto& repfield = this->_internal_value(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .osi3.Identifier assigned_lane_id = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_assigned_lane_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_assigned_lane_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Actor actor = 5;
  for (int i = 0, n = this->_internal_actor_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_actor(i), target);
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow arrow = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_arrow_size()); i < n; i++) {
    const auto& repfield = this->_internal_arrow(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool is_out_of_service = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_out_of_service(), target);
  }

  // optional string country = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.TrafficSign.SupplementarySign.Classification.country");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_country(), target);
  }

  // optional string country_revision = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_revision().data(), static_cast<int>(this->_internal_country_revision().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.TrafficSign.SupplementarySign.Classification.country_revision");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_country_revision(), target);
  }

  // optional string code = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.TrafficSign.SupplementarySign.Classification.code");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_code(), target);
  }

  // optional string sub_code = 11;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sub_code().data(), static_cast<int>(this->_internal_sub_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.TrafficSign.SupplementarySign.Classification.sub_code");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_sub_code(), target);
  }

  // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_logical_lane_assignment_size()); i < n; i++) {
    const auto& repfield = this->_internal_logical_lane_assignment(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficSign.SupplementarySign.Classification)
  return target;
}

size_t TrafficSign_SupplementarySign_Classification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficSign.SupplementarySign.Classification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.TrafficSignValue value = 3;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->_impl_.value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.Identifier assigned_lane_id = 4;
  total_size += 1UL * this->_internal_assigned_lane_id_size();
  for (const auto& msg : this->_impl_.assigned_lane_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Actor actor = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_actor_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_actor(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow arrow = 6;
  total_size += 1UL * this->_internal_arrow_size();
  for (const auto& msg : this->_impl_.arrow_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 12;
  total_size += 1UL * this->_internal_logical_lane_assignment_size();
  for (const auto& msg : this->_impl_.logical_lane_assignment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string country = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country());
    }

    // optional string country_revision = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_revision());
    }

    // optional string code = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code());
    }

    // optional string sub_code = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sub_code());
    }

    // optional .osi3.TrafficSign.Variability variability = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_variability());
    }

    // optional .osi3.TrafficSign.SupplementarySign.Classification.Type type = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional bool is_out_of_service = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficSign_SupplementarySign_Classification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrafficSign_SupplementarySign_Classification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficSign_SupplementarySign_Classification::GetClassData() const { return &_class_data_; }


void TrafficSign_SupplementarySign_Classification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrafficSign_SupplementarySign_Classification*>(&to_msg);
  auto& from = static_cast<const TrafficSign_SupplementarySign_Classification&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficSign.SupplementarySign.Classification)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_impl_.assigned_lane_id_.MergeFrom(from._impl_.assigned_lane_id_);
  _this->_impl_.actor_.MergeFrom(from._impl_.actor_);
  _this->_impl_.arrow_.MergeFrom(from._impl_.arrow_);
  _this->_impl_.logical_lane_assignment_.MergeFrom(from._impl_.logical_lane_assignment_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_country(from._internal_country());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_country_revision(from._internal_country_revision());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_code(from._internal_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_sub_code(from._internal_sub_code());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.variability_ = from._impl_.variability_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.is_out_of_service_ = from._impl_.is_out_of_service_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSign_SupplementarySign_Classification::CopyFrom(const TrafficSign_SupplementarySign_Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficSign.SupplementarySign.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign_SupplementarySign_Classification::IsInitialized() const {
  return true;
}

void TrafficSign_SupplementarySign_Classification::InternalSwap(TrafficSign_SupplementarySign_Classification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
  _impl_.assigned_lane_id_.InternalSwap(&other->_impl_.assigned_lane_id_);
  _impl_.actor_.InternalSwap(&other->_impl_.actor_);
  _impl_.arrow_.InternalSwap(&other->_impl_.arrow_);
  _impl_.logical_lane_assignment_.InternalSwap(&other->_impl_.logical_lane_assignment_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_, lhs_arena,
      &other->_impl_.country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_revision_, lhs_arena,
      &other->_impl_.country_revision_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sub_code_, lhs_arena,
      &other->_impl_.sub_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySign_Classification, _impl_.is_out_of_service_)
      + sizeof(TrafficSign_SupplementarySign_Classification::_impl_.is_out_of_service_)
      - PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySign_Classification, _impl_.variability_)>(
          reinterpret_cast<char*>(&_impl_.variability_),
          reinterpret_cast<char*>(&other->_impl_.variability_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSign_SupplementarySign_Classification::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5ftrafficsign_2eproto_getter, &descriptor_table_osi_5ftrafficsign_2eproto_once,
      file_level_metadata_osi_5ftrafficsign_2eproto[4]);
}

// ===================================================================

class TrafficSign_SupplementarySign::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficSign_SupplementarySign>()._impl_._has_bits_);
  static const ::osi3::BaseStationary& base(const TrafficSign_SupplementarySign* msg);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::TrafficSign_SupplementarySign_Classification& classification(const TrafficSign_SupplementarySign* msg);
  static void set_has_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_model_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osi3::BaseStationary&
TrafficSign_SupplementarySign::_Internal::base(const TrafficSign_SupplementarySign* msg) {
  return *msg->_impl_.base_;
}
const ::osi3::TrafficSign_SupplementarySign_Classification&
TrafficSign_SupplementarySign::_Internal::classification(const TrafficSign_SupplementarySign* msg) {
  return *msg->_impl_.classification_;
}
void TrafficSign_SupplementarySign::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TrafficSign_SupplementarySign::TrafficSign_SupplementarySign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficSign.SupplementarySign)
}
TrafficSign_SupplementarySign::TrafficSign_SupplementarySign(const TrafficSign_SupplementarySign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrafficSign_SupplementarySign* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.model_reference_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.classification_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_reference_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_reference_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_model_reference()) {
    _this->_impl_.model_reference_.Set(from._internal_model_reference(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::osi3::BaseStationary(*from._impl_.base_);
  }
  if (from._internal_has_classification()) {
    _this->_impl_.classification_ = new ::osi3::TrafficSign_SupplementarySign_Classification(*from._impl_.classification_);
  }
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficSign.SupplementarySign)
}

inline void TrafficSign_SupplementarySign::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.model_reference_){}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.classification_){nullptr}
  };
  _impl_.model_reference_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_reference_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrafficSign_SupplementarySign::~TrafficSign_SupplementarySign() {
  // @@protoc_insertion_point(destructor:osi3.TrafficSign.SupplementarySign)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrafficSign_SupplementarySign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_reference_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_;
  if (this != internal_default_instance()) delete _impl_.classification_;
}

void TrafficSign_SupplementarySign::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrafficSign_SupplementarySign::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficSign.SupplementarySign)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.model_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.base_ != nullptr);
      _impl_.base_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.classification_ != nullptr);
      _impl_.classification_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficSign_SupplementarySign::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.BaseStationary base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficSign.SupplementarySign.Classification classification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_classification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string model_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_model_reference();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "osi3.TrafficSign.SupplementarySign.model_reference");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficSign_SupplementarySign::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficSign.SupplementarySign)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.BaseStationary base = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.TrafficSign.SupplementarySign.Classification classification = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::classification(this),
        _Internal::classification(this).GetCachedSize(), target, stream);
  }

  // optional string model_reference = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model_reference().data(), static_cast<int>(this->_internal_model_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.TrafficSign.SupplementarySign.model_reference");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficSign.SupplementarySign)
  return target;
}

size_t TrafficSign_SupplementarySign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficSign.SupplementarySign)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string model_reference = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model_reference());
    }

    // optional .osi3.BaseStationary base = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.base_);
    }

    // optional .osi3.TrafficSign.SupplementarySign.Classification classification = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.classification_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficSign_SupplementarySign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrafficSign_SupplementarySign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficSign_SupplementarySign::GetClassData() const { return &_class_data_; }


void TrafficSign_SupplementarySign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrafficSign_SupplementarySign*>(&to_msg);
  auto& from = static_cast<const TrafficSign_SupplementarySign&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficSign.SupplementarySign)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_model_reference(from._internal_model_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_base()->::osi3::BaseStationary::MergeFrom(
          from._internal_base());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_classification()->::osi3::TrafficSign_SupplementarySign_Classification::MergeFrom(
          from._internal_classification());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSign_SupplementarySign::CopyFrom(const TrafficSign_SupplementarySign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficSign.SupplementarySign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign_SupplementarySign::IsInitialized() const {
  return true;
}

void TrafficSign_SupplementarySign::InternalSwap(TrafficSign_SupplementarySign* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_reference_, lhs_arena,
      &other->_impl_.model_reference_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySign, _impl_.classification_)
      + sizeof(TrafficSign_SupplementarySign::_impl_.classification_)
      - PROTOBUF_FIELD_OFFSET(TrafficSign_SupplementarySign, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSign_SupplementarySign::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5ftrafficsign_2eproto_getter, &descriptor_table_osi_5ftrafficsign_2eproto_once,
      file_level_metadata_osi_5ftrafficsign_2eproto[5]);
}

// ===================================================================

class TrafficSign::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficSign>()._impl_._has_bits_);
  static const ::osi3::Identifier& id(const TrafficSign* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::TrafficSign_MainSign& main_sign(const TrafficSign* msg);
  static void set_has_main_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::osi3::Identifier&
TrafficSign::_Internal::id(const TrafficSign* msg) {
  return *msg->_impl_.id_;
}
const ::osi3::TrafficSign_MainSign&
TrafficSign::_Internal::main_sign(const TrafficSign* msg) {
  return *msg->_impl_.main_sign_;
}
void TrafficSign::clear_id() {
  if (_impl_.id_ != nullptr) _impl_.id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TrafficSign::clear_source_reference() {
  _impl_.source_reference_.Clear();
}
TrafficSign::TrafficSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficSign)
}
TrafficSign::TrafficSign(const TrafficSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrafficSign* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.supplementary_sign_){from._impl_.supplementary_sign_}
    , decltype(_impl_.source_reference_){from._impl_.source_reference_}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.main_sign_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    _this->_impl_.id_ = new ::osi3::Identifier(*from._impl_.id_);
  }
  if (from._internal_has_main_sign()) {
    _this->_impl_.main_sign_ = new ::osi3::TrafficSign_MainSign(*from._impl_.main_sign_);
  }
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficSign)
}

inline void TrafficSign::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.supplementary_sign_){arena}
    , decltype(_impl_.source_reference_){arena}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.main_sign_){nullptr}
  };
}

TrafficSign::~TrafficSign() {
  // @@protoc_insertion_point(destructor:osi3.TrafficSign)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrafficSign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.supplementary_sign_.~RepeatedPtrField();
  _impl_.source_reference_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.id_;
  if (this != internal_default_instance()) delete _impl_.main_sign_;
}

void TrafficSign::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrafficSign::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficSign)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.supplementary_sign_.Clear();
  _impl_.source_reference_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.id_ != nullptr);
      _impl_.id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.main_sign_ != nullptr);
      _impl_.main_sign_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficSign::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Identifier id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficSign.MainSign main_sign = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_main_sign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.TrafficSign.SupplementarySign supplementary_sign = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_supplementary_sign(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.ExternalReference source_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_source_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficSign::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficSign)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.Identifier id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.TrafficSign.MainSign main_sign = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::main_sign(this),
        _Internal::main_sign(this).GetCachedSize(), target, stream);
  }

  // repeated .osi3.TrafficSign.SupplementarySign supplementary_sign = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_supplementary_sign_size()); i < n; i++) {
    const auto& repfield = this->_internal_supplementary_sign(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .osi3.ExternalReference source_reference = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_source_reference_size()); i < n; i++) {
    const auto& repfield = this->_internal_source_reference(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficSign)
  return target;
}

size_t TrafficSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficSign)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.TrafficSign.SupplementarySign supplementary_sign = 3;
  total_size += 1UL * this->_internal_supplementary_sign_size();
  for (const auto& msg : this->_impl_.supplementary_sign_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.ExternalReference source_reference = 4;
  total_size += 1UL * this->_internal_source_reference_size();
  for (const auto& msg : this->_impl_.source_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .osi3.Identifier id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.id_);
    }

    // optional .osi3.TrafficSign.MainSign main_sign = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.main_sign_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficSign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrafficSign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficSign::GetClassData() const { return &_class_data_; }


void TrafficSign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrafficSign*>(&to_msg);
  auto& from = static_cast<const TrafficSign&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficSign)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.supplementary_sign_.MergeFrom(from._impl_.supplementary_sign_);
  _this->_impl_.source_reference_.MergeFrom(from._impl_.source_reference_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_id()->::osi3::Identifier::MergeFrom(
          from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_main_sign()->::osi3::TrafficSign_MainSign::MergeFrom(
          from._internal_main_sign());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficSign::CopyFrom(const TrafficSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign::IsInitialized() const {
  return true;
}

void TrafficSign::InternalSwap(TrafficSign* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.supplementary_sign_.InternalSwap(&other->_impl_.supplementary_sign_);
  _impl_.source_reference_.InternalSwap(&other->_impl_.source_reference_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficSign, _impl_.main_sign_)
      + sizeof(TrafficSign::_impl_.main_sign_)
      - PROTOBUF_FIELD_OFFSET(TrafficSign, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSign::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5ftrafficsign_2eproto_getter, &descriptor_table_osi_5ftrafficsign_2eproto_once,
      file_level_metadata_osi_5ftrafficsign_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::TrafficSignValue*
Arena::CreateMaybeMessage< ::osi3::TrafficSignValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficSignValue >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficSign_MainSign_Classification*
Arena::CreateMaybeMessage< ::osi3::TrafficSign_MainSign_Classification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficSign_MainSign_Classification >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficSign_MainSign*
Arena::CreateMaybeMessage< ::osi3::TrafficSign_MainSign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficSign_MainSign >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficSign_SupplementarySign_Classification_Arrow*
Arena::CreateMaybeMessage< ::osi3::TrafficSign_SupplementarySign_Classification_Arrow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficSign_SupplementarySign_Classification_Arrow >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficSign_SupplementarySign_Classification*
Arena::CreateMaybeMessage< ::osi3::TrafficSign_SupplementarySign_Classification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficSign_SupplementarySign_Classification >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficSign_SupplementarySign*
Arena::CreateMaybeMessage< ::osi3::TrafficSign_SupplementarySign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficSign_SupplementarySign >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficSign*
Arena::CreateMaybeMessage< ::osi3::TrafficSign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficSign >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_hostvehicledata.proto

#include "osi_hostvehicledata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace osi3 {
PROTOBUF_CONSTEXPR HostVehicleData_VehicleBasics::HostVehicleData_VehicleBasics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.curb_weight_)*/0
  , /*decltype(_impl_.operating_state_)*/0} {}
struct HostVehicleData_VehicleBasicsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HostVehicleData_VehicleBasicsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HostVehicleData_VehicleBasicsDefaultTypeInternal() {}
  union {
    HostVehicleData_VehicleBasics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HostVehicleData_VehicleBasicsDefaultTypeInternal _HostVehicleData_VehicleBasics_default_instance_;
PROTOBUF_CONSTEXPR HostVehicleData_VehiclePowertrain_Motor::HostVehicleData_VehiclePowertrain_Motor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rpm_)*/0
  , /*decltype(_impl_.torque_)*/0
  , /*decltype(_impl_.type_)*/0} {}
struct HostVehicleData_VehiclePowertrain_MotorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HostVehicleData_VehiclePowertrain_MotorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HostVehicleData_VehiclePowertrain_MotorDefaultTypeInternal() {}
  union {
    HostVehicleData_VehiclePowertrain_Motor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HostVehicleData_VehiclePowertrain_MotorDefaultTypeInternal _HostVehicleData_VehiclePowertrain_Motor_default_instance_;
PROTOBUF_CONSTEXPR HostVehicleData_VehiclePowertrain::HostVehicleData_VehiclePowertrain(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.motor_)*/{}
  , /*decltype(_impl_.pedal_position_acceleration_)*/0
  , /*decltype(_impl_.pedal_position_clutch_)*/0
  , /*decltype(_impl_.gear_transmission_)*/0} {}
struct HostVehicleData_VehiclePowertrainDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HostVehicleData_VehiclePowertrainDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HostVehicleData_VehiclePowertrainDefaultTypeInternal() {}
  union {
    HostVehicleData_VehiclePowertrain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HostVehicleData_VehiclePowertrainDefaultTypeInternal _HostVehicleData_VehiclePowertrain_default_instance_;
PROTOBUF_CONSTEXPR HostVehicleData_VehicleBrakeSystem::HostVehicleData_VehicleBrakeSystem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pedal_position_brake_)*/0} {}
struct HostVehicleData_VehicleBrakeSystemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HostVehicleData_VehicleBrakeSystemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HostVehicleData_VehicleBrakeSystemDefaultTypeInternal() {}
  union {
    HostVehicleData_VehicleBrakeSystem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HostVehicleData_VehicleBrakeSystemDefaultTypeInternal _HostVehicleData_VehicleBrakeSystem_default_instance_;
PROTOBUF_CONSTEXPR HostVehicleData_VehicleSteering::HostVehicleData_VehicleSteering(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vehicle_steering_wheel_)*/nullptr} {}
struct HostVehicleData_VehicleSteeringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HostVehicleData_VehicleSteeringDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HostVehicleData_VehicleSteeringDefaultTypeInternal() {}
  union {
    HostVehicleData_VehicleSteering _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HostVehicleData_VehicleSteeringDefaultTypeInternal _HostVehicleData_VehicleSteering_default_instance_;
PROTOBUF_CONSTEXPR HostVehicleData_VehicleWheels_WheelData::HostVehicleData_VehicleWheels_WheelData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.axle_)*/0u
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.rotation_rate_)*/0
  , /*decltype(_impl_.slip_)*/0} {}
struct HostVehicleData_VehicleWheels_WheelDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HostVehicleData_VehicleWheels_WheelDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HostVehicleData_VehicleWheels_WheelDataDefaultTypeInternal() {}
  union {
    HostVehicleData_VehicleWheels_WheelData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HostVehicleData_VehicleWheels_WheelDataDefaultTypeInternal _HostVehicleData_VehicleWheels_WheelData_default_instance_;
PROTOBUF_CONSTEXPR HostVehicleData_VehicleWheels::HostVehicleData_VehicleWheels(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.wheel_data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HostVehicleData_VehicleWheelsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HostVehicleData_VehicleWheelsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HostVehicleData_VehicleWheelsDefaultTypeInternal() {}
  union {
    HostVehicleData_VehicleWheels _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HostVehicleData_VehicleWheelsDefaultTypeInternal _HostVehicleData_VehicleWheels_default_instance_;
PROTOBUF_CONSTEXPR HostVehicleData_VehicleLocalization::HostVehicleData_VehicleLocalization(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.orientation_)*/nullptr
  , /*decltype(_impl_.geodetic_position_)*/nullptr} {}
struct HostVehicleData_VehicleLocalizationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HostVehicleData_VehicleLocalizationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HostVehicleData_VehicleLocalizationDefaultTypeInternal() {}
  union {
    HostVehicleData_VehicleLocalization _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HostVehicleData_VehicleLocalizationDefaultTypeInternal _HostVehicleData_VehicleLocalization_default_instance_;
PROTOBUF_CONSTEXPR HostVehicleData_VehicleMotion::HostVehicleData_VehicleMotion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.orientation_)*/nullptr
  , /*decltype(_impl_.velocity_)*/nullptr
  , /*decltype(_impl_.orientation_rate_)*/nullptr
  , /*decltype(_impl_.acceleration_)*/nullptr
  , /*decltype(_impl_.current_curvature_)*/0} {}
struct HostVehicleData_VehicleMotionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HostVehicleData_VehicleMotionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HostVehicleData_VehicleMotionDefaultTypeInternal() {}
  union {
    HostVehicleData_VehicleMotion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HostVehicleData_VehicleMotionDefaultTypeInternal _HostVehicleData_VehicleMotion_default_instance_;
PROTOBUF_CONSTEXPR HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.override_reason_)*/{}
  , /*decltype(_impl_.active_)*/false} {}
struct HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverrideDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverrideDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverrideDefaultTypeInternal() {}
  union {
    HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverrideDefaultTypeInternal _HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_default_instance_;
PROTOBUF_CONSTEXPR HostVehicleData_VehicleAutomatedDrivingFunction::HostVehicleData_VehicleAutomatedDrivingFunction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.custom_detail_)*/{}
  , /*decltype(_impl_.custom_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.custom_state_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.driver_override_)*/nullptr
  , /*decltype(_impl_.name_)*/0
  , /*decltype(_impl_.state_)*/0} {}
struct HostVehicleData_VehicleAutomatedDrivingFunctionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HostVehicleData_VehicleAutomatedDrivingFunctionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HostVehicleData_VehicleAutomatedDrivingFunctionDefaultTypeInternal() {}
  union {
    HostVehicleData_VehicleAutomatedDrivingFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HostVehicleData_VehicleAutomatedDrivingFunctionDefaultTypeInternal _HostVehicleData_VehicleAutomatedDrivingFunction_default_instance_;
PROTOBUF_CONSTEXPR HostVehicleData::HostVehicleData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vehicle_automated_driving_function_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.location_rmse_)*/nullptr
  , /*decltype(_impl_.vehicle_basics_)*/nullptr
  , /*decltype(_impl_.vehicle_powertrain_)*/nullptr
  , /*decltype(_impl_.vehicle_brake_system_)*/nullptr
  , /*decltype(_impl_.vehicle_steering_)*/nullptr
  , /*decltype(_impl_.vehicle_wheels_)*/nullptr
  , /*decltype(_impl_.vehicle_localization_)*/nullptr
  , /*decltype(_impl_.version_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.host_vehicle_id_)*/nullptr
  , /*decltype(_impl_.vehicle_motion_)*/nullptr} {}
struct HostVehicleDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HostVehicleDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HostVehicleDataDefaultTypeInternal() {}
  union {
    HostVehicleData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HostVehicleDataDefaultTypeInternal _HostVehicleData_default_instance_;
}  // namespace osi3
static ::_pb::Metadata file_level_metadata_osi_5fhostvehicledata_2eproto[12];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_osi_5fhostvehicledata_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_osi_5fhostvehicledata_2eproto = nullptr;

const uint32_t TableStruct_osi_5fhostvehicledata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleBasics, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleBasics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleBasics, _impl_.curb_weight_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleBasics, _impl_.operating_state_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain_Motor, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain_Motor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain_Motor, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain_Motor, _impl_.rpm_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain_Motor, _impl_.torque_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain, _impl_.pedal_position_acceleration_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain, _impl_.pedal_position_clutch_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain, _impl_.gear_transmission_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain, _impl_.motor_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleBrakeSystem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleBrakeSystem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleBrakeSystem, _impl_.pedal_position_brake_),
  0,
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleSteering, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleSteering, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleSteering, _impl_.vehicle_steering_wheel_),
  0,
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleWheels_WheelData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleWheels_WheelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleWheels_WheelData, _impl_.axle_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleWheels_WheelData, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleWheels_WheelData, _impl_.rotation_rate_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleWheels_WheelData, _impl_.slip_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleWheels, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleWheels, _impl_.wheel_data_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleLocalization, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleLocalization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleLocalization, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleLocalization, _impl_.orientation_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleLocalization, _impl_.geodetic_position_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleMotion, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleMotion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleMotion, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleMotion, _impl_.orientation_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleMotion, _impl_.velocity_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleMotion, _impl_.orientation_rate_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleMotion, _impl_.acceleration_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleMotion, _impl_.current_curvature_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride, _impl_.active_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride, _impl_.override_reason_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction, _impl_.custom_name_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction, _impl_.custom_state_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction, _impl_.driver_override_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction, _impl_.custom_detail_),
  3,
  0,
  4,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, _impl_.host_vehicle_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, _impl_.location_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, _impl_.vehicle_basics_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, _impl_.vehicle_powertrain_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, _impl_.vehicle_brake_system_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, _impl_.vehicle_steering_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, _impl_.vehicle_wheels_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, _impl_.vehicle_localization_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, _impl_.vehicle_automated_driving_function_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, _impl_.vehicle_motion_),
  8,
  9,
  10,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  11,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::osi3::HostVehicleData_VehicleBasics)},
  { 10, 19, -1, sizeof(::osi3::HostVehicleData_VehiclePowertrain_Motor)},
  { 22, 32, -1, sizeof(::osi3::HostVehicleData_VehiclePowertrain)},
  { 36, 43, -1, sizeof(::osi3::HostVehicleData_VehicleBrakeSystem)},
  { 44, 51, -1, sizeof(::osi3::HostVehicleData_VehicleSteering)},
  { 52, 62, -1, sizeof(::osi3::HostVehicleData_VehicleWheels_WheelData)},
  { 66, -1, -1, sizeof(::osi3::HostVehicleData_VehicleWheels)},
  { 73, 82, -1, sizeof(::osi3::HostVehicleData_VehicleLocalization)},
  { 85, 97, -1, sizeof(::osi3::HostVehicleData_VehicleMotion)},
  { 103, 111, -1, sizeof(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride)},
  { 113, 125, -1, sizeof(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction)},
  { 131, 150, -1, sizeof(::osi3::HostVehicleData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::osi3::_HostVehicleData_VehicleBasics_default_instance_._instance,
  &::osi3::_HostVehicleData_VehiclePowertrain_Motor_default_instance_._instance,
  &::osi3::_HostVehicleData_VehiclePowertrain_default_instance_._instance,
  &::osi3::_HostVehicleData_VehicleBrakeSystem_default_instance_._instance,
  &::osi3::_HostVehicleData_VehicleSteering_default_instance_._instance,
  &::osi3::_HostVehicleData_VehicleWheels_WheelData_default_instance_._instance,
  &::osi3::_HostVehicleData_VehicleWheels_default_instance_._instance,
  &::osi3::_HostVehicleData_VehicleLocalization_default_instance_._instance,
  &::osi3::_HostVehicleData_VehicleMotion_default_instance_._instance,
  &::osi3::_HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_default_instance_._instance,
  &::osi3::_HostVehicleData_VehicleAutomatedDrivingFunction_default_instance_._instance,
  &::osi3::_HostVehicleData_default_instance_._instance,
};

const char descriptor_table_protodef_osi_5fhostvehicledata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031osi_hostvehicledata.proto\022\004osi3\032\021osi_v"
  "ersion.proto\032\020osi_common.proto\"\222\035\n\017HostV"
  "ehicleData\022\'\n\007version\030\t \001(\0132\026.osi3.Inter"
  "faceVersion\022\"\n\ttimestamp\030\n \001(\0132\017.osi3.Ti"
  "mestamp\022)\n\017host_vehicle_id\030\013 \001(\0132\020.osi3."
  "Identifier\022\"\n\010location\030\001 \001(\0132\020.osi3.Base"
  "Moving\022\'\n\rlocation_rmse\030\002 \001(\0132\020.osi3.Bas"
  "eMoving\022;\n\016vehicle_basics\030\003 \001(\0132#.osi3.H"
  "ostVehicleData.VehicleBasics\022C\n\022vehicle_"
  "powertrain\030\004 \001(\0132\'.osi3.HostVehicleData."
  "VehiclePowertrain\022F\n\024vehicle_brake_syste"
  "m\030\005 \001(\0132(.osi3.HostVehicleData.VehicleBr"
  "akeSystem\022\?\n\020vehicle_steering\030\006 \001(\0132%.os"
  "i3.HostVehicleData.VehicleSteering\022;\n\016ve"
  "hicle_wheels\030\007 \001(\0132#.osi3.HostVehicleDat"
  "a.VehicleWheels\022G\n\024vehicle_localization\030"
  "\010 \001(\0132).osi3.HostVehicleData.VehicleLoca"
  "lization\022a\n\"vehicle_automated_driving_fu"
  "nction\030\014 \003(\01325.osi3.HostVehicleData.Vehi"
  "cleAutomatedDrivingFunction\022;\n\016vehicle_m"
  "otion\030\r \001(\0132#.osi3.HostVehicleData.Vehic"
  "leMotion\032\362\002\n\rVehicleBasics\022\023\n\013curb_weigh"
  "t\030\001 \001(\001\022K\n\017operating_state\030\002 \001(\01622.osi3."
  "HostVehicleData.VehicleBasics.OperatingS"
  "tate\"\376\001\n\016OperatingState\022\033\n\027OPERATING_STA"
  "TE_UNKNOWN\020\000\022\031\n\025OPERATING_STATE_OTHER\020\001\022"
  "\031\n\025OPERATING_STATE_SLEEP\020\002\022\033\n\027OPERATING_"
  "STATE_STANDBY\020\003\022\034\n\030OPERATING_STATE_BOARD"
  "ING\020\004\022!\n\035OPERATING_STATE_ENTERTAINMENT\020\005"
  "\022\033\n\027OPERATING_STATE_DRIVING\020\006\022\036\n\032OPERATI"
  "NG_STATE_DIAGNOSTIC\020\007\032\366\002\n\021VehiclePowertr"
  "ain\022#\n\033pedal_position_acceleration\030\001 \001(\001"
  "\022\035\n\025pedal_position_clutch\030\002 \001(\001\022\031\n\021gear_"
  "transmission\030\003 \001(\005\022<\n\005motor\030\004 \003(\0132-.osi3"
  ".HostVehicleData.VehiclePowertrain.Motor"
  "\032\303\001\n\005Motor\022@\n\004type\030\001 \001(\01622.osi3.HostVehi"
  "cleData.VehiclePowertrain.Motor.Type\022\013\n\003"
  "rpm\030\002 \001(\001\022\016\n\006torque\030\003 \001(\001\"[\n\004Type\022\020\n\014TYP"
  "E_UNKNOWN\020\000\022\016\n\nTYPE_OTHER\020\001\022\r\n\tTYPE_OTTO"
  "\020\002\022\017\n\013TYPE_DIESEL\020\003\022\021\n\rTYPE_ELECTRIC\020\004\0322"
  "\n\022VehicleBrakeSystem\022\034\n\024pedal_position_b"
  "rake\030\001 \001(\001\032M\n\017VehicleSteering\022:\n\026vehicle"
  "_steering_wheel\030\001 \001(\0132\032.osi3.VehicleStee"
  "ringWheel\032\241\001\n\rVehicleWheels\022A\n\nwheel_dat"
  "a\030\001 \003(\0132-.osi3.HostVehicleData.VehicleWh"
  "eels.WheelData\032M\n\tWheelData\022\014\n\004axle\030\001 \001("
  "\r\022\r\n\005index\030\002 \001(\r\022\025\n\rrotation_rate\030\003 \001(\001\022"
  "\014\n\004slip\030\004 \001(\001\032\224\001\n\023VehicleLocalization\022 \n"
  "\010position\030\001 \001(\0132\016.osi3.Vector3d\022(\n\013orien"
  "tation\030\002 \001(\0132\023.osi3.Orientation3d\0221\n\021geo"
  "detic_position\030\003 \001(\0132\026.osi3.GeodeticPosi"
  "tion\032\355\001\n\rVehicleMotion\022 \n\010position\030\001 \001(\013"
  "2\016.osi3.Vector3d\022(\n\013orientation\030\002 \001(\0132\023."
  "osi3.Orientation3d\022 \n\010velocity\030\003 \001(\0132\016.o"
  "si3.Vector3d\022-\n\020orientation_rate\030\004 \001(\0132\023"
  ".osi3.Orientation3d\022$\n\014acceleration\030\005 \001("
  "\0132\016.osi3.Vector3d\022\031\n\021current_curvature\030\006"
  " \001(\001\032\354\013\n\037VehicleAutomatedDrivingFunction"
  "\022H\n\004name\030\001 \001(\0162:.osi3.HostVehicleData.Ve"
  "hicleAutomatedDrivingFunction.Name\022\023\n\013cu"
  "stom_name\030\002 \001(\t\022J\n\005state\030\003 \001(\0162;.osi3.Ho"
  "stVehicleData.VehicleAutomatedDrivingFun"
  "ction.State\022\024\n\014custom_state\030\004 \001(\t\022]\n\017dri"
  "ver_override\030\005 \001(\0132D.osi3.HostVehicleDat"
  "a.VehicleAutomatedDrivingFunction.Driver"
  "Override\022)\n\rcustom_detail\030\006 \003(\0132\022.osi3.K"
  "eyValuePair\032\303\001\n\016DriverOverride\022\016\n\006active"
  "\030\001 \001(\010\022d\n\017override_reason\030\002 \003(\0162K.osi3.H"
  "ostVehicleData.VehicleAutomatedDrivingFu"
  "nction.DriverOverride.Reason\";\n\006Reason\022\026"
  "\n\022REASON_BRAKE_PEDAL\020\000\022\031\n\025REASON_STEERIN"
  "G_INPUT\020\001\"\245\006\n\004Name\022\020\n\014NAME_UNKNOWN\020\000\022\016\n\n"
  "NAME_OTHER\020\001\022\033\n\027NAME_BLIND_SPOT_WARNING\020"
  "\002\022\"\n\036NAME_FORWARD_COLLISION_WARNING\020\003\022\037\n"
  "\033NAME_LANE_DEPARTURE_WARNING\020\004\022\"\n\036NAME_P"
  "ARKING_COLLISION_WARNING\020\005\022#\n\037NAME_REAR_"
  "CROSS_TRAFFIC_WARNING\020\006\022$\n NAME_AUTOMATI"
  "C_EMERGENCY_BRAKING\020\007\022%\n!NAME_AUTOMATIC_"
  "EMERGENCY_STEERING\020\010\022,\n(NAME_REVERSE_AUT"
  "OMATIC_EMERGENCY_BRAKING\020\t\022 \n\034NAME_ADAPT"
  "IVE_CRUISE_CONTROL\020\n\022\034\n\030NAME_LANE_KEEPIN"
  "G_ASSIST\020\013\022\"\n\036NAME_ACTIVE_DRIVING_ASSIST"
  "ANCE\020\014\022\026\n\022NAME_BACKUP_CAMERA\020\r\022\035\n\031NAME_S"
  "URROUND_VIEW_CAMERA\020\016\022\"\n\036NAME_ACTIVE_PAR"
  "KING_ASSISTANCE\020\017\022\"\n\036NAME_REMOTE_PARKING"
  "_ASSISTANCE\020\020\022\033\n\027NAME_TRAILER_ASSISTANCE"
  "\020\021\022\035\n\031NAME_AUTOMATIC_HIGH_BEAMS\020\022\022\032\n\026NAM"
  "E_DRIVER_MONITORING\020\023\022\030\n\024NAME_HEAD_UP_DI"
  "SPLAY\020\024\022\025\n\021NAME_NIGHT_VISION\020\025\022\026\n\022NAME_U"
  "RBAN_DRIVING\020\026\022\032\n\026NAME_HIGHWAY_AUTOPILOT"
  "\020\027\022\027\n\023NAME_CRUISE_CONTROL\020\030\022\034\n\030NAME_SPEE"
  "D_LIMIT_CONTROL\020\031\"\217\001\n\005State\022\021\n\rSTATE_UNK"
  "NOWN\020\000\022\017\n\013STATE_OTHER\020\001\022\021\n\rSTATE_ERRORED"
  "\020\002\022\025\n\021STATE_UNAVAILABLE\020\003\022\023\n\017STATE_AVAIL"
  "ABLE\020\004\022\021\n\rSTATE_STANDBY\020\005\022\020\n\014STATE_ACTIV"
  "E\020\006B\002H\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_osi_5fhostvehicledata_2eproto_deps[2] = {
  &::descriptor_table_osi_5fcommon_2eproto,
  &::descriptor_table_osi_5fversion_2eproto,
};
static ::_pbi::once_flag descriptor_table_osi_5fhostvehicledata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_osi_5fhostvehicledata_2eproto = {
    false, false, 3807, descriptor_table_protodef_osi_5fhostvehicledata_2eproto,
    "osi_hostvehicledata.proto",
    &descriptor_table_osi_5fhostvehicledata_2eproto_once, descriptor_table_osi_5fhostvehicledata_2eproto_deps, 2, 12,
    schemas, file_default_instances, TableStruct_osi_5fhostvehicledata_2eproto::offsets,
    file_level_metadata_osi_5fhostvehicledata_2eproto, file_level_enum_descriptors_osi_5fhostvehicledata_2eproto,
    file_level_service_descriptors_osi_5fhostvehicledata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_osi_5fhostvehicledata_2eproto_getter() {
  return &descriptor_table_osi_5fhostvehicledata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_osi_5fhostvehicledata_2eproto(&descriptor_table_osi_5fhostvehicledata_2eproto);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HostVehicleData_VehicleBasics_OperatingState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fhostvehicledata_2eproto);
  return file_level_enum_descriptors_osi_5fhostvehicledata_2eproto[0];
}
bool HostVehicleData_VehicleBasics_OperatingState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr HostVehicleData_VehicleBasics_OperatingState HostVehicleData_VehicleBasics::OPERATING_STATE_UNKNOWN;
constexpr HostVehicleData_VehicleBasics_OperatingState HostVehicleData_VehicleBasics::OPERATING_STATE_OTHER;
constexpr HostVehicleData_VehicleBasics_OperatingState HostVehicleData_VehicleBasics::OPERATING_STATE_SLEEP;
constexpr HostVehicleData_VehicleBasics_OperatingState HostVehicleData_VehicleBasics::OPERATING_STATE_STANDBY;
constexpr HostVehicleData_VehicleBasics_OperatingState HostVehicleData_VehicleBasics::OPERATING_STATE_BOARDING;
constexpr HostVehicleData_VehicleBasics_OperatingState HostVehicleData_VehicleBasics::OPERATING_STATE_ENTERTAINMENT;
constexpr HostVehicleData_VehicleBasics_OperatingState HostVehicleData_VehicleBasics::OPERATING_STATE_DRIVING;
constexpr HostVehicleData_VehicleBasics_OperatingState HostVehicleData_VehicleBasics::OPERATING_STATE_DIAGNOSTIC;
constexpr HostVehicleData_VehicleBasics_OperatingState HostVehicleData_VehicleBasics::OperatingState_MIN;
constexpr HostVehicleData_VehicleBasics_OperatingState HostVehicleData_VehicleBasics::OperatingState_MAX;
constexpr int HostVehicleData_VehicleBasics::OperatingState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HostVehicleData_VehiclePowertrain_Motor_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fhostvehicledata_2eproto);
  return file_level_enum_descriptors_osi_5fhostvehicledata_2eproto[1];
}
bool HostVehicleData_VehiclePowertrain_Motor_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr HostVehicleData_VehiclePowertrain_Motor_Type HostVehicleData_VehiclePowertrain_Motor::TYPE_UNKNOWN;
constexpr HostVehicleData_VehiclePowertrain_Motor_Type HostVehicleData_VehiclePowertrain_Motor::TYPE_OTHER;
constexpr HostVehicleData_VehiclePowertrain_Motor_Type HostVehicleData_VehiclePowertrain_Motor::TYPE_OTTO;
constexpr HostVehicleData_VehiclePowertrain_Motor_Type HostVehicleData_VehiclePowertrain_Motor::TYPE_DIESEL;
constexpr HostVehicleData_VehiclePowertrain_Motor_Type HostVehicleData_VehiclePowertrain_Motor::TYPE_ELECTRIC;
constexpr HostVehicleData_VehiclePowertrain_Motor_Type HostVehicleData_VehiclePowertrain_Motor::Type_MIN;
constexpr HostVehicleData_VehiclePowertrain_Motor_Type HostVehicleData_VehiclePowertrain_Motor::Type_MAX;
constexpr int HostVehicleData_VehiclePowertrain_Motor::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fhostvehicledata_2eproto);
  return file_level_enum_descriptors_osi_5fhostvehicledata_2eproto[2];
}
bool HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::REASON_BRAKE_PEDAL;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::REASON_STEERING_INPUT;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::Reason_MIN;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::Reason_MAX;
constexpr int HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::Reason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HostVehicleData_VehicleAutomatedDrivingFunction_Name_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fhostvehicledata_2eproto);
  return file_level_enum_descriptors_osi_5fhostvehicledata_2eproto[3];
}
bool HostVehicleData_VehicleAutomatedDrivingFunction_Name_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_UNKNOWN;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_OTHER;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_BLIND_SPOT_WARNING;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_FORWARD_COLLISION_WARNING;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_LANE_DEPARTURE_WARNING;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_PARKING_COLLISION_WARNING;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_REAR_CROSS_TRAFFIC_WARNING;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_AUTOMATIC_EMERGENCY_BRAKING;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_AUTOMATIC_EMERGENCY_STEERING;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_REVERSE_AUTOMATIC_EMERGENCY_BRAKING;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_ADAPTIVE_CRUISE_CONTROL;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_LANE_KEEPING_ASSIST;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_ACTIVE_DRIVING_ASSISTANCE;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_BACKUP_CAMERA;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_SURROUND_VIEW_CAMERA;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_ACTIVE_PARKING_ASSISTANCE;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_REMOTE_PARKING_ASSISTANCE;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_TRAILER_ASSISTANCE;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_AUTOMATIC_HIGH_BEAMS;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_DRIVER_MONITORING;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_HEAD_UP_DISPLAY;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_NIGHT_VISION;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_URBAN_DRIVING;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_HIGHWAY_AUTOPILOT;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_CRUISE_CONTROL;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_SPEED_LIMIT_CONTROL;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::Name_MIN;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::Name_MAX;
constexpr int HostVehicleData_VehicleAutomatedDrivingFunction::Name_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HostVehicleData_VehicleAutomatedDrivingFunction_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fhostvehicledata_2eproto);
  return file_level_enum_descriptors_osi_5fhostvehicledata_2eproto[4];
}
bool HostVehicleData_VehicleAutomatedDrivingFunction_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_State HostVehicleData_VehicleAutomatedDrivingFunction::STATE_UNKNOWN;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_State HostVehicleData_VehicleAutomatedDrivingFunction::STATE_OTHER;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_State HostVehicleData_VehicleAutomatedDrivingFunction::STATE_ERRORED;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_State HostVehicleData_VehicleAutomatedDrivingFunction::STATE_UNAVAILABLE;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_State HostVehicleData_VehicleAutomatedDrivingFunction::STATE_AVAILABLE;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_State HostVehicleData_VehicleAutomatedDrivingFunction::STATE_STANDBY;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_State HostVehicleData_VehicleAutomatedDrivingFunction::STATE_ACTIVE;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_State HostVehicleData_VehicleAutomatedDrivingFunction::State_MIN;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_State HostVehicleData_VehicleAutomatedDrivingFunction::State_MAX;
constexpr int HostVehicleData_VehicleAutomatedDrivingFunction::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class HostVehicleData_VehicleBasics::_Internal {
 public:
  using HasBits = decltype(std::declval<HostVehicleData_VehicleBasics>()._impl_._has_bits_);
  static void set_has_curb_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_operating_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HostVehicleData_VehicleBasics::HostVehicleData_VehicleBasics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.HostVehicleData.VehicleBasics)
}
HostVehicleData_VehicleBasics::HostVehicleData_VehicleBasics(const HostVehicleData_VehicleBasics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HostVehicleData_VehicleBasics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.curb_weight_){}
    , decltype(_impl_.operating_state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.curb_weight_, &from._impl_.curb_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.operating_state_) -
    reinterpret_cast<char*>(&_impl_.curb_weight_)) + sizeof(_impl_.operating_state_));
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData.VehicleBasics)
}

inline void HostVehicleData_VehicleBasics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.curb_weight_){0}
    , decltype(_impl_.operating_state_){0}
  };
}

HostVehicleData_VehicleBasics::~HostVehicleData_VehicleBasics() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData.VehicleBasics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HostVehicleData_VehicleBasics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HostVehicleData_VehicleBasics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HostVehicleData_VehicleBasics::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData.VehicleBasics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.curb_weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.operating_state_) -
        reinterpret_cast<char*>(&_impl_.curb_weight_)) + sizeof(_impl_.operating_state_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostVehicleData_VehicleBasics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double curb_weight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_curb_weight(&has_bits);
          _impl_.curb_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.HostVehicleData.VehicleBasics.OperatingState operating_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::HostVehicleData_VehicleBasics_OperatingState_IsValid(val))) {
            _internal_set_operating_state(static_cast<::osi3::HostVehicleData_VehicleBasics_OperatingState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HostVehicleData_VehicleBasics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData.VehicleBasics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double curb_weight = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_curb_weight(), target);
  }

  // optional .osi3.HostVehicleData.VehicleBasics.OperatingState operating_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_operating_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData.VehicleBasics)
  return target;
}

size_t HostVehicleData_VehicleBasics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData.VehicleBasics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double curb_weight = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .osi3.HostVehicleData.VehicleBasics.OperatingState operating_state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_operating_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostVehicleData_VehicleBasics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HostVehicleData_VehicleBasics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostVehicleData_VehicleBasics::GetClassData() const { return &_class_data_; }


void HostVehicleData_VehicleBasics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HostVehicleData_VehicleBasics*>(&to_msg);
  auto& from = static_cast<const HostVehicleData_VehicleBasics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData.VehicleBasics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.curb_weight_ = from._impl_.curb_weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.operating_state_ = from._impl_.operating_state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostVehicleData_VehicleBasics::CopyFrom(const HostVehicleData_VehicleBasics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData.VehicleBasics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData_VehicleBasics::IsInitialized() const {
  return true;
}

void HostVehicleData_VehicleBasics::InternalSwap(HostVehicleData_VehicleBasics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HostVehicleData_VehicleBasics, _impl_.operating_state_)
      + sizeof(HostVehicleData_VehicleBasics::_impl_.operating_state_)
      - PROTOBUF_FIELD_OFFSET(HostVehicleData_VehicleBasics, _impl_.curb_weight_)>(
          reinterpret_cast<char*>(&_impl_.curb_weight_),
          reinterpret_cast<char*>(&other->_impl_.curb_weight_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData_VehicleBasics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fhostvehicledata_2eproto_getter, &descriptor_table_osi_5fhostvehicledata_2eproto_once,
      file_level_metadata_osi_5fhostvehicledata_2eproto[0]);
}

// ===================================================================

class HostVehicleData_VehiclePowertrain_Motor::_Internal {
 public:
  using HasBits = decltype(std::declval<HostVehicleData_VehiclePowertrain_Motor>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rpm(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_torque(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HostVehicleData_VehiclePowertrain_Motor::HostVehicleData_VehiclePowertrain_Motor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.HostVehicleData.VehiclePowertrain.Motor)
}
HostVehicleData_VehiclePowertrain_Motor::HostVehicleData_VehiclePowertrain_Motor(const HostVehicleData_VehiclePowertrain_Motor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HostVehicleData_VehiclePowertrain_Motor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rpm_){}
    , decltype(_impl_.torque_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.rpm_, &from._impl_.rpm_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.rpm_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData.VehiclePowertrain.Motor)
}

inline void HostVehicleData_VehiclePowertrain_Motor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rpm_){0}
    , decltype(_impl_.torque_){0}
    , decltype(_impl_.type_){0}
  };
}

HostVehicleData_VehiclePowertrain_Motor::~HostVehicleData_VehiclePowertrain_Motor() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData.VehiclePowertrain.Motor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HostVehicleData_VehiclePowertrain_Motor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HostVehicleData_VehiclePowertrain_Motor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HostVehicleData_VehiclePowertrain_Motor::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData.VehiclePowertrain.Motor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.rpm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.rpm_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostVehicleData_VehiclePowertrain_Motor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.HostVehicleData.VehiclePowertrain.Motor.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::HostVehicleData_VehiclePowertrain_Motor_Type_IsValid(val))) {
            _internal_set_type(static_cast<::osi3::HostVehicleData_VehiclePowertrain_Motor_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double rpm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_rpm(&has_bits);
          _impl_.rpm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double torque = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_torque(&has_bits);
          _impl_.torque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HostVehicleData_VehiclePowertrain_Motor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData.VehiclePowertrain.Motor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.HostVehicleData.VehiclePowertrain.Motor.Type type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional double rpm = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_rpm(), target);
  }

  // optional double torque = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_torque(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData.VehiclePowertrain.Motor)
  return target;
}

size_t HostVehicleData_VehiclePowertrain_Motor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData.VehiclePowertrain.Motor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double rpm = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double torque = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .osi3.HostVehicleData.VehiclePowertrain.Motor.Type type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostVehicleData_VehiclePowertrain_Motor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HostVehicleData_VehiclePowertrain_Motor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostVehicleData_VehiclePowertrain_Motor::GetClassData() const { return &_class_data_; }


void HostVehicleData_VehiclePowertrain_Motor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HostVehicleData_VehiclePowertrain_Motor*>(&to_msg);
  auto& from = static_cast<const HostVehicleData_VehiclePowertrain_Motor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData.VehiclePowertrain.Motor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.rpm_ = from._impl_.rpm_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.torque_ = from._impl_.torque_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostVehicleData_VehiclePowertrain_Motor::CopyFrom(const HostVehicleData_VehiclePowertrain_Motor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData.VehiclePowertrain.Motor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData_VehiclePowertrain_Motor::IsInitialized() const {
  return true;
}

void HostVehicleData_VehiclePowertrain_Motor::InternalSwap(HostVehicleData_VehiclePowertrain_Motor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HostVehicleData_VehiclePowertrain_Motor, _impl_.type_)
      + sizeof(HostVehicleData_VehiclePowertrain_Motor::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(HostVehicleData_VehiclePowertrain_Motor, _impl_.rpm_)>(
          reinterpret_cast<char*>(&_impl_.rpm_),
          reinterpret_cast<char*>(&other->_impl_.rpm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData_VehiclePowertrain_Motor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fhostvehicledata_2eproto_getter, &descriptor_table_osi_5fhostvehicledata_2eproto_once,
      file_level_metadata_osi_5fhostvehicledata_2eproto[1]);
}

// ===================================================================

class HostVehicleData_VehiclePowertrain::_Internal {
 public:
  using HasBits = decltype(std::declval<HostVehicleData_VehiclePowertrain>()._impl_._has_bits_);
  static void set_has_pedal_position_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pedal_position_clutch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gear_transmission(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

HostVehicleData_VehiclePowertrain::HostVehicleData_VehiclePowertrain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.HostVehicleData.VehiclePowertrain)
}
HostVehicleData_VehiclePowertrain::HostVehicleData_VehiclePowertrain(const HostVehicleData_VehiclePowertrain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HostVehicleData_VehiclePowertrain* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.motor_){from._impl_.motor_}
    , decltype(_impl_.pedal_position_acceleration_){}
    , decltype(_impl_.pedal_position_clutch_){}
    , decltype(_impl_.gear_transmission_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pedal_position_acceleration_, &from._impl_.pedal_position_acceleration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gear_transmission_) -
    reinterpret_cast<char*>(&_impl_.pedal_position_acceleration_)) + sizeof(_impl_.gear_transmission_));
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData.VehiclePowertrain)
}

inline void HostVehicleData_VehiclePowertrain::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.motor_){arena}
    , decltype(_impl_.pedal_position_acceleration_){0}
    , decltype(_impl_.pedal_position_clutch_){0}
    , decltype(_impl_.gear_transmission_){0}
  };
}

HostVehicleData_VehiclePowertrain::~HostVehicleData_VehiclePowertrain() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData.VehiclePowertrain)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HostVehicleData_VehiclePowertrain::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.motor_.~RepeatedPtrField();
}

void HostVehicleData_VehiclePowertrain::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HostVehicleData_VehiclePowertrain::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData.VehiclePowertrain)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.motor_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.pedal_position_acceleration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gear_transmission_) -
        reinterpret_cast<char*>(&_impl_.pedal_position_acceleration_)) + sizeof(_impl_.gear_transmission_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostVehicleData_VehiclePowertrain::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double pedal_position_acceleration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_pedal_position_acceleration(&has_bits);
          _impl_.pedal_position_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double pedal_position_clutch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_pedal_position_clutch(&has_bits);
          _impl_.pedal_position_clutch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 gear_transmission = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_gear_transmission(&has_bits);
          _impl_.gear_transmission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.HostVehicleData.VehiclePowertrain.Motor motor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_motor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HostVehicleData_VehiclePowertrain::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData.VehiclePowertrain)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double pedal_position_acceleration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_pedal_position_acceleration(), target);
  }

  // optional double pedal_position_clutch = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_pedal_position_clutch(), target);
  }

  // optional int32 gear_transmission = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_gear_transmission(), target);
  }

  // repeated .osi3.HostVehicleData.VehiclePowertrain.Motor motor = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_motor_size()); i < n; i++) {
    const auto& repfield = this->_internal_motor(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData.VehiclePowertrain)
  return target;
}

size_t HostVehicleData_VehiclePowertrain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData.VehiclePowertrain)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.HostVehicleData.VehiclePowertrain.Motor motor = 4;
  total_size += 1UL * this->_internal_motor_size();
  for (const auto& msg : this->_impl_.motor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double pedal_position_acceleration = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double pedal_position_clutch = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 gear_transmission = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gear_transmission());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostVehicleData_VehiclePowertrain::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HostVehicleData_VehiclePowertrain::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostVehicleData_VehiclePowertrain::GetClassData() const { return &_class_data_; }


void HostVehicleData_VehiclePowertrain::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HostVehicleData_VehiclePowertrain*>(&to_msg);
  auto& from = static_cast<const HostVehicleData_VehiclePowertrain&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData.VehiclePowertrain)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.motor_.MergeFrom(from._impl_.motor_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.pedal_position_acceleration_ = from._impl_.pedal_position_acceleration_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.pedal_position_clutch_ = from._impl_.pedal_position_clutch_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.gear_transmission_ = from._impl_.gear_transmission_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostVehicleData_VehiclePowertrain::CopyFrom(const HostVehicleData_VehiclePowertrain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData.VehiclePowertrain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData_VehiclePowertrain::IsInitialized() const {
  return true;
}

void HostVehicleData_VehiclePowertrain::InternalSwap(HostVehicleData_VehiclePowertrain* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.motor_.InternalSwap(&other->_impl_.motor_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HostVehicleData_VehiclePowertrain, _impl_.gear_transmission_)
      + sizeof(HostVehicleData_VehiclePowertrain::_impl_.gear_transmission_)
      - PROTOBUF_FIELD_OFFSET(HostVehicleData_VehiclePowertrain, _impl_.pedal_position_acceleration_)>(
          reinterpret_cast<char*>(&_impl_.pedal_position_acceleration_),
          reinterpret_cast<char*>(&other->_impl_.pedal_position_acceleration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData_VehiclePowertrain::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fhostvehicledata_2eproto_getter, &descriptor_table_osi_5fhostvehicledata_2eproto_once,
      file_level_metadata_osi_5fhostvehicledata_2eproto[2]);
}

// ===================================================================

class HostVehicleData_VehicleBrakeSystem::_Internal {
 public:
  using HasBits = decltype(std::declval<HostVehicleData_VehicleBrakeSystem>()._impl_._has_bits_);
  static void set_has_pedal_position_brake(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HostVehicleData_VehicleBrakeSystem::HostVehicleData_VehicleBrakeSystem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.HostVehicleData.VehicleBrakeSystem)
}
HostVehicleData_VehicleBrakeSystem::HostVehicleData_VehicleBrakeSystem(const HostVehicleData_VehicleBrakeSystem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HostVehicleData_VehicleBrakeSystem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pedal_position_brake_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pedal_position_brake_ = from._impl_.pedal_position_brake_;
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData.VehicleBrakeSystem)
}

inline void HostVehicleData_VehicleBrakeSystem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pedal_position_brake_){0}
  };
}

HostVehicleData_VehicleBrakeSystem::~HostVehicleData_VehicleBrakeSystem() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData.VehicleBrakeSystem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HostVehicleData_VehicleBrakeSystem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HostVehicleData_VehicleBrakeSystem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HostVehicleData_VehicleBrakeSystem::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData.VehicleBrakeSystem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pedal_position_brake_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostVehicleData_VehicleBrakeSystem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double pedal_position_brake = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_pedal_position_brake(&has_bits);
          _impl_.pedal_position_brake_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HostVehicleData_VehicleBrakeSystem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData.VehicleBrakeSystem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double pedal_position_brake = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_pedal_position_brake(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData.VehicleBrakeSystem)
  return target;
}

size_t HostVehicleData_VehicleBrakeSystem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData.VehicleBrakeSystem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double pedal_position_brake = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostVehicleData_VehicleBrakeSystem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HostVehicleData_VehicleBrakeSystem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostVehicleData_VehicleBrakeSystem::GetClassData() const { return &_class_data_; }


void HostVehicleData_VehicleBrakeSystem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HostVehicleData_VehicleBrakeSystem*>(&to_msg);
  auto& from = static_cast<const HostVehicleData_VehicleBrakeSystem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData.VehicleBrakeSystem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pedal_position_brake()) {
    _this->_internal_set_pedal_position_brake(from._internal_pedal_position_brake());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostVehicleData_VehicleBrakeSystem::CopyFrom(const HostVehicleData_VehicleBrakeSystem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData.VehicleBrakeSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData_VehicleBrakeSystem::IsInitialized() const {
  return true;
}

void HostVehicleData_VehicleBrakeSystem::InternalSwap(HostVehicleData_VehicleBrakeSystem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.pedal_position_brake_, other->_impl_.pedal_position_brake_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData_VehicleBrakeSystem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fhostvehicledata_2eproto_getter, &descriptor_table_osi_5fhostvehicledata_2eproto_once,
      file_level_metadata_osi_5fhostvehicledata_2eproto[3]);
}

// ===================================================================

class HostVehicleData_VehicleSteering::_Internal {
 public:
  using HasBits = decltype(std::declval<HostVehicleData_VehicleSteering>()._impl_._has_bits_);
  static const ::osi3::VehicleSteeringWheel& vehicle_steering_wheel(const HostVehicleData_VehicleSteering* msg);
  static void set_has_vehicle_steering_wheel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osi3::VehicleSteeringWheel&
HostVehicleData_VehicleSteering::_Internal::vehicle_steering_wheel(const HostVehicleData_VehicleSteering* msg) {
  return *msg->_impl_.vehicle_steering_wheel_;
}
void HostVehicleData_VehicleSteering::clear_vehicle_steering_wheel() {
  if (_impl_.vehicle_steering_wheel_ != nullptr) _impl_.vehicle_steering_wheel_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
HostVehicleData_VehicleSteering::HostVehicleData_VehicleSteering(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.HostVehicleData.VehicleSteering)
}
HostVehicleData_VehicleSteering::HostVehicleData_VehicleSteering(const HostVehicleData_VehicleSteering& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HostVehicleData_VehicleSteering* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_steering_wheel_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vehicle_steering_wheel()) {
    _this->_impl_.vehicle_steering_wheel_ = new ::osi3::VehicleSteeringWheel(*from._impl_.vehicle_steering_wheel_);
  }
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData.VehicleSteering)
}

inline void HostVehicleData_VehicleSteering::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_steering_wheel_){nullptr}
  };
}

HostVehicleData_VehicleSteering::~HostVehicleData_VehicleSteering() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData.VehicleSteering)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HostVehicleData_VehicleSteering::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.vehicle_steering_wheel_;
}

void HostVehicleData_VehicleSteering::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HostVehicleData_VehicleSteering::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData.VehicleSteering)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.vehicle_steering_wheel_ != nullptr);
    _impl_.vehicle_steering_wheel_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostVehicleData_VehicleSteering::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.VehicleSteeringWheel vehicle_steering_wheel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_steering_wheel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HostVehicleData_VehicleSteering::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData.VehicleSteering)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.VehicleSteeringWheel vehicle_steering_wheel = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::vehicle_steering_wheel(this),
        _Internal::vehicle_steering_wheel(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData.VehicleSteering)
  return target;
}

size_t HostVehicleData_VehicleSteering::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData.VehicleSteering)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .osi3.VehicleSteeringWheel vehicle_steering_wheel = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vehicle_steering_wheel_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostVehicleData_VehicleSteering::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HostVehicleData_VehicleSteering::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostVehicleData_VehicleSteering::GetClassData() const { return &_class_data_; }


void HostVehicleData_VehicleSteering::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HostVehicleData_VehicleSteering*>(&to_msg);
  auto& from = static_cast<const HostVehicleData_VehicleSteering&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData.VehicleSteering)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vehicle_steering_wheel()) {
    _this->_internal_mutable_vehicle_steering_wheel()->::osi3::VehicleSteeringWheel::MergeFrom(
        from._internal_vehicle_steering_wheel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostVehicleData_VehicleSteering::CopyFrom(const HostVehicleData_VehicleSteering& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData.VehicleSteering)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData_VehicleSteering::IsInitialized() const {
  return true;
}

void HostVehicleData_VehicleSteering::InternalSwap(HostVehicleData_VehicleSteering* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.vehicle_steering_wheel_, other->_impl_.vehicle_steering_wheel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData_VehicleSteering::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fhostvehicledata_2eproto_getter, &descriptor_table_osi_5fhostvehicledata_2eproto_once,
      file_level_metadata_osi_5fhostvehicledata_2eproto[4]);
}

// ===================================================================

class HostVehicleData_VehicleWheels_WheelData::_Internal {
 public:
  using HasBits = decltype(std::declval<HostVehicleData_VehicleWheels_WheelData>()._impl_._has_bits_);
  static void set_has_axle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rotation_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_slip(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

HostVehicleData_VehicleWheels_WheelData::HostVehicleData_VehicleWheels_WheelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.HostVehicleData.VehicleWheels.WheelData)
}
HostVehicleData_VehicleWheels_WheelData::HostVehicleData_VehicleWheels_WheelData(const HostVehicleData_VehicleWheels_WheelData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HostVehicleData_VehicleWheels_WheelData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.axle_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.rotation_rate_){}
    , decltype(_impl_.slip_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.axle_, &from._impl_.axle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.slip_) -
    reinterpret_cast<char*>(&_impl_.axle_)) + sizeof(_impl_.slip_));
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData.VehicleWheels.WheelData)
}

inline void HostVehicleData_VehicleWheels_WheelData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.axle_){0u}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.rotation_rate_){0}
    , decltype(_impl_.slip_){0}
  };
}

HostVehicleData_VehicleWheels_WheelData::~HostVehicleData_VehicleWheels_WheelData() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData.VehicleWheels.WheelData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HostVehicleData_VehicleWheels_WheelData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HostVehicleData_VehicleWheels_WheelData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HostVehicleData_VehicleWheels_WheelData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData.VehicleWheels.WheelData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.axle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.slip_) -
        reinterpret_cast<char*>(&_impl_.axle_)) + sizeof(_impl_.slip_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostVehicleData_VehicleWheels_WheelData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 axle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_axle(&has_bits);
          _impl_.axle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double rotation_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_rotation_rate(&has_bits);
          _impl_.rotation_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double slip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_slip(&has_bits);
          _impl_.slip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HostVehicleData_VehicleWheels_WheelData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData.VehicleWheels.WheelData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 axle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_axle(), target);
  }

  // optional uint32 index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  // optional double rotation_rate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_rotation_rate(), target);
  }

  // optional double slip = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_slip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData.VehicleWheels.WheelData)
  return target;
}

size_t HostVehicleData_VehicleWheels_WheelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData.VehicleWheels.WheelData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 axle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_axle());
    }

    // optional uint32 index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
    }

    // optional double rotation_rate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double slip = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostVehicleData_VehicleWheels_WheelData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HostVehicleData_VehicleWheels_WheelData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostVehicleData_VehicleWheels_WheelData::GetClassData() const { return &_class_data_; }


void HostVehicleData_VehicleWheels_WheelData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HostVehicleData_VehicleWheels_WheelData*>(&to_msg);
  auto& from = static_cast<const HostVehicleData_VehicleWheels_WheelData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData.VehicleWheels.WheelData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.axle_ = from._impl_.axle_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.rotation_rate_ = from._impl_.rotation_rate_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.slip_ = from._impl_.slip_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostVehicleData_VehicleWheels_WheelData::CopyFrom(const HostVehicleData_VehicleWheels_WheelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData.VehicleWheels.WheelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData_VehicleWheels_WheelData::IsInitialized() const {
  return true;
}

void HostVehicleData_VehicleWheels_WheelData::InternalSwap(HostVehicleData_VehicleWheels_WheelData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HostVehicleData_VehicleWheels_WheelData, _impl_.slip_)
      + sizeof(HostVehicleData_VehicleWheels_WheelData::_impl_.slip_)
      - PROTOBUF_FIELD_OFFSET(HostVehicleData_VehicleWheels_WheelData, _impl_.axle_)>(
          reinterpret_cast<char*>(&_impl_.axle_),
          reinterpret_cast<char*>(&other->_impl_.axle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData_VehicleWheels_WheelData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fhostvehicledata_2eproto_getter, &descriptor_table_osi_5fhostvehicledata_2eproto_once,
      file_level_metadata_osi_5fhostvehicledata_2eproto[5]);
}

// ===================================================================

class HostVehicleData_VehicleWheels::_Internal {
 public:
};

HostVehicleData_VehicleWheels::HostVehicleData_VehicleWheels(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.HostVehicleData.VehicleWheels)
}
HostVehicleData_VehicleWheels::HostVehicleData_VehicleWheels(const HostVehicleData_VehicleWheels& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HostVehicleData_VehicleWheels* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.wheel_data_){from._impl_.wheel_data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData.VehicleWheels)
}

inline void HostVehicleData_VehicleWheels::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.wheel_data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HostVehicleData_VehicleWheels::~HostVehicleData_VehicleWheels() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData.VehicleWheels)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HostVehicleData_VehicleWheels::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.wheel_data_.~RepeatedPtrField();
}

void HostVehicleData_VehicleWheels::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HostVehicleData_VehicleWheels::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData.VehicleWheels)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.wheel_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostVehicleData_VehicleWheels::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .osi3.HostVehicleData.VehicleWheels.WheelData wheel_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_wheel_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HostVehicleData_VehicleWheels::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData.VehicleWheels)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .osi3.HostVehicleData.VehicleWheels.WheelData wheel_data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_wheel_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_wheel_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData.VehicleWheels)
  return target;
}

size_t HostVehicleData_VehicleWheels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData.VehicleWheels)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.HostVehicleData.VehicleWheels.WheelData wheel_data = 1;
  total_size += 1UL * this->_internal_wheel_data_size();
  for (const auto& msg : this->_impl_.wheel_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostVehicleData_VehicleWheels::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HostVehicleData_VehicleWheels::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostVehicleData_VehicleWheels::GetClassData() const { return &_class_data_; }


void HostVehicleData_VehicleWheels::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HostVehicleData_VehicleWheels*>(&to_msg);
  auto& from = static_cast<const HostVehicleData_VehicleWheels&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData.VehicleWheels)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.wheel_data_.MergeFrom(from._impl_.wheel_data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostVehicleData_VehicleWheels::CopyFrom(const HostVehicleData_VehicleWheels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData.VehicleWheels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData_VehicleWheels::IsInitialized() const {
  return true;
}

void HostVehicleData_VehicleWheels::InternalSwap(HostVehicleData_VehicleWheels* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.wheel_data_.InternalSwap(&other->_impl_.wheel_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData_VehicleWheels::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fhostvehicledata_2eproto_getter, &descriptor_table_osi_5fhostvehicledata_2eproto_once,
      file_level_metadata_osi_5fhostvehicledata_2eproto[6]);
}

// ===================================================================

class HostVehicleData_VehicleLocalization::_Internal {
 public:
  using HasBits = decltype(std::declval<HostVehicleData_VehicleLocalization>()._impl_._has_bits_);
  static const ::osi3::Vector3d& position(const HostVehicleData_VehicleLocalization* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::Orientation3d& orientation(const HostVehicleData_VehicleLocalization* msg);
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::GeodeticPosition& geodetic_position(const HostVehicleData_VehicleLocalization* msg);
  static void set_has_geodetic_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::osi3::Vector3d&
HostVehicleData_VehicleLocalization::_Internal::position(const HostVehicleData_VehicleLocalization* msg) {
  return *msg->_impl_.position_;
}
const ::osi3::Orientation3d&
HostVehicleData_VehicleLocalization::_Internal::orientation(const HostVehicleData_VehicleLocalization* msg) {
  return *msg->_impl_.orientation_;
}
const ::osi3::GeodeticPosition&
HostVehicleData_VehicleLocalization::_Internal::geodetic_position(const HostVehicleData_VehicleLocalization* msg) {
  return *msg->_impl_.geodetic_position_;
}
void HostVehicleData_VehicleLocalization::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void HostVehicleData_VehicleLocalization::clear_orientation() {
  if (_impl_.orientation_ != nullptr) _impl_.orientation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void HostVehicleData_VehicleLocalization::clear_geodetic_position() {
  if (_impl_.geodetic_position_ != nullptr) _impl_.geodetic_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
HostVehicleData_VehicleLocalization::HostVehicleData_VehicleLocalization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.HostVehicleData.VehicleLocalization)
}
HostVehicleData_VehicleLocalization::HostVehicleData_VehicleLocalization(const HostVehicleData_VehicleLocalization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HostVehicleData_VehicleLocalization* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.orientation_){nullptr}
    , decltype(_impl_.geodetic_position_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::osi3::Vector3d(*from._impl_.position_);
  }
  if (from._internal_has_orientation()) {
    _this->_impl_.orientation_ = new ::osi3::Orientation3d(*from._impl_.orientation_);
  }
  if (from._internal_has_geodetic_position()) {
    _this->_impl_.geodetic_position_ = new ::osi3::GeodeticPosition(*from._impl_.geodetic_position_);
  }
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData.VehicleLocalization)
}

inline void HostVehicleData_VehicleLocalization::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.orientation_){nullptr}
    , decltype(_impl_.geodetic_position_){nullptr}
  };
}

HostVehicleData_VehicleLocalization::~HostVehicleData_VehicleLocalization() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData.VehicleLocalization)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HostVehicleData_VehicleLocalization::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.orientation_;
  if (this != internal_default_instance()) delete _impl_.geodetic_position_;
}

void HostVehicleData_VehicleLocalization::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HostVehicleData_VehicleLocalization::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData.VehicleLocalization)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.orientation_ != nullptr);
      _impl_.orientation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.geodetic_position_ != nullptr);
      _impl_.geodetic_position_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostVehicleData_VehicleLocalization::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Vector3d position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Orientation3d orientation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.GeodeticPosition geodetic_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_geodetic_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HostVehicleData_VehicleLocalization::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData.VehicleLocalization)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.Vector3d position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.Orientation3d orientation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::orientation(this),
        _Internal::orientation(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.GeodeticPosition geodetic_position = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::geodetic_position(this),
        _Internal::geodetic_position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData.VehicleLocalization)
  return target;
}

size_t HostVehicleData_VehicleLocalization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData.VehicleLocalization)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .osi3.Vector3d position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // optional .osi3.Orientation3d orientation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.orientation_);
    }

    // optional .osi3.GeodeticPosition geodetic_position = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.geodetic_position_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostVehicleData_VehicleLocalization::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HostVehicleData_VehicleLocalization::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostVehicleData_VehicleLocalization::GetClassData() const { return &_class_data_; }


void HostVehicleData_VehicleLocalization::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HostVehicleData_VehicleLocalization*>(&to_msg);
  auto& from = static_cast<const HostVehicleData_VehicleLocalization&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData.VehicleLocalization)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::osi3::Vector3d::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_orientation()->::osi3::Orientation3d::MergeFrom(
          from._internal_orientation());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_geodetic_position()->::osi3::GeodeticPosition::MergeFrom(
          from._internal_geodetic_position());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostVehicleData_VehicleLocalization::CopyFrom(const HostVehicleData_VehicleLocalization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData.VehicleLocalization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData_VehicleLocalization::IsInitialized() const {
  return true;
}

void HostVehicleData_VehicleLocalization::InternalSwap(HostVehicleData_VehicleLocalization* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HostVehicleData_VehicleLocalization, _impl_.geodetic_position_)
      + sizeof(HostVehicleData_VehicleLocalization::_impl_.geodetic_position_)
      - PROTOBUF_FIELD_OFFSET(HostVehicleData_VehicleLocalization, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData_VehicleLocalization::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fhostvehicledata_2eproto_getter, &descriptor_table_osi_5fhostvehicledata_2eproto_once,
      file_level_metadata_osi_5fhostvehicledata_2eproto[7]);
}

// ===================================================================

class HostVehicleData_VehicleMotion::_Internal {
 public:
  using HasBits = decltype(std::declval<HostVehicleData_VehicleMotion>()._impl_._has_bits_);
  static const ::osi3::Vector3d& position(const HostVehicleData_VehicleMotion* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::Orientation3d& orientation(const HostVehicleData_VehicleMotion* msg);
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::Vector3d& velocity(const HostVehicleData_VehicleMotion* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::osi3::Orientation3d& orientation_rate(const HostVehicleData_VehicleMotion* msg);
  static void set_has_orientation_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::osi3::Vector3d& acceleration(const HostVehicleData_VehicleMotion* msg);
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_current_curvature(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::osi3::Vector3d&
HostVehicleData_VehicleMotion::_Internal::position(const HostVehicleData_VehicleMotion* msg) {
  return *msg->_impl_.position_;
}
const ::osi3::Orientation3d&
HostVehicleData_VehicleMotion::_Internal::orientation(const HostVehicleData_VehicleMotion* msg) {
  return *msg->_impl_.orientation_;
}
const ::osi3::Vector3d&
HostVehicleData_VehicleMotion::_Internal::velocity(const HostVehicleData_VehicleMotion* msg) {
  return *msg->_impl_.velocity_;
}
const ::osi3::Orientation3d&
HostVehicleData_VehicleMotion::_Internal::orientation_rate(const HostVehicleData_VehicleMotion* msg) {
  return *msg->_impl_.orientation_rate_;
}
const ::osi3::Vector3d&
HostVehicleData_VehicleMotion::_Internal::acceleration(const HostVehicleData_VehicleMotion* msg) {
  return *msg->_impl_.acceleration_;
}
void HostVehicleData_VehicleMotion::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void HostVehicleData_VehicleMotion::clear_orientation() {
  if (_impl_.orientation_ != nullptr) _impl_.orientation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void HostVehicleData_VehicleMotion::clear_velocity() {
  if (_impl_.velocity_ != nullptr) _impl_.velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void HostVehicleData_VehicleMotion::clear_orientation_rate() {
  if (_impl_.orientation_rate_ != nullptr) _impl_.orientation_rate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void HostVehicleData_VehicleMotion::clear_acceleration() {
  if (_impl_.acceleration_ != nullptr) _impl_.acceleration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
HostVehicleData_VehicleMotion::HostVehicleData_VehicleMotion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.HostVehicleData.VehicleMotion)
}
HostVehicleData_VehicleMotion::HostVehicleData_VehicleMotion(const HostVehicleData_VehicleMotion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HostVehicleData_VehicleMotion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.orientation_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.orientation_rate_){nullptr}
    , decltype(_impl_.acceleration_){nullptr}
    , decltype(_impl_.current_curvature_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::osi3::Vector3d(*from._impl_.position_);
  }
  if (from._internal_has_orientation()) {
    _this->_impl_.orientation_ = new ::osi3::Orientation3d(*from._impl_.orientation_);
  }
  if (from._internal_has_velocity()) {
    _this->_impl_.velocity_ = new ::osi3::Vector3d(*from._impl_.velocity_);
  }
  if (from._internal_has_orientation_rate()) {
    _this->_impl_.orientation_rate_ = new ::osi3::Orientation3d(*from._impl_.orientation_rate_);
  }
  if (from._internal_has_acceleration()) {
    _this->_impl_.acceleration_ = new ::osi3::Vector3d(*from._impl_.acceleration_);
  }
  _this->_impl_.current_curvature_ = from._impl_.current_curvature_;
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData.VehicleMotion)
}

inline void HostVehicleData_VehicleMotion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.orientation_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.orientation_rate_){nullptr}
    , decltype(_impl_.acceleration_){nullptr}
    , decltype(_impl_.current_curvature_){0}
  };
}

HostVehicleData_VehicleMotion::~HostVehicleData_VehicleMotion() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData.VehicleMotion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HostVehicleData_VehicleMotion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.orientation_;
  if (this != internal_default_instance()) delete _impl_.velocity_;
  if (this != internal_default_instance()) delete _impl_.orientation_rate_;
  if (this != internal_default_instance()) delete _impl_.acceleration_;
}

void HostVehicleData_VehicleMotion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HostVehicleData_VehicleMotion::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData.VehicleMotion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.orientation_ != nullptr);
      _impl_.orientation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.orientation_rate_ != nullptr);
      _impl_.orientation_rate_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.acceleration_ != nullptr);
      _impl_.acceleration_->Clear();
    }
  }
  _impl_.current_curvature_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostVehicleData_VehicleMotion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Vector3d position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Orientation3d orientation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Vector3d velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Orientation3d orientation_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation_rate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Vector3d acceleration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double current_curvature = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_current_curvature(&has_bits);
          _impl_.current_curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HostVehicleData_VehicleMotion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData.VehicleMotion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.Vector3d position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.Orientation3d orientation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::orientation(this),
        _Internal::orientation(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.Vector3d velocity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.Orientation3d orientation_rate = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::orientation_rate(this),
        _Internal::orientation_rate(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.Vector3d acceleration = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::acceleration(this),
        _Internal::acceleration(this).GetCachedSize(), target, stream);
  }

  // optional double current_curvature = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_current_curvature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData.VehicleMotion)
  return target;
}

size_t HostVehicleData_VehicleMotion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData.VehicleMotion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .osi3.Vector3d position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // optional .osi3.Orientation3d orientation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.orientation_);
    }

    // optional .osi3.Vector3d velocity = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.velocity_);
    }

    // optional .osi3.Orientation3d orientation_rate = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.orientation_rate_);
    }

    // optional .osi3.Vector3d acceleration = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.acceleration_);
    }

    // optional double current_curvature = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostVehicleData_VehicleMotion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HostVehicleData_VehicleMotion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostVehicleData_VehicleMotion::GetClassData() const { return &_class_data_; }


void HostVehicleData_VehicleMotion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HostVehicleData_VehicleMotion*>(&to_msg);
  auto& from = static_cast<const HostVehicleData_VehicleMotion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData.VehicleMotion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::osi3::Vector3d::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_orientation()->::osi3::Orientation3d::MergeFrom(
          from._internal_orientation());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_velocity()->::osi3::Vector3d::MergeFrom(
          from._internal_velocity());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_orientation_rate()->::osi3::Orientation3d::MergeFrom(
          from._internal_orientation_rate());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_acceleration()->::osi3::Vector3d::MergeFrom(
          from._internal_acceleration());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.current_curvature_ = from._impl_.current_curvature_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostVehicleData_VehicleMotion::CopyFrom(const HostVehicleData_VehicleMotion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData.VehicleMotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData_VehicleMotion::IsInitialized() const {
  return true;
}

void HostVehicleData_VehicleMotion::InternalSwap(HostVehicleData_VehicleMotion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HostVehicleData_VehicleMotion, _impl_.current_curvature_)
      + sizeof(HostVehicleData_VehicleMotion::_impl_.current_curvature_)
      - PROTOBUF_FIELD_OFFSET(HostVehicleData_VehicleMotion, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData_VehicleMotion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fhostvehicledata_2eproto_getter, &descriptor_table_osi_5fhostvehicledata_2eproto_once,
      file_level_metadata_osi_5fhostvehicledata_2eproto[8]);
}

// ===================================================================

class HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::_Internal {
 public:
  using HasBits = decltype(std::declval<HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride>()._impl_._has_bits_);
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride)
}
HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride(const HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.override_reason_){from._impl_.override_reason_}
    , decltype(_impl_.active_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.active_ = from._impl_.active_;
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride)
}

inline void HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.override_reason_){arena}
    , decltype(_impl_.active_){false}
  };
}

HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::~HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.override_reason_.~RepeatedField();
}

void HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.override_reason_.Clear();
  _impl_.active_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool active = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_active(&has_bits);
          _impl_.active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride.Reason override_reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_IsValid(val))) {
              _internal_add_override_reason(static_cast<::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_override_reason(), ptr, ctx, ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool active = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_active(), target);
  }

  // repeated .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride.Reason override_reason = 2;
  for (int i = 0, n = this->_internal_override_reason_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_override_reason(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride)
  return target;
}

size_t HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride.Reason override_reason = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_override_reason_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_override_reason(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional bool active = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::GetClassData() const { return &_class_data_; }


void HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride*>(&to_msg);
  auto& from = static_cast<const HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.override_reason_.MergeFrom(from._impl_.override_reason_);
  if (from._internal_has_active()) {
    _this->_internal_set_active(from._internal_active());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::CopyFrom(const HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::IsInitialized() const {
  return true;
}

void HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::InternalSwap(HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.override_reason_.InternalSwap(&other->_impl_.override_reason_);
  swap(_impl_.active_, other->_impl_.active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fhostvehicledata_2eproto_getter, &descriptor_table_osi_5fhostvehicledata_2eproto_once,
      file_level_metadata_osi_5fhostvehicledata_2eproto[9]);
}

// ===================================================================

class HostVehicleData_VehicleAutomatedDrivingFunction::_Internal {
 public:
  using HasBits = decltype(std::declval<HostVehicleData_VehicleAutomatedDrivingFunction>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_custom_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_custom_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride& driver_override(const HostVehicleData_VehicleAutomatedDrivingFunction* msg);
  static void set_has_driver_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride&
HostVehicleData_VehicleAutomatedDrivingFunction::_Internal::driver_override(const HostVehicleData_VehicleAutomatedDrivingFunction* msg) {
  return *msg->_impl_.driver_override_;
}
void HostVehicleData_VehicleAutomatedDrivingFunction::clear_custom_detail() {
  _impl_.custom_detail_.Clear();
}
HostVehicleData_VehicleAutomatedDrivingFunction::HostVehicleData_VehicleAutomatedDrivingFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.HostVehicleData.VehicleAutomatedDrivingFunction)
}
HostVehicleData_VehicleAutomatedDrivingFunction::HostVehicleData_VehicleAutomatedDrivingFunction(const HostVehicleData_VehicleAutomatedDrivingFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HostVehicleData_VehicleAutomatedDrivingFunction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_detail_){from._impl_.custom_detail_}
    , decltype(_impl_.custom_name_){}
    , decltype(_impl_.custom_state_){}
    , decltype(_impl_.driver_override_){nullptr}
    , decltype(_impl_.name_){}
    , decltype(_impl_.state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.custom_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_custom_name()) {
    _this->_impl_.custom_name_.Set(from._internal_custom_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.custom_state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_custom_state()) {
    _this->_impl_.custom_state_.Set(from._internal_custom_state(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_driver_override()) {
    _this->_impl_.driver_override_ = new ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride(*from._impl_.driver_override_);
  }
  ::memcpy(&_impl_.name_, &from._impl_.name_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.name_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData.VehicleAutomatedDrivingFunction)
}

inline void HostVehicleData_VehicleAutomatedDrivingFunction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_detail_){arena}
    , decltype(_impl_.custom_name_){}
    , decltype(_impl_.custom_state_){}
    , decltype(_impl_.driver_override_){nullptr}
    , decltype(_impl_.name_){0}
    , decltype(_impl_.state_){0}
  };
  _impl_.custom_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.custom_state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HostVehicleData_VehicleAutomatedDrivingFunction::~HostVehicleData_VehicleAutomatedDrivingFunction() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData.VehicleAutomatedDrivingFunction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HostVehicleData_VehicleAutomatedDrivingFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.custom_detail_.~RepeatedPtrField();
  _impl_.custom_name_.Destroy();
  _impl_.custom_state_.Destroy();
  if (this != internal_default_instance()) delete _impl_.driver_override_;
}

void HostVehicleData_VehicleAutomatedDrivingFunction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HostVehicleData_VehicleAutomatedDrivingFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData.VehicleAutomatedDrivingFunction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.custom_detail_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.custom_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.custom_state_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.driver_override_ != nullptr);
      _impl_.driver_override_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.name_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.state_) -
        reinterpret_cast<char*>(&_impl_.name_)) + sizeof(_impl_.state_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostVehicleData_VehicleAutomatedDrivingFunction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.Name name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_Name_IsValid(val))) {
            _internal_set_name(static_cast<::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_Name>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string custom_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_custom_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "osi3.HostVehicleData.VehicleAutomatedDrivingFunction.custom_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.State state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_State_IsValid(val))) {
            _internal_set_state(static_cast<::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_State>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string custom_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_custom_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "osi3.HostVehicleData.VehicleAutomatedDrivingFunction.custom_state");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride driver_override = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_driver_override(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.KeyValuePair custom_detail = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_detail(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HostVehicleData_VehicleAutomatedDrivingFunction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData.VehicleAutomatedDrivingFunction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.Name name = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_name(), target);
  }

  // optional string custom_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_name().data(), static_cast<int>(this->_internal_custom_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.HostVehicleData.VehicleAutomatedDrivingFunction.custom_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_custom_name(), target);
  }

  // optional .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.State state = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  // optional string custom_state = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_state().data(), static_cast<int>(this->_internal_custom_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.HostVehicleData.VehicleAutomatedDrivingFunction.custom_state");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_custom_state(), target);
  }

  // optional .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride driver_override = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::driver_override(this),
        _Internal::driver_override(this).GetCachedSize(), target, stream);
  }

  // repeated .osi3.KeyValuePair custom_detail = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custom_detail_size()); i < n; i++) {
    const auto& repfield = this->_internal_custom_detail(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData.VehicleAutomatedDrivingFunction)
  return target;
}

size_t HostVehicleData_VehicleAutomatedDrivingFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData.VehicleAutomatedDrivingFunction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.KeyValuePair custom_detail = 6;
  total_size += 1UL * this->_internal_custom_detail_size();
  for (const auto& msg : this->_impl_.custom_detail_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string custom_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_name());
    }

    // optional string custom_state = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_state());
    }

    // optional .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride driver_override = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.driver_override_);
    }

    // optional .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.Name name = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_name());
    }

    // optional .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.State state = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostVehicleData_VehicleAutomatedDrivingFunction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HostVehicleData_VehicleAutomatedDrivingFunction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostVehicleData_VehicleAutomatedDrivingFunction::GetClassData() const { return &_class_data_; }


void HostVehicleData_VehicleAutomatedDrivingFunction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HostVehicleData_VehicleAutomatedDrivingFunction*>(&to_msg);
  auto& from = static_cast<const HostVehicleData_VehicleAutomatedDrivingFunction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData.VehicleAutomatedDrivingFunction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.custom_detail_.MergeFrom(from._impl_.custom_detail_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_custom_name(from._internal_custom_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_custom_state(from._internal_custom_state());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_driver_override()->::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::MergeFrom(
          from._internal_driver_override());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.name_ = from._impl_.name_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostVehicleData_VehicleAutomatedDrivingFunction::CopyFrom(const HostVehicleData_VehicleAutomatedDrivingFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData.VehicleAutomatedDrivingFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData_VehicleAutomatedDrivingFunction::IsInitialized() const {
  return true;
}

void HostVehicleData_VehicleAutomatedDrivingFunction::InternalSwap(HostVehicleData_VehicleAutomatedDrivingFunction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.custom_detail_.InternalSwap(&other->_impl_.custom_detail_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.custom_name_, lhs_arena,
      &other->_impl_.custom_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.custom_state_, lhs_arena,
      &other->_impl_.custom_state_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HostVehicleData_VehicleAutomatedDrivingFunction, _impl_.state_)
      + sizeof(HostVehicleData_VehicleAutomatedDrivingFunction::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(HostVehicleData_VehicleAutomatedDrivingFunction, _impl_.driver_override_)>(
          reinterpret_cast<char*>(&_impl_.driver_override_),
          reinterpret_cast<char*>(&other->_impl_.driver_override_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData_VehicleAutomatedDrivingFunction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fhostvehicledata_2eproto_getter, &descriptor_table_osi_5fhostvehicledata_2eproto_once,
      file_level_metadata_osi_5fhostvehicledata_2eproto[10]);
}

// ===================================================================

class HostVehicleData::_Internal {
 public:
  using HasBits = decltype(std::declval<HostVehicleData>()._impl_._has_bits_);
  static const ::osi3::InterfaceVersion& version(const HostVehicleData* msg);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::osi3::Timestamp& timestamp(const HostVehicleData* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::osi3::Identifier& host_vehicle_id(const HostVehicleData* msg);
  static void set_has_host_vehicle_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::osi3::BaseMoving& location(const HostVehicleData* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::BaseMoving& location_rmse(const HostVehicleData* msg);
  static void set_has_location_rmse(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::HostVehicleData_VehicleBasics& vehicle_basics(const HostVehicleData* msg);
  static void set_has_vehicle_basics(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::osi3::HostVehicleData_VehiclePowertrain& vehicle_powertrain(const HostVehicleData* msg);
  static void set_has_vehicle_powertrain(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::osi3::HostVehicleData_VehicleBrakeSystem& vehicle_brake_system(const HostVehicleData* msg);
  static void set_has_vehicle_brake_system(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::osi3::HostVehicleData_VehicleSteering& vehicle_steering(const HostVehicleData* msg);
  static void set_has_vehicle_steering(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::osi3::HostVehicleData_VehicleWheels& vehicle_wheels(const HostVehicleData* msg);
  static void set_has_vehicle_wheels(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::osi3::HostVehicleData_VehicleLocalization& vehicle_localization(const HostVehicleData* msg);
  static void set_has_vehicle_localization(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::osi3::HostVehicleData_VehicleMotion& vehicle_motion(const HostVehicleData* msg);
  static void set_has_vehicle_motion(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::osi3::InterfaceVersion&
HostVehicleData::_Internal::version(const HostVehicleData* msg) {
  return *msg->_impl_.version_;
}
const ::osi3::Timestamp&
HostVehicleData::_Internal::timestamp(const HostVehicleData* msg) {
  return *msg->_impl_.timestamp_;
}
const ::osi3::Identifier&
HostVehicleData::_Internal::host_vehicle_id(const HostVehicleData* msg) {
  return *msg->_impl_.host_vehicle_id_;
}
const ::osi3::BaseMoving&
HostVehicleData::_Internal::location(const HostVehicleData* msg) {
  return *msg->_impl_.location_;
}
const ::osi3::BaseMoving&
HostVehicleData::_Internal::location_rmse(const HostVehicleData* msg) {
  return *msg->_impl_.location_rmse_;
}
const ::osi3::HostVehicleData_VehicleBasics&
HostVehicleData::_Internal::vehicle_basics(const HostVehicleData* msg) {
  return *msg->_impl_.vehicle_basics_;
}
const ::osi3::HostVehicleData_VehiclePowertrain&
HostVehicleData::_Internal::vehicle_powertrain(const HostVehicleData* msg) {
  return *msg->_impl_.vehicle_powertrain_;
}
const ::osi3::HostVehicleData_VehicleBrakeSystem&
HostVehicleData::_Internal::vehicle_brake_system(const HostVehicleData* msg) {
  return *msg->_impl_.vehicle_brake_system_;
}
const ::osi3::HostVehicleData_VehicleSteering&
HostVehicleData::_Internal::vehicle_steering(const HostVehicleData* msg) {
  return *msg->_impl_.vehicle_steering_;
}
const ::osi3::HostVehicleData_VehicleWheels&
HostVehicleData::_Internal::vehicle_wheels(const HostVehicleData* msg) {
  return *msg->_impl_.vehicle_wheels_;
}
const ::osi3::HostVehicleData_VehicleLocalization&
HostVehicleData::_Internal::vehicle_localization(const HostVehicleData* msg) {
  return *msg->_impl_.vehicle_localization_;
}
const ::osi3::HostVehicleData_VehicleMotion&
HostVehicleData::_Internal::vehicle_motion(const HostVehicleData* msg) {
  return *msg->_impl_.vehicle_motion_;
}
void HostVehicleData::clear_version() {
  if (_impl_.version_ != nullptr) _impl_.version_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void HostVehicleData::clear_timestamp() {
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void HostVehicleData::clear_host_vehicle_id() {
  if (_impl_.host_vehicle_id_ != nullptr) _impl_.host_vehicle_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void HostVehicleData::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void HostVehicleData::clear_location_rmse() {
  if (_impl_.location_rmse_ != nullptr) _impl_.location_rmse_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
HostVehicleData::HostVehicleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.HostVehicleData)
}
HostVehicleData::HostVehicleData(const HostVehicleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HostVehicleData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_automated_driving_function_){from._impl_.vehicle_automated_driving_function_}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.location_rmse_){nullptr}
    , decltype(_impl_.vehicle_basics_){nullptr}
    , decltype(_impl_.vehicle_powertrain_){nullptr}
    , decltype(_impl_.vehicle_brake_system_){nullptr}
    , decltype(_impl_.vehicle_steering_){nullptr}
    , decltype(_impl_.vehicle_wheels_){nullptr}
    , decltype(_impl_.vehicle_localization_){nullptr}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.host_vehicle_id_){nullptr}
    , decltype(_impl_.vehicle_motion_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::osi3::BaseMoving(*from._impl_.location_);
  }
  if (from._internal_has_location_rmse()) {
    _this->_impl_.location_rmse_ = new ::osi3::BaseMoving(*from._impl_.location_rmse_);
  }
  if (from._internal_has_vehicle_basics()) {
    _this->_impl_.vehicle_basics_ = new ::osi3::HostVehicleData_VehicleBasics(*from._impl_.vehicle_basics_);
  }
  if (from._internal_has_vehicle_powertrain()) {
    _this->_impl_.vehicle_powertrain_ = new ::osi3::HostVehicleData_VehiclePowertrain(*from._impl_.vehicle_powertrain_);
  }
  if (from._internal_has_vehicle_brake_system()) {
    _this->_impl_.vehicle_brake_system_ = new ::osi3::HostVehicleData_VehicleBrakeSystem(*from._impl_.vehicle_brake_system_);
  }
  if (from._internal_has_vehicle_steering()) {
    _this->_impl_.vehicle_steering_ = new ::osi3::HostVehicleData_VehicleSteering(*from._impl_.vehicle_steering_);
  }
  if (from._internal_has_vehicle_wheels()) {
    _this->_impl_.vehicle_wheels_ = new ::osi3::HostVehicleData_VehicleWheels(*from._impl_.vehicle_wheels_);
  }
  if (from._internal_has_vehicle_localization()) {
    _this->_impl_.vehicle_localization_ = new ::osi3::HostVehicleData_VehicleLocalization(*from._impl_.vehicle_localization_);
  }
  if (from._internal_has_version()) {
    _this->_impl_.version_ = new ::osi3::InterfaceVersion(*from._impl_.version_);
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::osi3::Timestamp(*from._impl_.timestamp_);
  }
  if (from._internal_has_host_vehicle_id()) {
    _this->_impl_.host_vehicle_id_ = new ::osi3::Identifier(*from._impl_.host_vehicle_id_);
  }
  if (from._internal_has_vehicle_motion()) {
    _this->_impl_.vehicle_motion_ = new ::osi3::HostVehicleData_VehicleMotion(*from._impl_.vehicle_motion_);
  }
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData)
}

inline void HostVehicleData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_automated_driving_function_){arena}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.location_rmse_){nullptr}
    , decltype(_impl_.vehicle_basics_){nullptr}
    , decltype(_impl_.vehicle_powertrain_){nullptr}
    , decltype(_impl_.vehicle_brake_system_){nullptr}
    , decltype(_impl_.vehicle_steering_){nullptr}
    , decltype(_impl_.vehicle_wheels_){nullptr}
    , decltype(_impl_.vehicle_localization_){nullptr}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.host_vehicle_id_){nullptr}
    , decltype(_impl_.vehicle_motion_){nullptr}
  };
}

HostVehicleData::~HostVehicleData() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HostVehicleData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vehicle_automated_driving_function_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.location_;
  if (this != internal_default_instance()) delete _impl_.location_rmse_;
  if (this != internal_default_instance()) delete _impl_.vehicle_basics_;
  if (this != internal_default_instance()) delete _impl_.vehicle_powertrain_;
  if (this != internal_default_instance()) delete _impl_.vehicle_brake_system_;
  if (this != internal_default_instance()) delete _impl_.vehicle_steering_;
  if (this != internal_default_instance()) delete _impl_.vehicle_wheels_;
  if (this != internal_default_instance()) delete _impl_.vehicle_localization_;
  if (this != internal_default_instance()) delete _impl_.version_;
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (this != internal_default_instance()) delete _impl_.host_vehicle_id_;
  if (this != internal_default_instance()) delete _impl_.vehicle_motion_;
}

void HostVehicleData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HostVehicleData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vehicle_automated_driving_function_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.location_rmse_ != nullptr);
      _impl_.location_rmse_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.vehicle_basics_ != nullptr);
      _impl_.vehicle_basics_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.vehicle_powertrain_ != nullptr);
      _impl_.vehicle_powertrain_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.vehicle_brake_system_ != nullptr);
      _impl_.vehicle_brake_system_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.vehicle_steering_ != nullptr);
      _impl_.vehicle_steering_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.vehicle_wheels_ != nullptr);
      _impl_.vehicle_wheels_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.vehicle_localization_ != nullptr);
      _impl_.vehicle_localization_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.version_ != nullptr);
      _impl_.version_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.host_vehicle_id_ != nullptr);
      _impl_.host_vehicle_id_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.vehicle_motion_ != nullptr);
      _impl_.vehicle_motion_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostVehicleData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.BaseMoving location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.BaseMoving location_rmse = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location_rmse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.HostVehicleData.VehicleBasics vehicle_basics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_basics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.HostVehicleData.VehiclePowertrain vehicle_powertrain = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_powertrain(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.HostVehicleData.VehicleBrakeSystem vehicle_brake_system = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_brake_system(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.HostVehicleData.VehicleSteering vehicle_steering = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_steering(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.HostVehicleData.VehicleWheels vehicle_wheels = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_wheels(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.HostVehicleData.VehicleLocalization vehicle_localization = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_localization(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.InterfaceVersion version = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Timestamp timestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Identifier host_vehicle_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_vehicle_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.HostVehicleData.VehicleAutomatedDrivingFunction vehicle_automated_driving_function = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vehicle_automated_driving_function(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.HostVehicleData.VehicleMotion vehicle_motion = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_motion(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HostVehicleData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.BaseMoving location = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.BaseMoving location_rmse = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::location_rmse(this),
        _Internal::location_rmse(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.HostVehicleData.VehicleBasics vehicle_basics = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::vehicle_basics(this),
        _Internal::vehicle_basics(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.HostVehicleData.VehiclePowertrain vehicle_powertrain = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::vehicle_powertrain(this),
        _Internal::vehicle_powertrain(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.HostVehicleData.VehicleBrakeSystem vehicle_brake_system = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::vehicle_brake_system(this),
        _Internal::vehicle_brake_system(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.HostVehicleData.VehicleSteering vehicle_steering = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::vehicle_steering(this),
        _Internal::vehicle_steering(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.HostVehicleData.VehicleWheels vehicle_wheels = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::vehicle_wheels(this),
        _Internal::vehicle_wheels(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.HostVehicleData.VehicleLocalization vehicle_localization = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::vehicle_localization(this),
        _Internal::vehicle_localization(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.InterfaceVersion version = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.Timestamp timestamp = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.Identifier host_vehicle_id = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::host_vehicle_id(this),
        _Internal::host_vehicle_id(this).GetCachedSize(), target, stream);
  }

  // repeated .osi3.HostVehicleData.VehicleAutomatedDrivingFunction vehicle_automated_driving_function = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vehicle_automated_driving_function_size()); i < n; i++) {
    const auto& repfield = this->_internal_vehicle_automated_driving_function(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .osi3.HostVehicleData.VehicleMotion vehicle_motion = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::vehicle_motion(this),
        _Internal::vehicle_motion(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData)
  return target;
}

size_t HostVehicleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.HostVehicleData.VehicleAutomatedDrivingFunction vehicle_automated_driving_function = 12;
  total_size += 1UL * this->_internal_vehicle_automated_driving_function_size();
  for (const auto& msg : this->_impl_.vehicle_automated_driving_function_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .osi3.BaseMoving location = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional .osi3.BaseMoving location_rmse = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_rmse_);
    }

    // optional .osi3.HostVehicleData.VehicleBasics vehicle_basics = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vehicle_basics_);
    }

    // optional .osi3.HostVehicleData.VehiclePowertrain vehicle_powertrain = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vehicle_powertrain_);
    }

    // optional .osi3.HostVehicleData.VehicleBrakeSystem vehicle_brake_system = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vehicle_brake_system_);
    }

    // optional .osi3.HostVehicleData.VehicleSteering vehicle_steering = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vehicle_steering_);
    }

    // optional .osi3.HostVehicleData.VehicleWheels vehicle_wheels = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vehicle_wheels_);
    }

    // optional .osi3.HostVehicleData.VehicleLocalization vehicle_localization = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vehicle_localization_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .osi3.InterfaceVersion version = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.version_);
    }

    // optional .osi3.Timestamp timestamp = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.timestamp_);
    }

    // optional .osi3.Identifier host_vehicle_id = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.host_vehicle_id_);
    }

    // optional .osi3.HostVehicleData.VehicleMotion vehicle_motion = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vehicle_motion_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostVehicleData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HostVehicleData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostVehicleData::GetClassData() const { return &_class_data_; }


void HostVehicleData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HostVehicleData*>(&to_msg);
  auto& from = static_cast<const HostVehicleData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vehicle_automated_driving_function_.MergeFrom(from._impl_.vehicle_automated_driving_function_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::osi3::BaseMoving::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_location_rmse()->::osi3::BaseMoving::MergeFrom(
          from._internal_location_rmse());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_vehicle_basics()->::osi3::HostVehicleData_VehicleBasics::MergeFrom(
          from._internal_vehicle_basics());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_vehicle_powertrain()->::osi3::HostVehicleData_VehiclePowertrain::MergeFrom(
          from._internal_vehicle_powertrain());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_vehicle_brake_system()->::osi3::HostVehicleData_VehicleBrakeSystem::MergeFrom(
          from._internal_vehicle_brake_system());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_vehicle_steering()->::osi3::HostVehicleData_VehicleSteering::MergeFrom(
          from._internal_vehicle_steering());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_vehicle_wheels()->::osi3::HostVehicleData_VehicleWheels::MergeFrom(
          from._internal_vehicle_wheels());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_vehicle_localization()->::osi3::HostVehicleData_VehicleLocalization::MergeFrom(
          from._internal_vehicle_localization());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_version()->::osi3::InterfaceVersion::MergeFrom(
          from._internal_version());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_timestamp()->::osi3::Timestamp::MergeFrom(
          from._internal_timestamp());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_host_vehicle_id()->::osi3::Identifier::MergeFrom(
          from._internal_host_vehicle_id());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_vehicle_motion()->::osi3::HostVehicleData_VehicleMotion::MergeFrom(
          from._internal_vehicle_motion());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostVehicleData::CopyFrom(const HostVehicleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData::IsInitialized() const {
  return true;
}

void HostVehicleData::InternalSwap(HostVehicleData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.vehicle_automated_driving_function_.InternalSwap(&other->_impl_.vehicle_automated_driving_function_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HostVehicleData, _impl_.vehicle_motion_)
      + sizeof(HostVehicleData::_impl_.vehicle_motion_)
      - PROTOBUF_FIELD_OFFSET(HostVehicleData, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fhostvehicledata_2eproto_getter, &descriptor_table_osi_5fhostvehicledata_2eproto_once,
      file_level_metadata_osi_5fhostvehicledata_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData_VehicleBasics*
Arena::CreateMaybeMessage< ::osi3::HostVehicleData_VehicleBasics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::HostVehicleData_VehicleBasics >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData_VehiclePowertrain_Motor*
Arena::CreateMaybeMessage< ::osi3::HostVehicleData_VehiclePowertrain_Motor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::HostVehicleData_VehiclePowertrain_Motor >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData_VehiclePowertrain*
Arena::CreateMaybeMessage< ::osi3::HostVehicleData_VehiclePowertrain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::HostVehicleData_VehiclePowertrain >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData_VehicleBrakeSystem*
Arena::CreateMaybeMessage< ::osi3::HostVehicleData_VehicleBrakeSystem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::HostVehicleData_VehicleBrakeSystem >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData_VehicleSteering*
Arena::CreateMaybeMessage< ::osi3::HostVehicleData_VehicleSteering >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::HostVehicleData_VehicleSteering >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData_VehicleWheels_WheelData*
Arena::CreateMaybeMessage< ::osi3::HostVehicleData_VehicleWheels_WheelData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::HostVehicleData_VehicleWheels_WheelData >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData_VehicleWheels*
Arena::CreateMaybeMessage< ::osi3::HostVehicleData_VehicleWheels >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::HostVehicleData_VehicleWheels >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData_VehicleLocalization*
Arena::CreateMaybeMessage< ::osi3::HostVehicleData_VehicleLocalization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::HostVehicleData_VehicleLocalization >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData_VehicleMotion*
Arena::CreateMaybeMessage< ::osi3::HostVehicleData_VehicleMotion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::HostVehicleData_VehicleMotion >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride*
Arena::CreateMaybeMessage< ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction*
Arena::CreateMaybeMessage< ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData*
Arena::CreateMaybeMessage< ::osi3::HostVehicleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::HostVehicleData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

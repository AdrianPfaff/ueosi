// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_trafficlight.proto

#include "osi_trafficlight.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace osi3 {
PROTOBUF_CONSTEXPR TrafficLight_Classification::TrafficLight_Classification(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.assigned_lane_id_)*/{}
  , /*decltype(_impl_.logical_lane_assignment_)*/{}
  , /*decltype(_impl_.color_)*/0
  , /*decltype(_impl_.icon_)*/0
  , /*decltype(_impl_.counter_)*/0
  , /*decltype(_impl_.mode_)*/0
  , /*decltype(_impl_.is_out_of_service_)*/false} {}
struct TrafficLight_ClassificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficLight_ClassificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficLight_ClassificationDefaultTypeInternal() {}
  union {
    TrafficLight_Classification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficLight_ClassificationDefaultTypeInternal _TrafficLight_Classification_default_instance_;
PROTOBUF_CONSTEXPR TrafficLight::TrafficLight(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.source_reference_)*/{}
  , /*decltype(_impl_.model_reference_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.classification_)*/nullptr
  , /*decltype(_impl_.color_description_)*/nullptr} {}
struct TrafficLightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficLightDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficLightDefaultTypeInternal() {}
  union {
    TrafficLight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficLightDefaultTypeInternal _TrafficLight_default_instance_;
}  // namespace osi3
static ::_pb::Metadata file_level_metadata_osi_5ftrafficlight_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_osi_5ftrafficlight_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_osi_5ftrafficlight_2eproto = nullptr;

const uint32_t TableStruct_osi_5ftrafficlight_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight_Classification, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight_Classification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight_Classification, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight_Classification, _impl_.icon_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight_Classification, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight_Classification, _impl_.counter_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight_Classification, _impl_.assigned_lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight_Classification, _impl_.is_out_of_service_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight_Classification, _impl_.logical_lane_assignment_),
  0,
  1,
  3,
  2,
  ~0u,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight, _impl_.classification_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight, _impl_.model_reference_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight, _impl_.source_reference_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight, _impl_.color_description_),
  1,
  2,
  3,
  0,
  ~0u,
  4,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, -1, sizeof(::osi3::TrafficLight_Classification)},
  { 20, 32, -1, sizeof(::osi3::TrafficLight)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::osi3::_TrafficLight_Classification_default_instance_._instance,
  &::osi3::_TrafficLight_default_instance_._instance,
};

const char descriptor_table_protodef_osi_5ftrafficlight_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026osi_trafficlight.proto\022\004osi3\032\020osi_comm"
  "on.proto\"\234\013\n\014TrafficLight\022\034\n\002id\030\001 \001(\0132\020."
  "osi3.Identifier\022\"\n\004base\030\002 \001(\0132\024.osi3.Bas"
  "eStationary\0229\n\016classification\030\003 \001(\0132!.os"
  "i3.TrafficLight.Classification\022\027\n\017model_"
  "reference\030\004 \001(\t\0221\n\020source_reference\030\005 \003("
  "\0132\027.osi3.ExternalReference\0221\n\021color_desc"
  "ription\030\006 \001(\0132\026.osi3.ColorDescription\032\217\t"
  "\n\016Classification\0226\n\005color\030\001 \001(\0162\'.osi3.T"
  "rafficLight.Classification.Color\0224\n\004icon"
  "\030\002 \001(\0162&.osi3.TrafficLight.Classificatio"
  "n.Icon\0224\n\004mode\030\003 \001(\0162&.osi3.TrafficLight"
  ".Classification.Mode\022\017\n\007counter\030\004 \001(\001\022*\n"
  "\020assigned_lane_id\030\005 \003(\0132\020.osi3.Identifie"
  "r\022\031\n\021is_out_of_service\030\006 \001(\010\022<\n\027logical_"
  "lane_assignment\030\007 \003(\0132\033.osi3.LogicalLane"
  "Assignment\"~\n\005Color\022\021\n\rCOLOR_UNKNOWN\020\000\022\017"
  "\n\013COLOR_OTHER\020\001\022\r\n\tCOLOR_RED\020\002\022\020\n\014COLOR_"
  "YELLOW\020\003\022\017\n\013COLOR_GREEN\020\004\022\016\n\nCOLOR_BLUE\020"
  "\005\022\017\n\013COLOR_WHITE\020\006\"\321\004\n\004Icon\022\020\n\014ICON_UNKN"
  "OWN\020\000\022\016\n\nICON_OTHER\020\001\022\r\n\tICON_NONE\020\002\022\035\n\031"
  "ICON_ARROW_STRAIGHT_AHEAD\020\003\022\023\n\017ICON_ARRO"
  "W_LEFT\020\004\022\030\n\024ICON_ARROW_DIAG_LEFT\020\005\022\"\n\036IC"
  "ON_ARROW_STRAIGHT_AHEAD_LEFT\020\006\022\024\n\020ICON_A"
  "RROW_RIGHT\020\007\022\031\n\025ICON_ARROW_DIAG_RIGHT\020\010\022"
  "#\n\037ICON_ARROW_STRAIGHT_AHEAD_RIGHT\020\t\022\031\n\025"
  "ICON_ARROW_LEFT_RIGHT\020\n\022\023\n\017ICON_ARROW_DO"
  "WN\020\013\022\030\n\024ICON_ARROW_DOWN_LEFT\020\014\022\031\n\025ICON_A"
  "RROW_DOWN_RIGHT\020\r\022\024\n\020ICON_ARROW_CROSS\020\016\022"
  "\023\n\017ICON_PEDESTRIAN\020\017\022\r\n\tICON_WALK\020\020\022\022\n\016I"
  "CON_DONT_WALK\020\021\022\020\n\014ICON_BICYCLE\020\022\022\037\n\033ICO"
  "N_PEDESTRIAN_AND_BICYCLE\020\023\022\032\n\026ICON_COUNT"
  "DOWN_SECONDS\020\024\022\032\n\026ICON_COUNTDOWN_PERCENT"
  "\020\025\022\r\n\tICON_TRAM\020\026\022\014\n\010ICON_BUS\020\027\022\025\n\021ICON_"
  "BUS_AND_TRAM\020\030\"o\n\004Mode\022\020\n\014MODE_UNKNOWN\020\000"
  "\022\016\n\nMODE_OTHER\020\001\022\014\n\010MODE_OFF\020\002\022\021\n\rMODE_C"
  "ONSTANT\020\003\022\021\n\rMODE_FLASHING\020\004\022\021\n\rMODE_COU"
  "NTING\020\005B\002H\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_osi_5ftrafficlight_2eproto_deps[1] = {
  &::descriptor_table_osi_5fcommon_2eproto,
};
static ::_pbi::once_flag descriptor_table_osi_5ftrafficlight_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_osi_5ftrafficlight_2eproto = {
    false, false, 1491, descriptor_table_protodef_osi_5ftrafficlight_2eproto,
    "osi_trafficlight.proto",
    &descriptor_table_osi_5ftrafficlight_2eproto_once, descriptor_table_osi_5ftrafficlight_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_osi_5ftrafficlight_2eproto::offsets,
    file_level_metadata_osi_5ftrafficlight_2eproto, file_level_enum_descriptors_osi_5ftrafficlight_2eproto,
    file_level_service_descriptors_osi_5ftrafficlight_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_osi_5ftrafficlight_2eproto_getter() {
  return &descriptor_table_osi_5ftrafficlight_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_osi_5ftrafficlight_2eproto(&descriptor_table_osi_5ftrafficlight_2eproto);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficLight_Classification_Color_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficlight_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficlight_2eproto[0];
}
bool TrafficLight_Classification_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TrafficLight_Classification_Color TrafficLight_Classification::COLOR_UNKNOWN;
constexpr TrafficLight_Classification_Color TrafficLight_Classification::COLOR_OTHER;
constexpr TrafficLight_Classification_Color TrafficLight_Classification::COLOR_RED;
constexpr TrafficLight_Classification_Color TrafficLight_Classification::COLOR_YELLOW;
constexpr TrafficLight_Classification_Color TrafficLight_Classification::COLOR_GREEN;
constexpr TrafficLight_Classification_Color TrafficLight_Classification::COLOR_BLUE;
constexpr TrafficLight_Classification_Color TrafficLight_Classification::COLOR_WHITE;
constexpr TrafficLight_Classification_Color TrafficLight_Classification::Color_MIN;
constexpr TrafficLight_Classification_Color TrafficLight_Classification::Color_MAX;
constexpr int TrafficLight_Classification::Color_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficLight_Classification_Icon_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficlight_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficlight_2eproto[1];
}
bool TrafficLight_Classification_Icon_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_UNKNOWN;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_OTHER;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_NONE;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_STRAIGHT_AHEAD;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_LEFT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_DIAG_LEFT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_STRAIGHT_AHEAD_LEFT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_RIGHT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_DIAG_RIGHT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_STRAIGHT_AHEAD_RIGHT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_LEFT_RIGHT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_DOWN;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_DOWN_LEFT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_DOWN_RIGHT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_CROSS;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_PEDESTRIAN;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_WALK;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_DONT_WALK;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_BICYCLE;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_PEDESTRIAN_AND_BICYCLE;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_COUNTDOWN_SECONDS;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_COUNTDOWN_PERCENT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_TRAM;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_BUS;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_BUS_AND_TRAM;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::Icon_MIN;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::Icon_MAX;
constexpr int TrafficLight_Classification::Icon_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficLight_Classification_Mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficlight_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficlight_2eproto[2];
}
bool TrafficLight_Classification_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TrafficLight_Classification_Mode TrafficLight_Classification::MODE_UNKNOWN;
constexpr TrafficLight_Classification_Mode TrafficLight_Classification::MODE_OTHER;
constexpr TrafficLight_Classification_Mode TrafficLight_Classification::MODE_OFF;
constexpr TrafficLight_Classification_Mode TrafficLight_Classification::MODE_CONSTANT;
constexpr TrafficLight_Classification_Mode TrafficLight_Classification::MODE_FLASHING;
constexpr TrafficLight_Classification_Mode TrafficLight_Classification::MODE_COUNTING;
constexpr TrafficLight_Classification_Mode TrafficLight_Classification::Mode_MIN;
constexpr TrafficLight_Classification_Mode TrafficLight_Classification::Mode_MAX;
constexpr int TrafficLight_Classification::Mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class TrafficLight_Classification::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficLight_Classification>()._impl_._has_bits_);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_out_of_service(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

void TrafficLight_Classification::clear_assigned_lane_id() {
  _impl_.assigned_lane_id_.Clear();
}
void TrafficLight_Classification::clear_logical_lane_assignment() {
  _impl_.logical_lane_assignment_.Clear();
}
TrafficLight_Classification::TrafficLight_Classification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficLight.Classification)
}
TrafficLight_Classification::TrafficLight_Classification(const TrafficLight_Classification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrafficLight_Classification* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.assigned_lane_id_){from._impl_.assigned_lane_id_}
    , decltype(_impl_.logical_lane_assignment_){from._impl_.logical_lane_assignment_}
    , decltype(_impl_.color_){}
    , decltype(_impl_.icon_){}
    , decltype(_impl_.counter_){}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.is_out_of_service_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.color_, &from._impl_.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_out_of_service_) -
    reinterpret_cast<char*>(&_impl_.color_)) + sizeof(_impl_.is_out_of_service_));
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficLight.Classification)
}

inline void TrafficLight_Classification::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.assigned_lane_id_){arena}
    , decltype(_impl_.logical_lane_assignment_){arena}
    , decltype(_impl_.color_){0}
    , decltype(_impl_.icon_){0}
    , decltype(_impl_.counter_){0}
    , decltype(_impl_.mode_){0}
    , decltype(_impl_.is_out_of_service_){false}
  };
}

TrafficLight_Classification::~TrafficLight_Classification() {
  // @@protoc_insertion_point(destructor:osi3.TrafficLight.Classification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrafficLight_Classification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.assigned_lane_id_.~RepeatedPtrField();
  _impl_.logical_lane_assignment_.~RepeatedPtrField();
}

void TrafficLight_Classification::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrafficLight_Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficLight.Classification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.assigned_lane_id_.Clear();
  _impl_.logical_lane_assignment_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_out_of_service_) -
        reinterpret_cast<char*>(&_impl_.color_)) + sizeof(_impl_.is_out_of_service_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficLight_Classification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.TrafficLight.Classification.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::TrafficLight_Classification_Color_IsValid(val))) {
            _internal_set_color(static_cast<::osi3::TrafficLight_Classification_Color>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficLight.Classification.Icon icon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::TrafficLight_Classification_Icon_IsValid(val))) {
            _internal_set_icon(static_cast<::osi3::TrafficLight_Classification_Icon>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficLight.Classification.Mode mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::TrafficLight_Classification_Mode_IsValid(val))) {
            _internal_set_mode(static_cast<::osi3::TrafficLight_Classification_Mode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double counter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_counter(&has_bits);
          _impl_.counter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Identifier assigned_lane_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assigned_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_out_of_service = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_out_of_service(&has_bits);
          _impl_.is_out_of_service_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logical_lane_assignment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficLight_Classification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficLight.Classification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.TrafficLight.Classification.Color color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_color(), target);
  }

  // optional .osi3.TrafficLight.Classification.Icon icon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_icon(), target);
  }

  // optional .osi3.TrafficLight.Classification.Mode mode = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mode(), target);
  }

  // optional double counter = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_counter(), target);
  }

  // repeated .osi3.Identifier assigned_lane_id = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_assigned_lane_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_assigned_lane_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool is_out_of_service = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_out_of_service(), target);
  }

  // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_logical_lane_assignment_size()); i < n; i++) {
    const auto& repfield = this->_internal_logical_lane_assignment(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficLight.Classification)
  return target;
}

size_t TrafficLight_Classification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficLight.Classification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Identifier assigned_lane_id = 5;
  total_size += 1UL * this->_internal_assigned_lane_id_size();
  for (const auto& msg : this->_impl_.assigned_lane_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 7;
  total_size += 1UL * this->_internal_logical_lane_assignment_size();
  for (const auto& msg : this->_impl_.logical_lane_assignment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .osi3.TrafficLight.Classification.Color color = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_color());
    }

    // optional .osi3.TrafficLight.Classification.Icon icon = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_icon());
    }

    // optional double counter = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .osi3.TrafficLight.Classification.Mode mode = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
    }

    // optional bool is_out_of_service = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficLight_Classification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrafficLight_Classification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficLight_Classification::GetClassData() const { return &_class_data_; }


void TrafficLight_Classification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrafficLight_Classification*>(&to_msg);
  auto& from = static_cast<const TrafficLight_Classification&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficLight.Classification)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.assigned_lane_id_.MergeFrom(from._impl_.assigned_lane_id_);
  _this->_impl_.logical_lane_assignment_.MergeFrom(from._impl_.logical_lane_assignment_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.color_ = from._impl_.color_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.icon_ = from._impl_.icon_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.counter_ = from._impl_.counter_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mode_ = from._impl_.mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_out_of_service_ = from._impl_.is_out_of_service_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficLight_Classification::CopyFrom(const TrafficLight_Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficLight.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight_Classification::IsInitialized() const {
  return true;
}

void TrafficLight_Classification::InternalSwap(TrafficLight_Classification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.assigned_lane_id_.InternalSwap(&other->_impl_.assigned_lane_id_);
  _impl_.logical_lane_assignment_.InternalSwap(&other->_impl_.logical_lane_assignment_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficLight_Classification, _impl_.is_out_of_service_)
      + sizeof(TrafficLight_Classification::_impl_.is_out_of_service_)
      - PROTOBUF_FIELD_OFFSET(TrafficLight_Classification, _impl_.color_)>(
          reinterpret_cast<char*>(&_impl_.color_),
          reinterpret_cast<char*>(&other->_impl_.color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLight_Classification::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5ftrafficlight_2eproto_getter, &descriptor_table_osi_5ftrafficlight_2eproto_once,
      file_level_metadata_osi_5ftrafficlight_2eproto[0]);
}

// ===================================================================

class TrafficLight::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficLight>()._impl_._has_bits_);
  static const ::osi3::Identifier& id(const TrafficLight* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::BaseStationary& base(const TrafficLight* msg);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::osi3::TrafficLight_Classification& classification(const TrafficLight* msg);
  static void set_has_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_model_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::ColorDescription& color_description(const TrafficLight* msg);
  static void set_has_color_description(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::osi3::Identifier&
TrafficLight::_Internal::id(const TrafficLight* msg) {
  return *msg->_impl_.id_;
}
const ::osi3::BaseStationary&
TrafficLight::_Internal::base(const TrafficLight* msg) {
  return *msg->_impl_.base_;
}
const ::osi3::TrafficLight_Classification&
TrafficLight::_Internal::classification(const TrafficLight* msg) {
  return *msg->_impl_.classification_;
}
const ::osi3::ColorDescription&
TrafficLight::_Internal::color_description(const TrafficLight* msg) {
  return *msg->_impl_.color_description_;
}
void TrafficLight::clear_id() {
  if (_impl_.id_ != nullptr) _impl_.id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void TrafficLight::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void TrafficLight::clear_source_reference() {
  _impl_.source_reference_.Clear();
}
void TrafficLight::clear_color_description() {
  if (_impl_.color_description_ != nullptr) _impl_.color_description_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
TrafficLight::TrafficLight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.TrafficLight)
}
TrafficLight::TrafficLight(const TrafficLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrafficLight* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_reference_){from._impl_.source_reference_}
    , decltype(_impl_.model_reference_){}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.classification_){nullptr}
    , decltype(_impl_.color_description_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_reference_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_reference_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_model_reference()) {
    _this->_impl_.model_reference_.Set(from._internal_model_reference(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    _this->_impl_.id_ = new ::osi3::Identifier(*from._impl_.id_);
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::osi3::BaseStationary(*from._impl_.base_);
  }
  if (from._internal_has_classification()) {
    _this->_impl_.classification_ = new ::osi3::TrafficLight_Classification(*from._impl_.classification_);
  }
  if (from._internal_has_color_description()) {
    _this->_impl_.color_description_ = new ::osi3::ColorDescription(*from._impl_.color_description_);
  }
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficLight)
}

inline void TrafficLight::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_reference_){arena}
    , decltype(_impl_.model_reference_){}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.classification_){nullptr}
    , decltype(_impl_.color_description_){nullptr}
  };
  _impl_.model_reference_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_reference_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:osi3.TrafficLight)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrafficLight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.source_reference_.~RepeatedPtrField();
  _impl_.model_reference_.Destroy();
  if (this != internal_default_instance()) delete _impl_.id_;
  if (this != internal_default_instance()) delete _impl_.base_;
  if (this != internal_default_instance()) delete _impl_.classification_;
  if (this != internal_default_instance()) delete _impl_.color_description_;
}

void TrafficLight::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficLight)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.source_reference_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.model_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.id_ != nullptr);
      _impl_.id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.base_ != nullptr);
      _impl_.base_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.classification_ != nullptr);
      _impl_.classification_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.color_description_ != nullptr);
      _impl_.color_description_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficLight::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Identifier id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.BaseStationary base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficLight.Classification classification = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_classification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string model_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_model_reference();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "osi3.TrafficLight.model_reference");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.ExternalReference source_reference = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_source_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.ColorDescription color_description = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_color_description(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficLight::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficLight)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.Identifier id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.BaseStationary base = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.TrafficLight.Classification classification = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::classification(this),
        _Internal::classification(this).GetCachedSize(), target, stream);
  }

  // optional string model_reference = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model_reference().data(), static_cast<int>(this->_internal_model_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.TrafficLight.model_reference");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_model_reference(), target);
  }

  // repeated .osi3.ExternalReference source_reference = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_source_reference_size()); i < n; i++) {
    const auto& repfield = this->_internal_source_reference(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .osi3.ColorDescription color_description = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::color_description(this),
        _Internal::color_description(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficLight)
  return target;
}

size_t TrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficLight)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.ExternalReference source_reference = 5;
  total_size += 1UL * this->_internal_source_reference_size();
  for (const auto& msg : this->_impl_.source_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string model_reference = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_model_reference());
    }

    // optional .osi3.Identifier id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.id_);
    }

    // optional .osi3.BaseStationary base = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.base_);
    }

    // optional .osi3.TrafficLight.Classification classification = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.classification_);
    }

    // optional .osi3.ColorDescription color_description = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.color_description_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficLight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrafficLight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficLight::GetClassData() const { return &_class_data_; }


void TrafficLight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrafficLight*>(&to_msg);
  auto& from = static_cast<const TrafficLight&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficLight)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.source_reference_.MergeFrom(from._impl_.source_reference_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_model_reference(from._internal_model_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_id()->::osi3::Identifier::MergeFrom(
          from._internal_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_base()->::osi3::BaseStationary::MergeFrom(
          from._internal_base());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_classification()->::osi3::TrafficLight_Classification::MergeFrom(
          from._internal_classification());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_color_description()->::osi3::ColorDescription::MergeFrom(
          from._internal_color_description());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight::IsInitialized() const {
  return true;
}

void TrafficLight::InternalSwap(TrafficLight* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.source_reference_.InternalSwap(&other->_impl_.source_reference_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_reference_, lhs_arena,
      &other->_impl_.model_reference_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficLight, _impl_.color_description_)
      + sizeof(TrafficLight::_impl_.color_description_)
      - PROTOBUF_FIELD_OFFSET(TrafficLight, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLight::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5ftrafficlight_2eproto_getter, &descriptor_table_osi_5ftrafficlight_2eproto_once,
      file_level_metadata_osi_5ftrafficlight_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::TrafficLight_Classification*
Arena::CreateMaybeMessage< ::osi3::TrafficLight_Classification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficLight_Classification >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficLight*
Arena::CreateMaybeMessage< ::osi3::TrafficLight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::TrafficLight >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

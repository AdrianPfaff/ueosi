// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_logicaldetectiondata.proto

#include "osi_logicaldetectiondata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace osi3 {
PROTOBUF_CONSTEXPR LogicalDetectionData::LogicalDetectionData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.logical_detection_)*/{}
  , /*decltype(_impl_.version_)*/nullptr
  , /*decltype(_impl_.header_)*/nullptr} {}
struct LogicalDetectionDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogicalDetectionDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogicalDetectionDataDefaultTypeInternal() {}
  union {
    LogicalDetectionData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogicalDetectionDataDefaultTypeInternal _LogicalDetectionData_default_instance_;
PROTOBUF_CONSTEXPR LogicalDetectionDataHeader::LogicalDetectionDataHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sensor_id_)*/{}
  , /*decltype(_impl_.logical_detection_time_)*/nullptr
  , /*decltype(_impl_.data_qualifier_)*/0
  , /*decltype(_impl_.number_of_valid_logical_detections_)*/0u} {}
struct LogicalDetectionDataHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogicalDetectionDataHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogicalDetectionDataHeaderDefaultTypeInternal() {}
  union {
    LogicalDetectionDataHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogicalDetectionDataHeaderDefaultTypeInternal _LogicalDetectionDataHeader_default_instance_;
PROTOBUF_CONSTEXPR LogicalDetection::LogicalDetection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sensor_id_)*/{}
  , /*decltype(_impl_.object_id_)*/nullptr
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.position_rmse_)*/nullptr
  , /*decltype(_impl_.velocity_)*/nullptr
  , /*decltype(_impl_.velocity_rmse_)*/nullptr
  , /*decltype(_impl_.existence_probability_)*/0
  , /*decltype(_impl_.intensity_)*/0
  , /*decltype(_impl_.snr_)*/0
  , /*decltype(_impl_.point_target_probability_)*/0
  , /*decltype(_impl_.echo_pulse_width_)*/0
  , /*decltype(_impl_.classification_)*/0} {}
struct LogicalDetectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogicalDetectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogicalDetectionDefaultTypeInternal() {}
  union {
    LogicalDetection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogicalDetectionDefaultTypeInternal _LogicalDetection_default_instance_;
}  // namespace osi3
static ::_pb::Metadata file_level_metadata_osi_5flogicaldetectiondata_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_osi_5flogicaldetectiondata_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_osi_5flogicaldetectiondata_2eproto = nullptr;

const uint32_t TableStruct_osi_5flogicaldetectiondata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionData, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionData, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionData, _impl_.logical_detection_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionDataHeader, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionDataHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionDataHeader, _impl_.logical_detection_time_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionDataHeader, _impl_.data_qualifier_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionDataHeader, _impl_.number_of_valid_logical_detections_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionDataHeader, _impl_.sensor_id_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, _impl_.existence_probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, _impl_.position_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, _impl_.velocity_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, _impl_.velocity_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, _impl_.intensity_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, _impl_.snr_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, _impl_.point_target_probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, _impl_.sensor_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, _impl_.classification_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, _impl_.echo_pulse_width_),
  5,
  0,
  1,
  2,
  3,
  4,
  6,
  7,
  8,
  ~0u,
  10,
  9,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::osi3::LogicalDetectionData)},
  { 12, 22, -1, sizeof(::osi3::LogicalDetectionDataHeader)},
  { 26, 44, -1, sizeof(::osi3::LogicalDetection)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::osi3::_LogicalDetectionData_default_instance_._instance,
  &::osi3::_LogicalDetectionDataHeader_default_instance_._instance,
  &::osi3::_LogicalDetection_default_instance_._instance,
};

const char descriptor_table_protodef_osi_5flogicaldetectiondata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036osi_logicaldetectiondata.proto\022\004osi3\032\021"
  "osi_version.proto\032\020osi_common.proto\"\244\001\n\024"
  "LogicalDetectionData\022\'\n\007version\030\001 \001(\0132\026."
  "osi3.InterfaceVersion\0220\n\006header\030\002 \001(\0132 ."
  "osi3.LogicalDetectionDataHeader\0221\n\021logic"
  "al_detection\030\003 \003(\0132\026.osi3.LogicalDetecti"
  "on\"\366\003\n\032LogicalDetectionDataHeader\022/\n\026log"
  "ical_detection_time\030\001 \001(\0132\017.osi3.Timesta"
  "mp\022F\n\016data_qualifier\030\002 \001(\0162..osi3.Logica"
  "lDetectionDataHeader.DataQualifier\022*\n\"nu"
  "mber_of_valid_logical_detections\030\003 \001(\r\022#"
  "\n\tsensor_id\030\004 \003(\0132\020.osi3.Identifier\"\215\002\n\r"
  "DataQualifier\022\032\n\026DATA_QUALIFIER_UNKNOWN\020"
  "\000\022\030\n\024DATA_QUALIFIER_OTHER\020\001\022\034\n\030DATA_QUAL"
  "IFIER_AVAILABLE\020\002\022$\n DATA_QUALIFIER_AVAI"
  "LABLE_REDUCED\020\003\022 \n\034DATA_QUALIFIER_NOT_AV"
  "AILABLE\020\004\022\034\n\030DATA_QUALIFIER_BLINDNESS\020\005\022"
  "&\n\"DATA_QUALIFIER_TEMPORARY_AVAILABLE\020\006\022"
  "\032\n\026DATA_QUALIFIER_INVALID\020\007\"\247\003\n\020LogicalD"
  "etection\022\035\n\025existence_probability\030\001 \001(\001\022"
  "#\n\tobject_id\030\002 \001(\0132\020.osi3.Identifier\022 \n\010"
  "position\030\003 \001(\0132\016.osi3.Vector3d\022%\n\rpositi"
  "on_rmse\030\004 \001(\0132\016.osi3.Vector3d\022 \n\010velocit"
  "y\030\005 \001(\0132\016.osi3.Vector3d\022%\n\rvelocity_rmse"
  "\030\006 \001(\0132\016.osi3.Vector3d\022\021\n\tintensity\030\007 \001("
  "\001\022\013\n\003snr\030\010 \001(\001\022 \n\030point_target_probabili"
  "ty\030\t \001(\001\022#\n\tsensor_id\030\n \003(\0132\020.osi3.Ident"
  "ifier\022<\n\016classification\030\013 \001(\0162$.osi3.Log"
  "icalDetectionClassification\022\030\n\020echo_puls"
  "e_width\030\014 \001(\001*\275\002\n\036LogicalDetectionClassi"
  "fication\022,\n(LOGICAL_DETECTION_CLASSIFICA"
  "TION_UNKNOWN\020\000\022*\n&LOGICAL_DETECTION_CLAS"
  "SIFICATION_OTHER\020\001\022,\n(LOGICAL_DETECTION_"
  "CLASSIFICATION_INVALID\020\002\022,\n(LOGICAL_DETE"
  "CTION_CLASSIFICATION_CLUTTER\020\003\0221\n-LOGICA"
  "L_DETECTION_CLASSIFICATION_OVERDRIVABLE\020"
  "\004\0222\n.LOGICAL_DETECTION_CLASSIFICATION_UN"
  "DERDRIVABLE\020\005B\002H\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_osi_5flogicaldetectiondata_2eproto_deps[2] = {
  &::descriptor_table_osi_5fcommon_2eproto,
  &::descriptor_table_osi_5fversion_2eproto,
};
static ::_pbi::once_flag descriptor_table_osi_5flogicaldetectiondata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_osi_5flogicaldetectiondata_2eproto = {
    false, false, 1497, descriptor_table_protodef_osi_5flogicaldetectiondata_2eproto,
    "osi_logicaldetectiondata.proto",
    &descriptor_table_osi_5flogicaldetectiondata_2eproto_once, descriptor_table_osi_5flogicaldetectiondata_2eproto_deps, 2, 3,
    schemas, file_default_instances, TableStruct_osi_5flogicaldetectiondata_2eproto::offsets,
    file_level_metadata_osi_5flogicaldetectiondata_2eproto, file_level_enum_descriptors_osi_5flogicaldetectiondata_2eproto,
    file_level_service_descriptors_osi_5flogicaldetectiondata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_osi_5flogicaldetectiondata_2eproto_getter() {
  return &descriptor_table_osi_5flogicaldetectiondata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_osi_5flogicaldetectiondata_2eproto(&descriptor_table_osi_5flogicaldetectiondata_2eproto);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogicalDetectionDataHeader_DataQualifier_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5flogicaldetectiondata_2eproto);
  return file_level_enum_descriptors_osi_5flogicaldetectiondata_2eproto[0];
}
bool LogicalDetectionDataHeader_DataQualifier_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DATA_QUALIFIER_UNKNOWN;
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DATA_QUALIFIER_OTHER;
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DATA_QUALIFIER_AVAILABLE;
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DATA_QUALIFIER_AVAILABLE_REDUCED;
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DATA_QUALIFIER_NOT_AVAILABLE;
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DATA_QUALIFIER_BLINDNESS;
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DATA_QUALIFIER_TEMPORARY_AVAILABLE;
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DATA_QUALIFIER_INVALID;
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DataQualifier_MIN;
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DataQualifier_MAX;
constexpr int LogicalDetectionDataHeader::DataQualifier_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogicalDetectionClassification_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5flogicaldetectiondata_2eproto);
  return file_level_enum_descriptors_osi_5flogicaldetectiondata_2eproto[1];
}
bool LogicalDetectionClassification_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class LogicalDetectionData::_Internal {
 public:
  using HasBits = decltype(std::declval<LogicalDetectionData>()._impl_._has_bits_);
  static const ::osi3::InterfaceVersion& version(const LogicalDetectionData* msg);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::LogicalDetectionDataHeader& header(const LogicalDetectionData* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::osi3::InterfaceVersion&
LogicalDetectionData::_Internal::version(const LogicalDetectionData* msg) {
  return *msg->_impl_.version_;
}
const ::osi3::LogicalDetectionDataHeader&
LogicalDetectionData::_Internal::header(const LogicalDetectionData* msg) {
  return *msg->_impl_.header_;
}
void LogicalDetectionData::clear_version() {
  if (_impl_.version_ != nullptr) _impl_.version_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LogicalDetectionData::LogicalDetectionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.LogicalDetectionData)
}
LogicalDetectionData::LogicalDetectionData(const LogicalDetectionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogicalDetectionData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.logical_detection_){from._impl_.logical_detection_}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.header_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_version()) {
    _this->_impl_.version_ = new ::osi3::InterfaceVersion(*from._impl_.version_);
  }
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::osi3::LogicalDetectionDataHeader(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:osi3.LogicalDetectionData)
}

inline void LogicalDetectionData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.logical_detection_){arena}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.header_){nullptr}
  };
}

LogicalDetectionData::~LogicalDetectionData() {
  // @@protoc_insertion_point(destructor:osi3.LogicalDetectionData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogicalDetectionData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.logical_detection_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.version_;
  if (this != internal_default_instance()) delete _impl_.header_;
}

void LogicalDetectionData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogicalDetectionData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LogicalDetectionData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.logical_detection_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.version_ != nullptr);
      _impl_.version_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicalDetectionData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.InterfaceVersion version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.LogicalDetectionDataHeader header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.LogicalDetection logical_detection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logical_detection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogicalDetectionData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LogicalDetectionData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.InterfaceVersion version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.LogicalDetectionDataHeader header = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated .osi3.LogicalDetection logical_detection = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_logical_detection_size()); i < n; i++) {
    const auto& repfield = this->_internal_logical_detection(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LogicalDetectionData)
  return target;
}

size_t LogicalDetectionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LogicalDetectionData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.LogicalDetection logical_detection = 3;
  total_size += 1UL * this->_internal_logical_detection_size();
  for (const auto& msg : this->_impl_.logical_detection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .osi3.InterfaceVersion version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.version_);
    }

    // optional .osi3.LogicalDetectionDataHeader header = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogicalDetectionData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogicalDetectionData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogicalDetectionData::GetClassData() const { return &_class_data_; }


void LogicalDetectionData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogicalDetectionData*>(&to_msg);
  auto& from = static_cast<const LogicalDetectionData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.LogicalDetectionData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.logical_detection_.MergeFrom(from._impl_.logical_detection_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_version()->::osi3::InterfaceVersion::MergeFrom(
          from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_header()->::osi3::LogicalDetectionDataHeader::MergeFrom(
          from._internal_header());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogicalDetectionData::CopyFrom(const LogicalDetectionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LogicalDetectionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalDetectionData::IsInitialized() const {
  return true;
}

void LogicalDetectionData::InternalSwap(LogicalDetectionData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.logical_detection_.InternalSwap(&other->_impl_.logical_detection_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogicalDetectionData, _impl_.header_)
      + sizeof(LogicalDetectionData::_impl_.header_)
      - PROTOBUF_FIELD_OFFSET(LogicalDetectionData, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalDetectionData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5flogicaldetectiondata_2eproto_getter, &descriptor_table_osi_5flogicaldetectiondata_2eproto_once,
      file_level_metadata_osi_5flogicaldetectiondata_2eproto[0]);
}

// ===================================================================

class LogicalDetectionDataHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<LogicalDetectionDataHeader>()._impl_._has_bits_);
  static const ::osi3::Timestamp& logical_detection_time(const LogicalDetectionDataHeader* msg);
  static void set_has_logical_detection_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data_qualifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_number_of_valid_logical_detections(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::osi3::Timestamp&
LogicalDetectionDataHeader::_Internal::logical_detection_time(const LogicalDetectionDataHeader* msg) {
  return *msg->_impl_.logical_detection_time_;
}
void LogicalDetectionDataHeader::clear_logical_detection_time() {
  if (_impl_.logical_detection_time_ != nullptr) _impl_.logical_detection_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LogicalDetectionDataHeader::clear_sensor_id() {
  _impl_.sensor_id_.Clear();
}
LogicalDetectionDataHeader::LogicalDetectionDataHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.LogicalDetectionDataHeader)
}
LogicalDetectionDataHeader::LogicalDetectionDataHeader(const LogicalDetectionDataHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogicalDetectionDataHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_id_){from._impl_.sensor_id_}
    , decltype(_impl_.logical_detection_time_){nullptr}
    , decltype(_impl_.data_qualifier_){}
    , decltype(_impl_.number_of_valid_logical_detections_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_logical_detection_time()) {
    _this->_impl_.logical_detection_time_ = new ::osi3::Timestamp(*from._impl_.logical_detection_time_);
  }
  ::memcpy(&_impl_.data_qualifier_, &from._impl_.data_qualifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.number_of_valid_logical_detections_) -
    reinterpret_cast<char*>(&_impl_.data_qualifier_)) + sizeof(_impl_.number_of_valid_logical_detections_));
  // @@protoc_insertion_point(copy_constructor:osi3.LogicalDetectionDataHeader)
}

inline void LogicalDetectionDataHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_id_){arena}
    , decltype(_impl_.logical_detection_time_){nullptr}
    , decltype(_impl_.data_qualifier_){0}
    , decltype(_impl_.number_of_valid_logical_detections_){0u}
  };
}

LogicalDetectionDataHeader::~LogicalDetectionDataHeader() {
  // @@protoc_insertion_point(destructor:osi3.LogicalDetectionDataHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogicalDetectionDataHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sensor_id_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.logical_detection_time_;
}

void LogicalDetectionDataHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogicalDetectionDataHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LogicalDetectionDataHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sensor_id_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.logical_detection_time_ != nullptr);
    _impl_.logical_detection_time_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.data_qualifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.number_of_valid_logical_detections_) -
        reinterpret_cast<char*>(&_impl_.data_qualifier_)) + sizeof(_impl_.number_of_valid_logical_detections_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicalDetectionDataHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Timestamp logical_detection_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_logical_detection_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.LogicalDetectionDataHeader.DataQualifier data_qualifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::LogicalDetectionDataHeader_DataQualifier_IsValid(val))) {
            _internal_set_data_qualifier(static_cast<::osi3::LogicalDetectionDataHeader_DataQualifier>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 number_of_valid_logical_detections = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_number_of_valid_logical_detections(&has_bits);
          _impl_.number_of_valid_logical_detections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Identifier sensor_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sensor_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogicalDetectionDataHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LogicalDetectionDataHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.Timestamp logical_detection_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::logical_detection_time(this),
        _Internal::logical_detection_time(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.LogicalDetectionDataHeader.DataQualifier data_qualifier = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_data_qualifier(), target);
  }

  // optional uint32 number_of_valid_logical_detections = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_number_of_valid_logical_detections(), target);
  }

  // repeated .osi3.Identifier sensor_id = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sensor_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_sensor_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LogicalDetectionDataHeader)
  return target;
}

size_t LogicalDetectionDataHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LogicalDetectionDataHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Identifier sensor_id = 4;
  total_size += 1UL * this->_internal_sensor_id_size();
  for (const auto& msg : this->_impl_.sensor_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .osi3.Timestamp logical_detection_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.logical_detection_time_);
    }

    // optional .osi3.LogicalDetectionDataHeader.DataQualifier data_qualifier = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_data_qualifier());
    }

    // optional uint32 number_of_valid_logical_detections = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_valid_logical_detections());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogicalDetectionDataHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogicalDetectionDataHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogicalDetectionDataHeader::GetClassData() const { return &_class_data_; }


void LogicalDetectionDataHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogicalDetectionDataHeader*>(&to_msg);
  auto& from = static_cast<const LogicalDetectionDataHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.LogicalDetectionDataHeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sensor_id_.MergeFrom(from._impl_.sensor_id_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_logical_detection_time()->::osi3::Timestamp::MergeFrom(
          from._internal_logical_detection_time());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.data_qualifier_ = from._impl_.data_qualifier_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.number_of_valid_logical_detections_ = from._impl_.number_of_valid_logical_detections_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogicalDetectionDataHeader::CopyFrom(const LogicalDetectionDataHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LogicalDetectionDataHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalDetectionDataHeader::IsInitialized() const {
  return true;
}

void LogicalDetectionDataHeader::InternalSwap(LogicalDetectionDataHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.sensor_id_.InternalSwap(&other->_impl_.sensor_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogicalDetectionDataHeader, _impl_.number_of_valid_logical_detections_)
      + sizeof(LogicalDetectionDataHeader::_impl_.number_of_valid_logical_detections_)
      - PROTOBUF_FIELD_OFFSET(LogicalDetectionDataHeader, _impl_.logical_detection_time_)>(
          reinterpret_cast<char*>(&_impl_.logical_detection_time_),
          reinterpret_cast<char*>(&other->_impl_.logical_detection_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalDetectionDataHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5flogicaldetectiondata_2eproto_getter, &descriptor_table_osi_5flogicaldetectiondata_2eproto_once,
      file_level_metadata_osi_5flogicaldetectiondata_2eproto[1]);
}

// ===================================================================

class LogicalDetection::_Internal {
 public:
  using HasBits = decltype(std::declval<LogicalDetection>()._impl_._has_bits_);
  static void set_has_existence_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::osi3::Identifier& object_id(const LogicalDetection* msg);
  static void set_has_object_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::Vector3d& position(const LogicalDetection* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::Vector3d& position_rmse(const LogicalDetection* msg);
  static void set_has_position_rmse(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::osi3::Vector3d& velocity(const LogicalDetection* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::osi3::Vector3d& velocity_rmse(const LogicalDetection* msg);
  static void set_has_velocity_rmse(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_intensity(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_snr(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_point_target_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_echo_pulse_width(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::osi3::Identifier&
LogicalDetection::_Internal::object_id(const LogicalDetection* msg) {
  return *msg->_impl_.object_id_;
}
const ::osi3::Vector3d&
LogicalDetection::_Internal::position(const LogicalDetection* msg) {
  return *msg->_impl_.position_;
}
const ::osi3::Vector3d&
LogicalDetection::_Internal::position_rmse(const LogicalDetection* msg) {
  return *msg->_impl_.position_rmse_;
}
const ::osi3::Vector3d&
LogicalDetection::_Internal::velocity(const LogicalDetection* msg) {
  return *msg->_impl_.velocity_;
}
const ::osi3::Vector3d&
LogicalDetection::_Internal::velocity_rmse(const LogicalDetection* msg) {
  return *msg->_impl_.velocity_rmse_;
}
void LogicalDetection::clear_object_id() {
  if (_impl_.object_id_ != nullptr) _impl_.object_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LogicalDetection::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void LogicalDetection::clear_position_rmse() {
  if (_impl_.position_rmse_ != nullptr) _impl_.position_rmse_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void LogicalDetection::clear_velocity() {
  if (_impl_.velocity_ != nullptr) _impl_.velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void LogicalDetection::clear_velocity_rmse() {
  if (_impl_.velocity_rmse_ != nullptr) _impl_.velocity_rmse_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void LogicalDetection::clear_sensor_id() {
  _impl_.sensor_id_.Clear();
}
LogicalDetection::LogicalDetection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.LogicalDetection)
}
LogicalDetection::LogicalDetection(const LogicalDetection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogicalDetection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_id_){from._impl_.sensor_id_}
    , decltype(_impl_.object_id_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.position_rmse_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.velocity_rmse_){nullptr}
    , decltype(_impl_.existence_probability_){}
    , decltype(_impl_.intensity_){}
    , decltype(_impl_.snr_){}
    , decltype(_impl_.point_target_probability_){}
    , decltype(_impl_.echo_pulse_width_){}
    , decltype(_impl_.classification_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object_id()) {
    _this->_impl_.object_id_ = new ::osi3::Identifier(*from._impl_.object_id_);
  }
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::osi3::Vector3d(*from._impl_.position_);
  }
  if (from._internal_has_position_rmse()) {
    _this->_impl_.position_rmse_ = new ::osi3::Vector3d(*from._impl_.position_rmse_);
  }
  if (from._internal_has_velocity()) {
    _this->_impl_.velocity_ = new ::osi3::Vector3d(*from._impl_.velocity_);
  }
  if (from._internal_has_velocity_rmse()) {
    _this->_impl_.velocity_rmse_ = new ::osi3::Vector3d(*from._impl_.velocity_rmse_);
  }
  ::memcpy(&_impl_.existence_probability_, &from._impl_.existence_probability_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.classification_) -
    reinterpret_cast<char*>(&_impl_.existence_probability_)) + sizeof(_impl_.classification_));
  // @@protoc_insertion_point(copy_constructor:osi3.LogicalDetection)
}

inline void LogicalDetection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sensor_id_){arena}
    , decltype(_impl_.object_id_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.position_rmse_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.velocity_rmse_){nullptr}
    , decltype(_impl_.existence_probability_){0}
    , decltype(_impl_.intensity_){0}
    , decltype(_impl_.snr_){0}
    , decltype(_impl_.point_target_probability_){0}
    , decltype(_impl_.echo_pulse_width_){0}
    , decltype(_impl_.classification_){0}
  };
}

LogicalDetection::~LogicalDetection() {
  // @@protoc_insertion_point(destructor:osi3.LogicalDetection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogicalDetection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sensor_id_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.object_id_;
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.position_rmse_;
  if (this != internal_default_instance()) delete _impl_.velocity_;
  if (this != internal_default_instance()) delete _impl_.velocity_rmse_;
}

void LogicalDetection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogicalDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LogicalDetection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sensor_id_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.object_id_ != nullptr);
      _impl_.object_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.position_rmse_ != nullptr);
      _impl_.position_rmse_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.velocity_rmse_ != nullptr);
      _impl_.velocity_rmse_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.existence_probability_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.snr_) -
        reinterpret_cast<char*>(&_impl_.existence_probability_)) + sizeof(_impl_.snr_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.point_target_probability_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.classification_) -
        reinterpret_cast<char*>(&_impl_.point_target_probability_)) + sizeof(_impl_.classification_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicalDetection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double existence_probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_existence_probability(&has_bits);
          _impl_.existence_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Identifier object_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Vector3d position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Vector3d position_rmse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_rmse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Vector3d velocity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Vector3d velocity_rmse = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity_rmse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double intensity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_intensity(&has_bits);
          _impl_.intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double snr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_snr(&has_bits);
          _impl_.snr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double point_target_probability = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_point_target_probability(&has_bits);
          _impl_.point_target_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Identifier sensor_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sensor_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.LogicalDetectionClassification classification = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::LogicalDetectionClassification_IsValid(val))) {
            _internal_set_classification(static_cast<::osi3::LogicalDetectionClassification>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double echo_pulse_width = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_echo_pulse_width(&has_bits);
          _impl_.echo_pulse_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogicalDetection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LogicalDetection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double existence_probability = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_existence_probability(), target);
  }

  // optional .osi3.Identifier object_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::object_id(this),
        _Internal::object_id(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.Vector3d position = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.Vector3d position_rmse = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::position_rmse(this),
        _Internal::position_rmse(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.Vector3d velocity = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.Vector3d velocity_rmse = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::velocity_rmse(this),
        _Internal::velocity_rmse(this).GetCachedSize(), target, stream);
  }

  // optional double intensity = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_intensity(), target);
  }

  // optional double snr = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_snr(), target);
  }

  // optional double point_target_probability = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_point_target_probability(), target);
  }

  // repeated .osi3.Identifier sensor_id = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sensor_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_sensor_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .osi3.LogicalDetectionClassification classification = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_classification(), target);
  }

  // optional double echo_pulse_width = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_echo_pulse_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LogicalDetection)
  return target;
}

size_t LogicalDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LogicalDetection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Identifier sensor_id = 10;
  total_size += 1UL * this->_internal_sensor_id_size();
  for (const auto& msg : this->_impl_.sensor_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .osi3.Identifier object_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.object_id_);
    }

    // optional .osi3.Vector3d position = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // optional .osi3.Vector3d position_rmse = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_rmse_);
    }

    // optional .osi3.Vector3d velocity = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.velocity_);
    }

    // optional .osi3.Vector3d velocity_rmse = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.velocity_rmse_);
    }

    // optional double existence_probability = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double intensity = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double snr = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional double point_target_probability = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double echo_pulse_width = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional .osi3.LogicalDetectionClassification classification = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_classification());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogicalDetection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogicalDetection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogicalDetection::GetClassData() const { return &_class_data_; }


void LogicalDetection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogicalDetection*>(&to_msg);
  auto& from = static_cast<const LogicalDetection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.LogicalDetection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sensor_id_.MergeFrom(from._impl_.sensor_id_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_object_id()->::osi3::Identifier::MergeFrom(
          from._internal_object_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_position()->::osi3::Vector3d::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_position_rmse()->::osi3::Vector3d::MergeFrom(
          from._internal_position_rmse());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_velocity()->::osi3::Vector3d::MergeFrom(
          from._internal_velocity());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_velocity_rmse()->::osi3::Vector3d::MergeFrom(
          from._internal_velocity_rmse());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.existence_probability_ = from._impl_.existence_probability_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.intensity_ = from._impl_.intensity_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.snr_ = from._impl_.snr_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.point_target_probability_ = from._impl_.point_target_probability_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.echo_pulse_width_ = from._impl_.echo_pulse_width_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.classification_ = from._impl_.classification_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogicalDetection::CopyFrom(const LogicalDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LogicalDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalDetection::IsInitialized() const {
  return true;
}

void LogicalDetection::InternalSwap(LogicalDetection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.sensor_id_.InternalSwap(&other->_impl_.sensor_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogicalDetection, _impl_.classification_)
      + sizeof(LogicalDetection::_impl_.classification_)
      - PROTOBUF_FIELD_OFFSET(LogicalDetection, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalDetection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5flogicaldetectiondata_2eproto_getter, &descriptor_table_osi_5flogicaldetectiondata_2eproto_once,
      file_level_metadata_osi_5flogicaldetectiondata_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::LogicalDetectionData*
Arena::CreateMaybeMessage< ::osi3::LogicalDetectionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::LogicalDetectionData >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::LogicalDetectionDataHeader*
Arena::CreateMaybeMessage< ::osi3::LogicalDetectionDataHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::LogicalDetectionDataHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::LogicalDetection*
Arena::CreateMaybeMessage< ::osi3::LogicalDetection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::LogicalDetection >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_logicallane.proto

#include "osi_logicallane.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace osi3 {
PROTOBUF_CONSTEXPR LogicalLaneBoundary_LogicalBoundaryPoint::LogicalLaneBoundary_LogicalBoundaryPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.s_position_)*/0
  , /*decltype(_impl_.t_position_)*/0} {}
struct LogicalLaneBoundary_LogicalBoundaryPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogicalLaneBoundary_LogicalBoundaryPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogicalLaneBoundary_LogicalBoundaryPointDefaultTypeInternal() {}
  union {
    LogicalLaneBoundary_LogicalBoundaryPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogicalLaneBoundary_LogicalBoundaryPointDefaultTypeInternal _LogicalLaneBoundary_LogicalBoundaryPoint_default_instance_;
PROTOBUF_CONSTEXPR LogicalLaneBoundary::LogicalLaneBoundary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.boundary_line_)*/{}
  , /*decltype(_impl_.physical_boundary_id_)*/{}
  , /*decltype(_impl_.source_reference_)*/{}
  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_.reference_line_id_)*/nullptr
  , /*decltype(_impl_.passing_rule_)*/0} {}
struct LogicalLaneBoundaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogicalLaneBoundaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogicalLaneBoundaryDefaultTypeInternal() {}
  union {
    LogicalLaneBoundary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogicalLaneBoundaryDefaultTypeInternal _LogicalLaneBoundary_default_instance_;
PROTOBUF_CONSTEXPR LogicalLane_PhysicalLaneReference::LogicalLane_PhysicalLaneReference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.physical_lane_id_)*/nullptr
  , /*decltype(_impl_.start_s_)*/0
  , /*decltype(_impl_.end_s_)*/0} {}
struct LogicalLane_PhysicalLaneReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogicalLane_PhysicalLaneReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogicalLane_PhysicalLaneReferenceDefaultTypeInternal() {}
  union {
    LogicalLane_PhysicalLaneReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogicalLane_PhysicalLaneReferenceDefaultTypeInternal _LogicalLane_PhysicalLaneReference_default_instance_;
PROTOBUF_CONSTEXPR LogicalLane_LaneConnection::LogicalLane_LaneConnection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.other_lane_id_)*/nullptr
  , /*decltype(_impl_.at_begin_of_other_lane_)*/false} {}
struct LogicalLane_LaneConnectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogicalLane_LaneConnectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogicalLane_LaneConnectionDefaultTypeInternal() {}
  union {
    LogicalLane_LaneConnection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogicalLane_LaneConnectionDefaultTypeInternal _LogicalLane_LaneConnection_default_instance_;
PROTOBUF_CONSTEXPR LogicalLane_LaneRelation::LogicalLane_LaneRelation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.other_lane_id_)*/nullptr
  , /*decltype(_impl_.start_s_)*/0
  , /*decltype(_impl_.end_s_)*/0
  , /*decltype(_impl_.start_s_other_)*/0
  , /*decltype(_impl_.end_s_other_)*/0} {}
struct LogicalLane_LaneRelationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogicalLane_LaneRelationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogicalLane_LaneRelationDefaultTypeInternal() {}
  union {
    LogicalLane_LaneRelation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogicalLane_LaneRelationDefaultTypeInternal _LogicalLane_LaneRelation_default_instance_;
PROTOBUF_CONSTEXPR LogicalLane::LogicalLane(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.source_reference_)*/{}
  , /*decltype(_impl_.physical_lane_reference_)*/{}
  , /*decltype(_impl_.right_adjacent_lane_)*/{}
  , /*decltype(_impl_.left_adjacent_lane_)*/{}
  , /*decltype(_impl_.overlapping_lane_)*/{}
  , /*decltype(_impl_.right_boundary_id_)*/{}
  , /*decltype(_impl_.left_boundary_id_)*/{}
  , /*decltype(_impl_.predecessor_lane_)*/{}
  , /*decltype(_impl_.successor_lane_)*/{}
  , /*decltype(_impl_.street_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_.reference_line_id_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.move_direction_)*/0
  , /*decltype(_impl_.start_s_)*/0
  , /*decltype(_impl_.end_s_)*/0} {}
struct LogicalLaneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogicalLaneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogicalLaneDefaultTypeInternal() {}
  union {
    LogicalLane _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogicalLaneDefaultTypeInternal _LogicalLane_default_instance_;
}  // namespace osi3
static ::_pb::Metadata file_level_metadata_osi_5flogicallane_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_osi_5flogicallane_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_osi_5flogicallane_2eproto = nullptr;

const uint32_t TableStruct_osi_5flogicallane_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLaneBoundary_LogicalBoundaryPoint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLaneBoundary_LogicalBoundaryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLaneBoundary_LogicalBoundaryPoint, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLaneBoundary_LogicalBoundaryPoint, _impl_.s_position_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLaneBoundary_LogicalBoundaryPoint, _impl_.t_position_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLaneBoundary, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLaneBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLaneBoundary, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLaneBoundary, _impl_.boundary_line_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLaneBoundary, _impl_.reference_line_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLaneBoundary, _impl_.physical_boundary_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLaneBoundary, _impl_.passing_rule_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLaneBoundary, _impl_.source_reference_),
  0,
  ~0u,
  1,
  ~0u,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane_PhysicalLaneReference, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane_PhysicalLaneReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane_PhysicalLaneReference, _impl_.physical_lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane_PhysicalLaneReference, _impl_.start_s_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane_PhysicalLaneReference, _impl_.end_s_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane_LaneConnection, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane_LaneConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane_LaneConnection, _impl_.other_lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane_LaneConnection, _impl_.at_begin_of_other_lane_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane_LaneRelation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane_LaneRelation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane_LaneRelation, _impl_.other_lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane_LaneRelation, _impl_.start_s_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane_LaneRelation, _impl_.end_s_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane_LaneRelation, _impl_.start_s_other_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane_LaneRelation, _impl_.end_s_other_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, _impl_.source_reference_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, _impl_.physical_lane_reference_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, _impl_.reference_line_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, _impl_.start_s_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, _impl_.end_s_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, _impl_.move_direction_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, _impl_.right_adjacent_lane_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, _impl_.left_adjacent_lane_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, _impl_.overlapping_lane_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, _impl_.right_boundary_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, _impl_.left_boundary_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, _impl_.predecessor_lane_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, _impl_.successor_lane_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, _impl_.street_name_),
  1,
  3,
  ~0u,
  ~0u,
  2,
  5,
  6,
  4,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::osi3::LogicalLaneBoundary_LogicalBoundaryPoint)},
  { 12, 24, -1, sizeof(::osi3::LogicalLaneBoundary)},
  { 30, 39, -1, sizeof(::osi3::LogicalLane_PhysicalLaneReference)},
  { 42, 50, -1, sizeof(::osi3::LogicalLane_LaneConnection)},
  { 52, 63, -1, sizeof(::osi3::LogicalLane_LaneRelation)},
  { 68, 90, -1, sizeof(::osi3::LogicalLane)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::osi3::_LogicalLaneBoundary_LogicalBoundaryPoint_default_instance_._instance,
  &::osi3::_LogicalLaneBoundary_default_instance_._instance,
  &::osi3::_LogicalLane_PhysicalLaneReference_default_instance_._instance,
  &::osi3::_LogicalLane_LaneConnection_default_instance_._instance,
  &::osi3::_LogicalLane_LaneRelation_default_instance_._instance,
  &::osi3::_LogicalLane_default_instance_._instance,
};

const char descriptor_table_protodef_osi_5flogicallane_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025osi_logicallane.proto\022\004osi3\032\020osi_commo"
  "n.proto\"\347\004\n\023LogicalLaneBoundary\022\034\n\002id\030\001 "
  "\001(\0132\020.osi3.Identifier\022E\n\rboundary_line\030\002"
  " \003(\0132..osi3.LogicalLaneBoundary.LogicalB"
  "oundaryPoint\022+\n\021reference_line_id\030\003 \001(\0132"
  "\020.osi3.Identifier\022.\n\024physical_boundary_i"
  "d\030\004 \003(\0132\020.osi3.Identifier\022;\n\014passing_rul"
  "e\030\005 \001(\0162%.osi3.LogicalLaneBoundary.Passi"
  "ngRule\0221\n\020source_reference\030\006 \003(\0132\027.osi3."
  "ExternalReference\032`\n\024LogicalBoundaryPoin"
  "t\022 \n\010position\030\001 \001(\0132\016.osi3.Vector3d\022\022\n\ns"
  "_position\030\002 \001(\001\022\022\n\nt_position\030\003 \001(\001\"\273\001\n\013"
  "PassingRule\022\030\n\024PASSING_RULE_UNKNOWN\020\000\022\026\n"
  "\022PASSING_RULE_OTHER\020\001\022\035\n\031PASSING_RULE_NO"
  "NE_ALLOWED\020\002\022\035\n\031PASSING_RULE_INCREASING_"
  "T\020\003\022\035\n\031PASSING_RULE_DECREASING_T\020\004\022\035\n\031PA"
  "SSING_RULE_BOTH_ALLOWED\020\005\"\257\014\n\013LogicalLan"
  "e\022\034\n\002id\030\001 \001(\0132\020.osi3.Identifier\022$\n\004type\030"
  "\002 \001(\0162\026.osi3.LogicalLane.Type\0221\n\020source_"
  "reference\030\003 \003(\0132\027.osi3.ExternalReference"
  "\022H\n\027physical_lane_reference\030\004 \003(\0132\'.osi3"
  ".LogicalLane.PhysicalLaneReference\022+\n\021re"
  "ference_line_id\030\005 \001(\0132\020.osi3.Identifier\022"
  "\017\n\007start_s\030\006 \001(\001\022\r\n\005end_s\030\007 \001(\001\0227\n\016move_"
  "direction\030\010 \001(\0162\037.osi3.LogicalLane.MoveD"
  "irection\022;\n\023right_adjacent_lane\030\t \003(\0132\036."
  "osi3.LogicalLane.LaneRelation\022:\n\022left_ad"
  "jacent_lane\030\n \003(\0132\036.osi3.LogicalLane.Lan"
  "eRelation\0228\n\020overlapping_lane\030\013 \003(\0132\036.os"
  "i3.LogicalLane.LaneRelation\022+\n\021right_bou"
  "ndary_id\030\014 \003(\0132\020.osi3.Identifier\022*\n\020left"
  "_boundary_id\030\r \003(\0132\020.osi3.Identifier\022:\n\020"
  "predecessor_lane\030\016 \003(\0132 .osi3.LogicalLan"
  "e.LaneConnection\0228\n\016successor_lane\030\017 \003(\013"
  "2 .osi3.LogicalLane.LaneConnection\022\023\n\013st"
  "reet_name\030\020 \001(\t\032c\n\025PhysicalLaneReference"
  "\022*\n\020physical_lane_id\030\001 \001(\0132\020.osi3.Identi"
  "fier\022\017\n\007start_s\030\002 \001(\001\022\r\n\005end_s\030\003 \001(\001\032Y\n\016"
  "LaneConnection\022\'\n\rother_lane_id\030\001 \001(\0132\020."
  "osi3.Identifier\022\036\n\026at_begin_of_other_lan"
  "e\030\002 \001(\010\032\203\001\n\014LaneRelation\022\'\n\rother_lane_i"
  "d\030\001 \001(\0132\020.osi3.Identifier\022\017\n\007start_s\030\002 \001"
  "(\001\022\r\n\005end_s\030\003 \001(\001\022\025\n\rstart_s_other\030\004 \001(\001"
  "\022\023\n\013end_s_other\030\005 \001(\001\"\320\002\n\004Type\022\020\n\014TYPE_U"
  "NKNOWN\020\000\022\016\n\nTYPE_OTHER\020\001\022\017\n\013TYPE_NORMAL\020"
  "\002\022\017\n\013TYPE_BIKING\020\003\022\021\n\rTYPE_SIDEWALK\020\004\022\020\n"
  "\014TYPE_PARKING\020\005\022\r\n\tTYPE_STOP\020\006\022\023\n\017TYPE_R"
  "ESTRICTED\020\007\022\017\n\013TYPE_BORDER\020\010\022\021\n\rTYPE_SHO"
  "ULDER\020\t\022\r\n\tTYPE_EXIT\020\n\022\016\n\nTYPE_ENTRY\020\013\022\017"
  "\n\013TYPE_ONRAMP\020\014\022\020\n\014TYPE_OFFRAMP\020\r\022\027\n\023TYP"
  "E_CONNECTINGRAMP\020\016\022\017\n\013TYPE_MEDIAN\020\017\022\r\n\tT"
  "YPE_CURB\020\020\022\r\n\tTYPE_RAIL\020\021\022\r\n\tTYPE_TRAM\020\022"
  "\"\250\001\n\rMoveDirection\022\032\n\026MOVE_DIRECTION_UNK"
  "NOWN\020\000\022\030\n\024MOVE_DIRECTION_OTHER\020\001\022\037\n\033MOVE"
  "_DIRECTION_INCREASING_S\020\002\022\037\n\033MOVE_DIRECT"
  "ION_DECREASING_S\020\003\022\037\n\033MOVE_DIRECTION_BOT"
  "H_ALLOWED\020\004B\002H\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_osi_5flogicallane_2eproto_deps[1] = {
  &::descriptor_table_osi_5fcommon_2eproto,
};
static ::_pbi::once_flag descriptor_table_osi_5flogicallane_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_osi_5flogicallane_2eproto = {
    false, false, 2255, descriptor_table_protodef_osi_5flogicallane_2eproto,
    "osi_logicallane.proto",
    &descriptor_table_osi_5flogicallane_2eproto_once, descriptor_table_osi_5flogicallane_2eproto_deps, 1, 6,
    schemas, file_default_instances, TableStruct_osi_5flogicallane_2eproto::offsets,
    file_level_metadata_osi_5flogicallane_2eproto, file_level_enum_descriptors_osi_5flogicallane_2eproto,
    file_level_service_descriptors_osi_5flogicallane_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_osi_5flogicallane_2eproto_getter() {
  return &descriptor_table_osi_5flogicallane_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_osi_5flogicallane_2eproto(&descriptor_table_osi_5flogicallane_2eproto);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogicalLaneBoundary_PassingRule_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5flogicallane_2eproto);
  return file_level_enum_descriptors_osi_5flogicallane_2eproto[0];
}
bool LogicalLaneBoundary_PassingRule_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LogicalLaneBoundary_PassingRule LogicalLaneBoundary::PASSING_RULE_UNKNOWN;
constexpr LogicalLaneBoundary_PassingRule LogicalLaneBoundary::PASSING_RULE_OTHER;
constexpr LogicalLaneBoundary_PassingRule LogicalLaneBoundary::PASSING_RULE_NONE_ALLOWED;
constexpr LogicalLaneBoundary_PassingRule LogicalLaneBoundary::PASSING_RULE_INCREASING_T;
constexpr LogicalLaneBoundary_PassingRule LogicalLaneBoundary::PASSING_RULE_DECREASING_T;
constexpr LogicalLaneBoundary_PassingRule LogicalLaneBoundary::PASSING_RULE_BOTH_ALLOWED;
constexpr LogicalLaneBoundary_PassingRule LogicalLaneBoundary::PassingRule_MIN;
constexpr LogicalLaneBoundary_PassingRule LogicalLaneBoundary::PassingRule_MAX;
constexpr int LogicalLaneBoundary::PassingRule_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogicalLane_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5flogicallane_2eproto);
  return file_level_enum_descriptors_osi_5flogicallane_2eproto[1];
}
bool LogicalLane_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LogicalLane_Type LogicalLane::TYPE_UNKNOWN;
constexpr LogicalLane_Type LogicalLane::TYPE_OTHER;
constexpr LogicalLane_Type LogicalLane::TYPE_NORMAL;
constexpr LogicalLane_Type LogicalLane::TYPE_BIKING;
constexpr LogicalLane_Type LogicalLane::TYPE_SIDEWALK;
constexpr LogicalLane_Type LogicalLane::TYPE_PARKING;
constexpr LogicalLane_Type LogicalLane::TYPE_STOP;
constexpr LogicalLane_Type LogicalLane::TYPE_RESTRICTED;
constexpr LogicalLane_Type LogicalLane::TYPE_BORDER;
constexpr LogicalLane_Type LogicalLane::TYPE_SHOULDER;
constexpr LogicalLane_Type LogicalLane::TYPE_EXIT;
constexpr LogicalLane_Type LogicalLane::TYPE_ENTRY;
constexpr LogicalLane_Type LogicalLane::TYPE_ONRAMP;
constexpr LogicalLane_Type LogicalLane::TYPE_OFFRAMP;
constexpr LogicalLane_Type LogicalLane::TYPE_CONNECTINGRAMP;
constexpr LogicalLane_Type LogicalLane::TYPE_MEDIAN;
constexpr LogicalLane_Type LogicalLane::TYPE_CURB;
constexpr LogicalLane_Type LogicalLane::TYPE_RAIL;
constexpr LogicalLane_Type LogicalLane::TYPE_TRAM;
constexpr LogicalLane_Type LogicalLane::Type_MIN;
constexpr LogicalLane_Type LogicalLane::Type_MAX;
constexpr int LogicalLane::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogicalLane_MoveDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5flogicallane_2eproto);
  return file_level_enum_descriptors_osi_5flogicallane_2eproto[2];
}
bool LogicalLane_MoveDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LogicalLane_MoveDirection LogicalLane::MOVE_DIRECTION_UNKNOWN;
constexpr LogicalLane_MoveDirection LogicalLane::MOVE_DIRECTION_OTHER;
constexpr LogicalLane_MoveDirection LogicalLane::MOVE_DIRECTION_INCREASING_S;
constexpr LogicalLane_MoveDirection LogicalLane::MOVE_DIRECTION_DECREASING_S;
constexpr LogicalLane_MoveDirection LogicalLane::MOVE_DIRECTION_BOTH_ALLOWED;
constexpr LogicalLane_MoveDirection LogicalLane::MoveDirection_MIN;
constexpr LogicalLane_MoveDirection LogicalLane::MoveDirection_MAX;
constexpr int LogicalLane::MoveDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class LogicalLaneBoundary_LogicalBoundaryPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<LogicalLaneBoundary_LogicalBoundaryPoint>()._impl_._has_bits_);
  static const ::osi3::Vector3d& position(const LogicalLaneBoundary_LogicalBoundaryPoint* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_s_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_t_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::osi3::Vector3d&
LogicalLaneBoundary_LogicalBoundaryPoint::_Internal::position(const LogicalLaneBoundary_LogicalBoundaryPoint* msg) {
  return *msg->_impl_.position_;
}
void LogicalLaneBoundary_LogicalBoundaryPoint::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LogicalLaneBoundary_LogicalBoundaryPoint::LogicalLaneBoundary_LogicalBoundaryPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.LogicalLaneBoundary.LogicalBoundaryPoint)
}
LogicalLaneBoundary_LogicalBoundaryPoint::LogicalLaneBoundary_LogicalBoundaryPoint(const LogicalLaneBoundary_LogicalBoundaryPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogicalLaneBoundary_LogicalBoundaryPoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.s_position_){}
    , decltype(_impl_.t_position_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::osi3::Vector3d(*from._impl_.position_);
  }
  ::memcpy(&_impl_.s_position_, &from._impl_.s_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.t_position_) -
    reinterpret_cast<char*>(&_impl_.s_position_)) + sizeof(_impl_.t_position_));
  // @@protoc_insertion_point(copy_constructor:osi3.LogicalLaneBoundary.LogicalBoundaryPoint)
}

inline void LogicalLaneBoundary_LogicalBoundaryPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.s_position_){0}
    , decltype(_impl_.t_position_){0}
  };
}

LogicalLaneBoundary_LogicalBoundaryPoint::~LogicalLaneBoundary_LogicalBoundaryPoint() {
  // @@protoc_insertion_point(destructor:osi3.LogicalLaneBoundary.LogicalBoundaryPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogicalLaneBoundary_LogicalBoundaryPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
}

void LogicalLaneBoundary_LogicalBoundaryPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogicalLaneBoundary_LogicalBoundaryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LogicalLaneBoundary.LogicalBoundaryPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.position_ != nullptr);
    _impl_.position_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.s_position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.t_position_) -
        reinterpret_cast<char*>(&_impl_.s_position_)) + sizeof(_impl_.t_position_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicalLaneBoundary_LogicalBoundaryPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Vector3d position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double s_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_s_position(&has_bits);
          _impl_.s_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double t_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_t_position(&has_bits);
          _impl_.t_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogicalLaneBoundary_LogicalBoundaryPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LogicalLaneBoundary.LogicalBoundaryPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.Vector3d position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // optional double s_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_s_position(), target);
  }

  // optional double t_position = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_t_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LogicalLaneBoundary.LogicalBoundaryPoint)
  return target;
}

size_t LogicalLaneBoundary_LogicalBoundaryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LogicalLaneBoundary.LogicalBoundaryPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .osi3.Vector3d position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // optional double s_position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double t_position = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogicalLaneBoundary_LogicalBoundaryPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogicalLaneBoundary_LogicalBoundaryPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogicalLaneBoundary_LogicalBoundaryPoint::GetClassData() const { return &_class_data_; }


void LogicalLaneBoundary_LogicalBoundaryPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogicalLaneBoundary_LogicalBoundaryPoint*>(&to_msg);
  auto& from = static_cast<const LogicalLaneBoundary_LogicalBoundaryPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.LogicalLaneBoundary.LogicalBoundaryPoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::osi3::Vector3d::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.s_position_ = from._impl_.s_position_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.t_position_ = from._impl_.t_position_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogicalLaneBoundary_LogicalBoundaryPoint::CopyFrom(const LogicalLaneBoundary_LogicalBoundaryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LogicalLaneBoundary.LogicalBoundaryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalLaneBoundary_LogicalBoundaryPoint::IsInitialized() const {
  return true;
}

void LogicalLaneBoundary_LogicalBoundaryPoint::InternalSwap(LogicalLaneBoundary_LogicalBoundaryPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogicalLaneBoundary_LogicalBoundaryPoint, _impl_.t_position_)
      + sizeof(LogicalLaneBoundary_LogicalBoundaryPoint::_impl_.t_position_)
      - PROTOBUF_FIELD_OFFSET(LogicalLaneBoundary_LogicalBoundaryPoint, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalLaneBoundary_LogicalBoundaryPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5flogicallane_2eproto_getter, &descriptor_table_osi_5flogicallane_2eproto_once,
      file_level_metadata_osi_5flogicallane_2eproto[0]);
}

// ===================================================================

class LogicalLaneBoundary::_Internal {
 public:
  using HasBits = decltype(std::declval<LogicalLaneBoundary>()._impl_._has_bits_);
  static const ::osi3::Identifier& id(const LogicalLaneBoundary* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::Identifier& reference_line_id(const LogicalLaneBoundary* msg);
  static void set_has_reference_line_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_passing_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::osi3::Identifier&
LogicalLaneBoundary::_Internal::id(const LogicalLaneBoundary* msg) {
  return *msg->_impl_.id_;
}
const ::osi3::Identifier&
LogicalLaneBoundary::_Internal::reference_line_id(const LogicalLaneBoundary* msg) {
  return *msg->_impl_.reference_line_id_;
}
void LogicalLaneBoundary::clear_id() {
  if (_impl_.id_ != nullptr) _impl_.id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LogicalLaneBoundary::clear_reference_line_id() {
  if (_impl_.reference_line_id_ != nullptr) _impl_.reference_line_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void LogicalLaneBoundary::clear_physical_boundary_id() {
  _impl_.physical_boundary_id_.Clear();
}
void LogicalLaneBoundary::clear_source_reference() {
  _impl_.source_reference_.Clear();
}
LogicalLaneBoundary::LogicalLaneBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.LogicalLaneBoundary)
}
LogicalLaneBoundary::LogicalLaneBoundary(const LogicalLaneBoundary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogicalLaneBoundary* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.boundary_line_){from._impl_.boundary_line_}
    , decltype(_impl_.physical_boundary_id_){from._impl_.physical_boundary_id_}
    , decltype(_impl_.source_reference_){from._impl_.source_reference_}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.reference_line_id_){nullptr}
    , decltype(_impl_.passing_rule_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    _this->_impl_.id_ = new ::osi3::Identifier(*from._impl_.id_);
  }
  if (from._internal_has_reference_line_id()) {
    _this->_impl_.reference_line_id_ = new ::osi3::Identifier(*from._impl_.reference_line_id_);
  }
  _this->_impl_.passing_rule_ = from._impl_.passing_rule_;
  // @@protoc_insertion_point(copy_constructor:osi3.LogicalLaneBoundary)
}

inline void LogicalLaneBoundary::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.boundary_line_){arena}
    , decltype(_impl_.physical_boundary_id_){arena}
    , decltype(_impl_.source_reference_){arena}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.reference_line_id_){nullptr}
    , decltype(_impl_.passing_rule_){0}
  };
}

LogicalLaneBoundary::~LogicalLaneBoundary() {
  // @@protoc_insertion_point(destructor:osi3.LogicalLaneBoundary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogicalLaneBoundary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.boundary_line_.~RepeatedPtrField();
  _impl_.physical_boundary_id_.~RepeatedPtrField();
  _impl_.source_reference_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.id_;
  if (this != internal_default_instance()) delete _impl_.reference_line_id_;
}

void LogicalLaneBoundary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogicalLaneBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LogicalLaneBoundary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.boundary_line_.Clear();
  _impl_.physical_boundary_id_.Clear();
  _impl_.source_reference_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.id_ != nullptr);
      _impl_.id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.reference_line_id_ != nullptr);
      _impl_.reference_line_id_->Clear();
    }
  }
  _impl_.passing_rule_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicalLaneBoundary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Identifier id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.LogicalLaneBoundary.LogicalBoundaryPoint boundary_line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_boundary_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Identifier reference_line_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference_line_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Identifier physical_boundary_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_physical_boundary_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.LogicalLaneBoundary.PassingRule passing_rule = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::LogicalLaneBoundary_PassingRule_IsValid(val))) {
            _internal_set_passing_rule(static_cast<::osi3::LogicalLaneBoundary_PassingRule>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.ExternalReference source_reference = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_source_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogicalLaneBoundary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LogicalLaneBoundary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.Identifier id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // repeated .osi3.LogicalLaneBoundary.LogicalBoundaryPoint boundary_line = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_boundary_line_size()); i < n; i++) {
    const auto& repfield = this->_internal_boundary_line(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .osi3.Identifier reference_line_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::reference_line_id(this),
        _Internal::reference_line_id(this).GetCachedSize(), target, stream);
  }

  // repeated .osi3.Identifier physical_boundary_id = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_physical_boundary_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_physical_boundary_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .osi3.LogicalLaneBoundary.PassingRule passing_rule = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_passing_rule(), target);
  }

  // repeated .osi3.ExternalReference source_reference = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_source_reference_size()); i < n; i++) {
    const auto& repfield = this->_internal_source_reference(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LogicalLaneBoundary)
  return target;
}

size_t LogicalLaneBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LogicalLaneBoundary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.LogicalLaneBoundary.LogicalBoundaryPoint boundary_line = 2;
  total_size += 1UL * this->_internal_boundary_line_size();
  for (const auto& msg : this->_impl_.boundary_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.Identifier physical_boundary_id = 4;
  total_size += 1UL * this->_internal_physical_boundary_id_size();
  for (const auto& msg : this->_impl_.physical_boundary_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.ExternalReference source_reference = 6;
  total_size += 1UL * this->_internal_source_reference_size();
  for (const auto& msg : this->_impl_.source_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .osi3.Identifier id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.id_);
    }

    // optional .osi3.Identifier reference_line_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reference_line_id_);
    }

    // optional .osi3.LogicalLaneBoundary.PassingRule passing_rule = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_passing_rule());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogicalLaneBoundary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogicalLaneBoundary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogicalLaneBoundary::GetClassData() const { return &_class_data_; }


void LogicalLaneBoundary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogicalLaneBoundary*>(&to_msg);
  auto& from = static_cast<const LogicalLaneBoundary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.LogicalLaneBoundary)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.boundary_line_.MergeFrom(from._impl_.boundary_line_);
  _this->_impl_.physical_boundary_id_.MergeFrom(from._impl_.physical_boundary_id_);
  _this->_impl_.source_reference_.MergeFrom(from._impl_.source_reference_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_id()->::osi3::Identifier::MergeFrom(
          from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_reference_line_id()->::osi3::Identifier::MergeFrom(
          from._internal_reference_line_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.passing_rule_ = from._impl_.passing_rule_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogicalLaneBoundary::CopyFrom(const LogicalLaneBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LogicalLaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalLaneBoundary::IsInitialized() const {
  return true;
}

void LogicalLaneBoundary::InternalSwap(LogicalLaneBoundary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.boundary_line_.InternalSwap(&other->_impl_.boundary_line_);
  _impl_.physical_boundary_id_.InternalSwap(&other->_impl_.physical_boundary_id_);
  _impl_.source_reference_.InternalSwap(&other->_impl_.source_reference_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogicalLaneBoundary, _impl_.passing_rule_)
      + sizeof(LogicalLaneBoundary::_impl_.passing_rule_)
      - PROTOBUF_FIELD_OFFSET(LogicalLaneBoundary, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalLaneBoundary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5flogicallane_2eproto_getter, &descriptor_table_osi_5flogicallane_2eproto_once,
      file_level_metadata_osi_5flogicallane_2eproto[1]);
}

// ===================================================================

class LogicalLane_PhysicalLaneReference::_Internal {
 public:
  using HasBits = decltype(std::declval<LogicalLane_PhysicalLaneReference>()._impl_._has_bits_);
  static const ::osi3::Identifier& physical_lane_id(const LogicalLane_PhysicalLaneReference* msg);
  static void set_has_physical_lane_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::osi3::Identifier&
LogicalLane_PhysicalLaneReference::_Internal::physical_lane_id(const LogicalLane_PhysicalLaneReference* msg) {
  return *msg->_impl_.physical_lane_id_;
}
void LogicalLane_PhysicalLaneReference::clear_physical_lane_id() {
  if (_impl_.physical_lane_id_ != nullptr) _impl_.physical_lane_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LogicalLane_PhysicalLaneReference::LogicalLane_PhysicalLaneReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.LogicalLane.PhysicalLaneReference)
}
LogicalLane_PhysicalLaneReference::LogicalLane_PhysicalLaneReference(const LogicalLane_PhysicalLaneReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogicalLane_PhysicalLaneReference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.physical_lane_id_){nullptr}
    , decltype(_impl_.start_s_){}
    , decltype(_impl_.end_s_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_physical_lane_id()) {
    _this->_impl_.physical_lane_id_ = new ::osi3::Identifier(*from._impl_.physical_lane_id_);
  }
  ::memcpy(&_impl_.start_s_, &from._impl_.start_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_s_) -
    reinterpret_cast<char*>(&_impl_.start_s_)) + sizeof(_impl_.end_s_));
  // @@protoc_insertion_point(copy_constructor:osi3.LogicalLane.PhysicalLaneReference)
}

inline void LogicalLane_PhysicalLaneReference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.physical_lane_id_){nullptr}
    , decltype(_impl_.start_s_){0}
    , decltype(_impl_.end_s_){0}
  };
}

LogicalLane_PhysicalLaneReference::~LogicalLane_PhysicalLaneReference() {
  // @@protoc_insertion_point(destructor:osi3.LogicalLane.PhysicalLaneReference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogicalLane_PhysicalLaneReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.physical_lane_id_;
}

void LogicalLane_PhysicalLaneReference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogicalLane_PhysicalLaneReference::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LogicalLane.PhysicalLaneReference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.physical_lane_id_ != nullptr);
    _impl_.physical_lane_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.start_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.end_s_) -
        reinterpret_cast<char*>(&_impl_.start_s_)) + sizeof(_impl_.end_s_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicalLane_PhysicalLaneReference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Identifier physical_lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_physical_lane_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double start_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_start_s(&has_bits);
          _impl_.start_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double end_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_end_s(&has_bits);
          _impl_.end_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogicalLane_PhysicalLaneReference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LogicalLane.PhysicalLaneReference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.Identifier physical_lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::physical_lane_id(this),
        _Internal::physical_lane_id(this).GetCachedSize(), target, stream);
  }

  // optional double start_s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_start_s(), target);
  }

  // optional double end_s = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_end_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LogicalLane.PhysicalLaneReference)
  return target;
}

size_t LogicalLane_PhysicalLaneReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LogicalLane.PhysicalLaneReference)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .osi3.Identifier physical_lane_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.physical_lane_id_);
    }

    // optional double start_s = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double end_s = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogicalLane_PhysicalLaneReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogicalLane_PhysicalLaneReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogicalLane_PhysicalLaneReference::GetClassData() const { return &_class_data_; }


void LogicalLane_PhysicalLaneReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogicalLane_PhysicalLaneReference*>(&to_msg);
  auto& from = static_cast<const LogicalLane_PhysicalLaneReference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.LogicalLane.PhysicalLaneReference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_physical_lane_id()->::osi3::Identifier::MergeFrom(
          from._internal_physical_lane_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.start_s_ = from._impl_.start_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.end_s_ = from._impl_.end_s_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogicalLane_PhysicalLaneReference::CopyFrom(const LogicalLane_PhysicalLaneReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LogicalLane.PhysicalLaneReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalLane_PhysicalLaneReference::IsInitialized() const {
  return true;
}

void LogicalLane_PhysicalLaneReference::InternalSwap(LogicalLane_PhysicalLaneReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogicalLane_PhysicalLaneReference, _impl_.end_s_)
      + sizeof(LogicalLane_PhysicalLaneReference::_impl_.end_s_)
      - PROTOBUF_FIELD_OFFSET(LogicalLane_PhysicalLaneReference, _impl_.physical_lane_id_)>(
          reinterpret_cast<char*>(&_impl_.physical_lane_id_),
          reinterpret_cast<char*>(&other->_impl_.physical_lane_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalLane_PhysicalLaneReference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5flogicallane_2eproto_getter, &descriptor_table_osi_5flogicallane_2eproto_once,
      file_level_metadata_osi_5flogicallane_2eproto[2]);
}

// ===================================================================

class LogicalLane_LaneConnection::_Internal {
 public:
  using HasBits = decltype(std::declval<LogicalLane_LaneConnection>()._impl_._has_bits_);
  static const ::osi3::Identifier& other_lane_id(const LogicalLane_LaneConnection* msg);
  static void set_has_other_lane_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_at_begin_of_other_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::osi3::Identifier&
LogicalLane_LaneConnection::_Internal::other_lane_id(const LogicalLane_LaneConnection* msg) {
  return *msg->_impl_.other_lane_id_;
}
void LogicalLane_LaneConnection::clear_other_lane_id() {
  if (_impl_.other_lane_id_ != nullptr) _impl_.other_lane_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LogicalLane_LaneConnection::LogicalLane_LaneConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.LogicalLane.LaneConnection)
}
LogicalLane_LaneConnection::LogicalLane_LaneConnection(const LogicalLane_LaneConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogicalLane_LaneConnection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.other_lane_id_){nullptr}
    , decltype(_impl_.at_begin_of_other_lane_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_other_lane_id()) {
    _this->_impl_.other_lane_id_ = new ::osi3::Identifier(*from._impl_.other_lane_id_);
  }
  _this->_impl_.at_begin_of_other_lane_ = from._impl_.at_begin_of_other_lane_;
  // @@protoc_insertion_point(copy_constructor:osi3.LogicalLane.LaneConnection)
}

inline void LogicalLane_LaneConnection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.other_lane_id_){nullptr}
    , decltype(_impl_.at_begin_of_other_lane_){false}
  };
}

LogicalLane_LaneConnection::~LogicalLane_LaneConnection() {
  // @@protoc_insertion_point(destructor:osi3.LogicalLane.LaneConnection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogicalLane_LaneConnection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.other_lane_id_;
}

void LogicalLane_LaneConnection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogicalLane_LaneConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LogicalLane.LaneConnection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.other_lane_id_ != nullptr);
    _impl_.other_lane_id_->Clear();
  }
  _impl_.at_begin_of_other_lane_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicalLane_LaneConnection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Identifier other_lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_other_lane_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool at_begin_of_other_lane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_at_begin_of_other_lane(&has_bits);
          _impl_.at_begin_of_other_lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogicalLane_LaneConnection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LogicalLane.LaneConnection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.Identifier other_lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::other_lane_id(this),
        _Internal::other_lane_id(this).GetCachedSize(), target, stream);
  }

  // optional bool at_begin_of_other_lane = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_at_begin_of_other_lane(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LogicalLane.LaneConnection)
  return target;
}

size_t LogicalLane_LaneConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LogicalLane.LaneConnection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .osi3.Identifier other_lane_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.other_lane_id_);
    }

    // optional bool at_begin_of_other_lane = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogicalLane_LaneConnection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogicalLane_LaneConnection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogicalLane_LaneConnection::GetClassData() const { return &_class_data_; }


void LogicalLane_LaneConnection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogicalLane_LaneConnection*>(&to_msg);
  auto& from = static_cast<const LogicalLane_LaneConnection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.LogicalLane.LaneConnection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_other_lane_id()->::osi3::Identifier::MergeFrom(
          from._internal_other_lane_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.at_begin_of_other_lane_ = from._impl_.at_begin_of_other_lane_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogicalLane_LaneConnection::CopyFrom(const LogicalLane_LaneConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LogicalLane.LaneConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalLane_LaneConnection::IsInitialized() const {
  return true;
}

void LogicalLane_LaneConnection::InternalSwap(LogicalLane_LaneConnection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogicalLane_LaneConnection, _impl_.at_begin_of_other_lane_)
      + sizeof(LogicalLane_LaneConnection::_impl_.at_begin_of_other_lane_)
      - PROTOBUF_FIELD_OFFSET(LogicalLane_LaneConnection, _impl_.other_lane_id_)>(
          reinterpret_cast<char*>(&_impl_.other_lane_id_),
          reinterpret_cast<char*>(&other->_impl_.other_lane_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalLane_LaneConnection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5flogicallane_2eproto_getter, &descriptor_table_osi_5flogicallane_2eproto_once,
      file_level_metadata_osi_5flogicallane_2eproto[3]);
}

// ===================================================================

class LogicalLane_LaneRelation::_Internal {
 public:
  using HasBits = decltype(std::declval<LogicalLane_LaneRelation>()._impl_._has_bits_);
  static const ::osi3::Identifier& other_lane_id(const LogicalLane_LaneRelation* msg);
  static void set_has_other_lane_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_start_s_other(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_end_s_other(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::osi3::Identifier&
LogicalLane_LaneRelation::_Internal::other_lane_id(const LogicalLane_LaneRelation* msg) {
  return *msg->_impl_.other_lane_id_;
}
void LogicalLane_LaneRelation::clear_other_lane_id() {
  if (_impl_.other_lane_id_ != nullptr) _impl_.other_lane_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LogicalLane_LaneRelation::LogicalLane_LaneRelation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.LogicalLane.LaneRelation)
}
LogicalLane_LaneRelation::LogicalLane_LaneRelation(const LogicalLane_LaneRelation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogicalLane_LaneRelation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.other_lane_id_){nullptr}
    , decltype(_impl_.start_s_){}
    , decltype(_impl_.end_s_){}
    , decltype(_impl_.start_s_other_){}
    , decltype(_impl_.end_s_other_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_other_lane_id()) {
    _this->_impl_.other_lane_id_ = new ::osi3::Identifier(*from._impl_.other_lane_id_);
  }
  ::memcpy(&_impl_.start_s_, &from._impl_.start_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_s_other_) -
    reinterpret_cast<char*>(&_impl_.start_s_)) + sizeof(_impl_.end_s_other_));
  // @@protoc_insertion_point(copy_constructor:osi3.LogicalLane.LaneRelation)
}

inline void LogicalLane_LaneRelation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.other_lane_id_){nullptr}
    , decltype(_impl_.start_s_){0}
    , decltype(_impl_.end_s_){0}
    , decltype(_impl_.start_s_other_){0}
    , decltype(_impl_.end_s_other_){0}
  };
}

LogicalLane_LaneRelation::~LogicalLane_LaneRelation() {
  // @@protoc_insertion_point(destructor:osi3.LogicalLane.LaneRelation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogicalLane_LaneRelation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.other_lane_id_;
}

void LogicalLane_LaneRelation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogicalLane_LaneRelation::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LogicalLane.LaneRelation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.other_lane_id_ != nullptr);
    _impl_.other_lane_id_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.start_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.end_s_other_) -
        reinterpret_cast<char*>(&_impl_.start_s_)) + sizeof(_impl_.end_s_other_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicalLane_LaneRelation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Identifier other_lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_other_lane_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double start_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_start_s(&has_bits);
          _impl_.start_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double end_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_end_s(&has_bits);
          _impl_.end_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double start_s_other = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_start_s_other(&has_bits);
          _impl_.start_s_other_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double end_s_other = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_end_s_other(&has_bits);
          _impl_.end_s_other_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogicalLane_LaneRelation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LogicalLane.LaneRelation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.Identifier other_lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::other_lane_id(this),
        _Internal::other_lane_id(this).GetCachedSize(), target, stream);
  }

  // optional double start_s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_start_s(), target);
  }

  // optional double end_s = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_end_s(), target);
  }

  // optional double start_s_other = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_start_s_other(), target);
  }

  // optional double end_s_other = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_end_s_other(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LogicalLane.LaneRelation)
  return target;
}

size_t LogicalLane_LaneRelation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LogicalLane.LaneRelation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .osi3.Identifier other_lane_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.other_lane_id_);
    }

    // optional double start_s = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double end_s = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double start_s_other = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double end_s_other = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogicalLane_LaneRelation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogicalLane_LaneRelation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogicalLane_LaneRelation::GetClassData() const { return &_class_data_; }


void LogicalLane_LaneRelation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogicalLane_LaneRelation*>(&to_msg);
  auto& from = static_cast<const LogicalLane_LaneRelation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.LogicalLane.LaneRelation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_other_lane_id()->::osi3::Identifier::MergeFrom(
          from._internal_other_lane_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.start_s_ = from._impl_.start_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.end_s_ = from._impl_.end_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.start_s_other_ = from._impl_.start_s_other_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.end_s_other_ = from._impl_.end_s_other_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogicalLane_LaneRelation::CopyFrom(const LogicalLane_LaneRelation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LogicalLane.LaneRelation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalLane_LaneRelation::IsInitialized() const {
  return true;
}

void LogicalLane_LaneRelation::InternalSwap(LogicalLane_LaneRelation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogicalLane_LaneRelation, _impl_.end_s_other_)
      + sizeof(LogicalLane_LaneRelation::_impl_.end_s_other_)
      - PROTOBUF_FIELD_OFFSET(LogicalLane_LaneRelation, _impl_.other_lane_id_)>(
          reinterpret_cast<char*>(&_impl_.other_lane_id_),
          reinterpret_cast<char*>(&other->_impl_.other_lane_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalLane_LaneRelation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5flogicallane_2eproto_getter, &descriptor_table_osi_5flogicallane_2eproto_once,
      file_level_metadata_osi_5flogicallane_2eproto[4]);
}

// ===================================================================

class LogicalLane::_Internal {
 public:
  using HasBits = decltype(std::declval<LogicalLane>()._impl_._has_bits_);
  static const ::osi3::Identifier& id(const LogicalLane* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::osi3::Identifier& reference_line_id(const LogicalLane* msg);
  static void set_has_reference_line_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_start_s(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_end_s(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_move_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_street_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osi3::Identifier&
LogicalLane::_Internal::id(const LogicalLane* msg) {
  return *msg->_impl_.id_;
}
const ::osi3::Identifier&
LogicalLane::_Internal::reference_line_id(const LogicalLane* msg) {
  return *msg->_impl_.reference_line_id_;
}
void LogicalLane::clear_id() {
  if (_impl_.id_ != nullptr) _impl_.id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void LogicalLane::clear_source_reference() {
  _impl_.source_reference_.Clear();
}
void LogicalLane::clear_reference_line_id() {
  if (_impl_.reference_line_id_ != nullptr) _impl_.reference_line_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void LogicalLane::clear_right_boundary_id() {
  _impl_.right_boundary_id_.Clear();
}
void LogicalLane::clear_left_boundary_id() {
  _impl_.left_boundary_id_.Clear();
}
LogicalLane::LogicalLane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.LogicalLane)
}
LogicalLane::LogicalLane(const LogicalLane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogicalLane* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_reference_){from._impl_.source_reference_}
    , decltype(_impl_.physical_lane_reference_){from._impl_.physical_lane_reference_}
    , decltype(_impl_.right_adjacent_lane_){from._impl_.right_adjacent_lane_}
    , decltype(_impl_.left_adjacent_lane_){from._impl_.left_adjacent_lane_}
    , decltype(_impl_.overlapping_lane_){from._impl_.overlapping_lane_}
    , decltype(_impl_.right_boundary_id_){from._impl_.right_boundary_id_}
    , decltype(_impl_.left_boundary_id_){from._impl_.left_boundary_id_}
    , decltype(_impl_.predecessor_lane_){from._impl_.predecessor_lane_}
    , decltype(_impl_.successor_lane_){from._impl_.successor_lane_}
    , decltype(_impl_.street_name_){}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.reference_line_id_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.move_direction_){}
    , decltype(_impl_.start_s_){}
    , decltype(_impl_.end_s_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.street_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.street_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_street_name()) {
    _this->_impl_.street_name_.Set(from._internal_street_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    _this->_impl_.id_ = new ::osi3::Identifier(*from._impl_.id_);
  }
  if (from._internal_has_reference_line_id()) {
    _this->_impl_.reference_line_id_ = new ::osi3::Identifier(*from._impl_.reference_line_id_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_s_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.end_s_));
  // @@protoc_insertion_point(copy_constructor:osi3.LogicalLane)
}

inline void LogicalLane::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_reference_){arena}
    , decltype(_impl_.physical_lane_reference_){arena}
    , decltype(_impl_.right_adjacent_lane_){arena}
    , decltype(_impl_.left_adjacent_lane_){arena}
    , decltype(_impl_.overlapping_lane_){arena}
    , decltype(_impl_.right_boundary_id_){arena}
    , decltype(_impl_.left_boundary_id_){arena}
    , decltype(_impl_.predecessor_lane_){arena}
    , decltype(_impl_.successor_lane_){arena}
    , decltype(_impl_.street_name_){}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.reference_line_id_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.move_direction_){0}
    , decltype(_impl_.start_s_){0}
    , decltype(_impl_.end_s_){0}
  };
  _impl_.street_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.street_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogicalLane::~LogicalLane() {
  // @@protoc_insertion_point(destructor:osi3.LogicalLane)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogicalLane::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.source_reference_.~RepeatedPtrField();
  _impl_.physical_lane_reference_.~RepeatedPtrField();
  _impl_.right_adjacent_lane_.~RepeatedPtrField();
  _impl_.left_adjacent_lane_.~RepeatedPtrField();
  _impl_.overlapping_lane_.~RepeatedPtrField();
  _impl_.right_boundary_id_.~RepeatedPtrField();
  _impl_.left_boundary_id_.~RepeatedPtrField();
  _impl_.predecessor_lane_.~RepeatedPtrField();
  _impl_.successor_lane_.~RepeatedPtrField();
  _impl_.street_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.id_;
  if (this != internal_default_instance()) delete _impl_.reference_line_id_;
}

void LogicalLane::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogicalLane::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LogicalLane)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.source_reference_.Clear();
  _impl_.physical_lane_reference_.Clear();
  _impl_.right_adjacent_lane_.Clear();
  _impl_.left_adjacent_lane_.Clear();
  _impl_.overlapping_lane_.Clear();
  _impl_.right_boundary_id_.Clear();
  _impl_.left_boundary_id_.Clear();
  _impl_.predecessor_lane_.Clear();
  _impl_.successor_lane_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.street_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.id_ != nullptr);
      _impl_.id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.reference_line_id_ != nullptr);
      _impl_.reference_line_id_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.end_s_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.end_s_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicalLane::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Identifier id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.LogicalLane.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::LogicalLane_Type_IsValid(val))) {
            _internal_set_type(static_cast<::osi3::LogicalLane_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.ExternalReference source_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_source_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.LogicalLane.PhysicalLaneReference physical_lane_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_physical_lane_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Identifier reference_line_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference_line_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double start_s = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_start_s(&has_bits);
          _impl_.start_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double end_s = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_end_s(&has_bits);
          _impl_.end_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.LogicalLane.MoveDirection move_direction = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::LogicalLane_MoveDirection_IsValid(val))) {
            _internal_set_move_direction(static_cast<::osi3::LogicalLane_MoveDirection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.LogicalLane.LaneRelation right_adjacent_lane = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_right_adjacent_lane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.LogicalLane.LaneRelation left_adjacent_lane = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_left_adjacent_lane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.LogicalLane.LaneRelation overlapping_lane = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_overlapping_lane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Identifier right_boundary_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_right_boundary_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Identifier left_boundary_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_left_boundary_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.LogicalLane.LaneConnection predecessor_lane = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_predecessor_lane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.LogicalLane.LaneConnection successor_lane = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_successor_lane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string street_name = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_street_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "osi3.LogicalLane.street_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogicalLane::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LogicalLane)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.Identifier id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.LogicalLane.Type type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // repeated .osi3.ExternalReference source_reference = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_source_reference_size()); i < n; i++) {
    const auto& repfield = this->_internal_source_reference(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .osi3.LogicalLane.PhysicalLaneReference physical_lane_reference = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_physical_lane_reference_size()); i < n; i++) {
    const auto& repfield = this->_internal_physical_lane_reference(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .osi3.Identifier reference_line_id = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::reference_line_id(this),
        _Internal::reference_line_id(this).GetCachedSize(), target, stream);
  }

  // optional double start_s = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_start_s(), target);
  }

  // optional double end_s = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_end_s(), target);
  }

  // optional .osi3.LogicalLane.MoveDirection move_direction = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_move_direction(), target);
  }

  // repeated .osi3.LogicalLane.LaneRelation right_adjacent_lane = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_right_adjacent_lane_size()); i < n; i++) {
    const auto& repfield = this->_internal_right_adjacent_lane(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .osi3.LogicalLane.LaneRelation left_adjacent_lane = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_left_adjacent_lane_size()); i < n; i++) {
    const auto& repfield = this->_internal_left_adjacent_lane(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .osi3.LogicalLane.LaneRelation overlapping_lane = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_overlapping_lane_size()); i < n; i++) {
    const auto& repfield = this->_internal_overlapping_lane(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .osi3.Identifier right_boundary_id = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_right_boundary_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_right_boundary_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .osi3.Identifier left_boundary_id = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_left_boundary_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_left_boundary_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .osi3.LogicalLane.LaneConnection predecessor_lane = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_predecessor_lane_size()); i < n; i++) {
    const auto& repfield = this->_internal_predecessor_lane(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .osi3.LogicalLane.LaneConnection successor_lane = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_successor_lane_size()); i < n; i++) {
    const auto& repfield = this->_internal_successor_lane(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string street_name = 16;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_street_name().data(), static_cast<int>(this->_internal_street_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.LogicalLane.street_name");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_street_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LogicalLane)
  return target;
}

size_t LogicalLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LogicalLane)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.ExternalReference source_reference = 3;
  total_size += 1UL * this->_internal_source_reference_size();
  for (const auto& msg : this->_impl_.source_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.LogicalLane.PhysicalLaneReference physical_lane_reference = 4;
  total_size += 1UL * this->_internal_physical_lane_reference_size();
  for (const auto& msg : this->_impl_.physical_lane_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.LogicalLane.LaneRelation right_adjacent_lane = 9;
  total_size += 1UL * this->_internal_right_adjacent_lane_size();
  for (const auto& msg : this->_impl_.right_adjacent_lane_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.LogicalLane.LaneRelation left_adjacent_lane = 10;
  total_size += 1UL * this->_internal_left_adjacent_lane_size();
  for (const auto& msg : this->_impl_.left_adjacent_lane_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.LogicalLane.LaneRelation overlapping_lane = 11;
  total_size += 1UL * this->_internal_overlapping_lane_size();
  for (const auto& msg : this->_impl_.overlapping_lane_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.Identifier right_boundary_id = 12;
  total_size += 1UL * this->_internal_right_boundary_id_size();
  for (const auto& msg : this->_impl_.right_boundary_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.Identifier left_boundary_id = 13;
  total_size += 1UL * this->_internal_left_boundary_id_size();
  for (const auto& msg : this->_impl_.left_boundary_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.LogicalLane.LaneConnection predecessor_lane = 14;
  total_size += 1UL * this->_internal_predecessor_lane_size();
  for (const auto& msg : this->_impl_.predecessor_lane_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.LogicalLane.LaneConnection successor_lane = 15;
  total_size += 1UL * this->_internal_successor_lane_size();
  for (const auto& msg : this->_impl_.successor_lane_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string street_name = 16;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_street_name());
    }

    // optional .osi3.Identifier id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.id_);
    }

    // optional .osi3.Identifier reference_line_id = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reference_line_id_);
    }

    // optional .osi3.LogicalLane.Type type = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .osi3.LogicalLane.MoveDirection move_direction = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_move_direction());
    }

    // optional double start_s = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double end_s = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogicalLane::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogicalLane::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogicalLane::GetClassData() const { return &_class_data_; }


void LogicalLane::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogicalLane*>(&to_msg);
  auto& from = static_cast<const LogicalLane&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.LogicalLane)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.source_reference_.MergeFrom(from._impl_.source_reference_);
  _this->_impl_.physical_lane_reference_.MergeFrom(from._impl_.physical_lane_reference_);
  _this->_impl_.right_adjacent_lane_.MergeFrom(from._impl_.right_adjacent_lane_);
  _this->_impl_.left_adjacent_lane_.MergeFrom(from._impl_.left_adjacent_lane_);
  _this->_impl_.overlapping_lane_.MergeFrom(from._impl_.overlapping_lane_);
  _this->_impl_.right_boundary_id_.MergeFrom(from._impl_.right_boundary_id_);
  _this->_impl_.left_boundary_id_.MergeFrom(from._impl_.left_boundary_id_);
  _this->_impl_.predecessor_lane_.MergeFrom(from._impl_.predecessor_lane_);
  _this->_impl_.successor_lane_.MergeFrom(from._impl_.successor_lane_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_street_name(from._internal_street_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_id()->::osi3::Identifier::MergeFrom(
          from._internal_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_reference_line_id()->::osi3::Identifier::MergeFrom(
          from._internal_reference_line_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.move_direction_ = from._impl_.move_direction_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.start_s_ = from._impl_.start_s_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.end_s_ = from._impl_.end_s_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogicalLane::CopyFrom(const LogicalLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LogicalLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalLane::IsInitialized() const {
  return true;
}

void LogicalLane::InternalSwap(LogicalLane* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.source_reference_.InternalSwap(&other->_impl_.source_reference_);
  _impl_.physical_lane_reference_.InternalSwap(&other->_impl_.physical_lane_reference_);
  _impl_.right_adjacent_lane_.InternalSwap(&other->_impl_.right_adjacent_lane_);
  _impl_.left_adjacent_lane_.InternalSwap(&other->_impl_.left_adjacent_lane_);
  _impl_.overlapping_lane_.InternalSwap(&other->_impl_.overlapping_lane_);
  _impl_.right_boundary_id_.InternalSwap(&other->_impl_.right_boundary_id_);
  _impl_.left_boundary_id_.InternalSwap(&other->_impl_.left_boundary_id_);
  _impl_.predecessor_lane_.InternalSwap(&other->_impl_.predecessor_lane_);
  _impl_.successor_lane_.InternalSwap(&other->_impl_.successor_lane_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.street_name_, lhs_arena,
      &other->_impl_.street_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogicalLane, _impl_.end_s_)
      + sizeof(LogicalLane::_impl_.end_s_)
      - PROTOBUF_FIELD_OFFSET(LogicalLane, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalLane::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5flogicallane_2eproto_getter, &descriptor_table_osi_5flogicallane_2eproto_once,
      file_level_metadata_osi_5flogicallane_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::LogicalLaneBoundary_LogicalBoundaryPoint*
Arena::CreateMaybeMessage< ::osi3::LogicalLaneBoundary_LogicalBoundaryPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::LogicalLaneBoundary_LogicalBoundaryPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::LogicalLaneBoundary*
Arena::CreateMaybeMessage< ::osi3::LogicalLaneBoundary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::LogicalLaneBoundary >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::LogicalLane_PhysicalLaneReference*
Arena::CreateMaybeMessage< ::osi3::LogicalLane_PhysicalLaneReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::LogicalLane_PhysicalLaneReference >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::LogicalLane_LaneConnection*
Arena::CreateMaybeMessage< ::osi3::LogicalLane_LaneConnection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::LogicalLane_LaneConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::LogicalLane_LaneRelation*
Arena::CreateMaybeMessage< ::osi3::LogicalLane_LaneRelation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::LogicalLane_LaneRelation >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::LogicalLane*
Arena::CreateMaybeMessage< ::osi3::LogicalLane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::LogicalLane >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

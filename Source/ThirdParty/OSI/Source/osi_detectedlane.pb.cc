// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_detectedlane.proto

#include "osi_detectedlane.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace osi3 {
PROTOBUF_CONSTEXPR DetectedLane_CandidateLane::DetectedLane_CandidateLane(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.classification_)*/nullptr
  , /*decltype(_impl_.probability_)*/0} {}
struct DetectedLane_CandidateLaneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetectedLane_CandidateLaneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetectedLane_CandidateLaneDefaultTypeInternal() {}
  union {
    DetectedLane_CandidateLane _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetectedLane_CandidateLaneDefaultTypeInternal _DetectedLane_CandidateLane_default_instance_;
PROTOBUF_CONSTEXPR DetectedLane::DetectedLane(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.candidate_)*/{}
  , /*decltype(_impl_.header_)*/nullptr} {}
struct DetectedLaneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetectedLaneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetectedLaneDefaultTypeInternal() {}
  union {
    DetectedLane _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetectedLaneDefaultTypeInternal _DetectedLane_default_instance_;
PROTOBUF_CONSTEXPR DetectedLaneBoundary_CandidateLaneBoundary::DetectedLaneBoundary_CandidateLaneBoundary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.classification_)*/nullptr
  , /*decltype(_impl_.probability_)*/0} {}
struct DetectedLaneBoundary_CandidateLaneBoundaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetectedLaneBoundary_CandidateLaneBoundaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetectedLaneBoundary_CandidateLaneBoundaryDefaultTypeInternal() {}
  union {
    DetectedLaneBoundary_CandidateLaneBoundary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetectedLaneBoundary_CandidateLaneBoundaryDefaultTypeInternal _DetectedLaneBoundary_CandidateLaneBoundary_default_instance_;
PROTOBUF_CONSTEXPR DetectedLaneBoundary::DetectedLaneBoundary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.candidate_)*/{}
  , /*decltype(_impl_.boundary_line_)*/{}
  , /*decltype(_impl_.boundary_line_rmse_)*/{}
  , /*decltype(_impl_.boundary_line_confidences_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.color_description_)*/nullptr} {}
struct DetectedLaneBoundaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetectedLaneBoundaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetectedLaneBoundaryDefaultTypeInternal() {}
  union {
    DetectedLaneBoundary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetectedLaneBoundaryDefaultTypeInternal _DetectedLaneBoundary_default_instance_;
}  // namespace osi3
static ::_pb::Metadata file_level_metadata_osi_5fdetectedlane_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_osi_5fdetectedlane_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_osi_5fdetectedlane_2eproto = nullptr;

const uint32_t TableStruct_osi_5fdetectedlane_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLane_CandidateLane, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLane_CandidateLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLane_CandidateLane, _impl_.probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLane_CandidateLane, _impl_.classification_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLane, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLane, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLane, _impl_.candidate_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLaneBoundary_CandidateLaneBoundary, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLaneBoundary_CandidateLaneBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLaneBoundary_CandidateLaneBoundary, _impl_.probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLaneBoundary_CandidateLaneBoundary, _impl_.classification_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLaneBoundary, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLaneBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLaneBoundary, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLaneBoundary, _impl_.candidate_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLaneBoundary, _impl_.boundary_line_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLaneBoundary, _impl_.boundary_line_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLaneBoundary, _impl_.boundary_line_confidences_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLaneBoundary, _impl_.color_description_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::osi3::DetectedLane_CandidateLane)},
  { 10, 18, -1, sizeof(::osi3::DetectedLane)},
  { 20, 28, -1, sizeof(::osi3::DetectedLaneBoundary_CandidateLaneBoundary)},
  { 30, 42, -1, sizeof(::osi3::DetectedLaneBoundary)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::osi3::_DetectedLane_CandidateLane_default_instance_._instance,
  &::osi3::_DetectedLane_default_instance_._instance,
  &::osi3::_DetectedLaneBoundary_CandidateLaneBoundary_default_instance_._instance,
  &::osi3::_DetectedLaneBoundary_default_instance_._instance,
};

const char descriptor_table_protodef_osi_5fdetectedlane_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026osi_detectedlane.proto\022\004osi3\032\016osi_lane"
  ".proto\032\030osi_detectedobject.proto\032\020osi_co"
  "mmon.proto\"\306\001\n\014DetectedLane\022(\n\006header\030\001 "
  "\001(\0132\030.osi3.DetectedItemHeader\0223\n\tcandida"
  "te\030\002 \003(\0132 .osi3.DetectedLane.CandidateLa"
  "ne\032W\n\rCandidateLane\022\023\n\013probability\030\001 \001(\001"
  "\0221\n\016classification\030\002 \001(\0132\031.osi3.Lane.Cla"
  "ssification\"\273\003\n\024DetectedLaneBoundary\022(\n\006"
  "header\030\001 \001(\0132\030.osi3.DetectedItemHeader\022C"
  "\n\tcandidate\030\002 \003(\01320.osi3.DetectedLaneBou"
  "ndary.CandidateLaneBoundary\0227\n\rboundary_"
  "line\030\003 \003(\0132 .osi3.LaneBoundary.BoundaryP"
  "oint\022<\n\022boundary_line_rmse\030\004 \003(\0132 .osi3."
  "LaneBoundary.BoundaryPoint\022!\n\031boundary_l"
  "ine_confidences\030\005 \003(\001\0221\n\021color_descripti"
  "on\030\006 \001(\0132\026.osi3.ColorDescription\032g\n\025Cand"
  "idateLaneBoundary\022\023\n\013probability\030\001 \001(\001\0229"
  "\n\016classification\030\002 \001(\0132!.osi3.LaneBounda"
  "ry.ClassificationB\002H\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_osi_5fdetectedlane_2eproto_deps[3] = {
  &::descriptor_table_osi_5fcommon_2eproto,
  &::descriptor_table_osi_5fdetectedobject_2eproto,
  &::descriptor_table_osi_5flane_2eproto,
};
static ::_pbi::once_flag descriptor_table_osi_5fdetectedlane_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_osi_5fdetectedlane_2eproto = {
    false, false, 741, descriptor_table_protodef_osi_5fdetectedlane_2eproto,
    "osi_detectedlane.proto",
    &descriptor_table_osi_5fdetectedlane_2eproto_once, descriptor_table_osi_5fdetectedlane_2eproto_deps, 3, 4,
    schemas, file_default_instances, TableStruct_osi_5fdetectedlane_2eproto::offsets,
    file_level_metadata_osi_5fdetectedlane_2eproto, file_level_enum_descriptors_osi_5fdetectedlane_2eproto,
    file_level_service_descriptors_osi_5fdetectedlane_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_osi_5fdetectedlane_2eproto_getter() {
  return &descriptor_table_osi_5fdetectedlane_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_osi_5fdetectedlane_2eproto(&descriptor_table_osi_5fdetectedlane_2eproto);
namespace osi3 {

// ===================================================================

class DetectedLane_CandidateLane::_Internal {
 public:
  using HasBits = decltype(std::declval<DetectedLane_CandidateLane>()._impl_._has_bits_);
  static void set_has_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::Lane_Classification& classification(const DetectedLane_CandidateLane* msg);
  static void set_has_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osi3::Lane_Classification&
DetectedLane_CandidateLane::_Internal::classification(const DetectedLane_CandidateLane* msg) {
  return *msg->_impl_.classification_;
}
void DetectedLane_CandidateLane::clear_classification() {
  if (_impl_.classification_ != nullptr) _impl_.classification_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DetectedLane_CandidateLane::DetectedLane_CandidateLane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.DetectedLane.CandidateLane)
}
DetectedLane_CandidateLane::DetectedLane_CandidateLane(const DetectedLane_CandidateLane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DetectedLane_CandidateLane* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.classification_){nullptr}
    , decltype(_impl_.probability_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_classification()) {
    _this->_impl_.classification_ = new ::osi3::Lane_Classification(*from._impl_.classification_);
  }
  _this->_impl_.probability_ = from._impl_.probability_;
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedLane.CandidateLane)
}

inline void DetectedLane_CandidateLane::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.classification_){nullptr}
    , decltype(_impl_.probability_){0}
  };
}

DetectedLane_CandidateLane::~DetectedLane_CandidateLane() {
  // @@protoc_insertion_point(destructor:osi3.DetectedLane.CandidateLane)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DetectedLane_CandidateLane::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.classification_;
}

void DetectedLane_CandidateLane::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DetectedLane_CandidateLane::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedLane.CandidateLane)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.classification_ != nullptr);
    _impl_.classification_->Clear();
  }
  _impl_.probability_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectedLane_CandidateLane::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_probability(&has_bits);
          _impl_.probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Lane.Classification classification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_classification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DetectedLane_CandidateLane::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedLane.CandidateLane)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_probability(), target);
  }

  // optional .osi3.Lane.Classification classification = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::classification(this),
        _Internal::classification(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedLane.CandidateLane)
  return target;
}

size_t DetectedLane_CandidateLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedLane.CandidateLane)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .osi3.Lane.Classification classification = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.classification_);
    }

    // optional double probability = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectedLane_CandidateLane::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DetectedLane_CandidateLane::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectedLane_CandidateLane::GetClassData() const { return &_class_data_; }


void DetectedLane_CandidateLane::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DetectedLane_CandidateLane*>(&to_msg);
  auto& from = static_cast<const DetectedLane_CandidateLane&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedLane.CandidateLane)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_classification()->::osi3::Lane_Classification::MergeFrom(
          from._internal_classification());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.probability_ = from._impl_.probability_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectedLane_CandidateLane::CopyFrom(const DetectedLane_CandidateLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedLane.CandidateLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedLane_CandidateLane::IsInitialized() const {
  return true;
}

void DetectedLane_CandidateLane::InternalSwap(DetectedLane_CandidateLane* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectedLane_CandidateLane, _impl_.probability_)
      + sizeof(DetectedLane_CandidateLane::_impl_.probability_)
      - PROTOBUF_FIELD_OFFSET(DetectedLane_CandidateLane, _impl_.classification_)>(
          reinterpret_cast<char*>(&_impl_.classification_),
          reinterpret_cast<char*>(&other->_impl_.classification_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedLane_CandidateLane::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fdetectedlane_2eproto_getter, &descriptor_table_osi_5fdetectedlane_2eproto_once,
      file_level_metadata_osi_5fdetectedlane_2eproto[0]);
}

// ===================================================================

class DetectedLane::_Internal {
 public:
  using HasBits = decltype(std::declval<DetectedLane>()._impl_._has_bits_);
  static const ::osi3::DetectedItemHeader& header(const DetectedLane* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osi3::DetectedItemHeader&
DetectedLane::_Internal::header(const DetectedLane* msg) {
  return *msg->_impl_.header_;
}
void DetectedLane::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DetectedLane::DetectedLane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.DetectedLane)
}
DetectedLane::DetectedLane(const DetectedLane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DetectedLane* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.candidate_){from._impl_.candidate_}
    , decltype(_impl_.header_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::osi3::DetectedItemHeader(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedLane)
}

inline void DetectedLane::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.candidate_){arena}
    , decltype(_impl_.header_){nullptr}
  };
}

DetectedLane::~DetectedLane() {
  // @@protoc_insertion_point(destructor:osi3.DetectedLane)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DetectedLane::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.candidate_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void DetectedLane::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DetectedLane::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedLane)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.candidate_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectedLane::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.DetectedItemHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.DetectedLane.CandidateLane candidate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candidate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DetectedLane::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedLane)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.DetectedItemHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated .osi3.DetectedLane.CandidateLane candidate = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_candidate_size()); i < n; i++) {
    const auto& repfield = this->_internal_candidate(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedLane)
  return target;
}

size_t DetectedLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedLane)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.DetectedLane.CandidateLane candidate = 2;
  total_size += 1UL * this->_internal_candidate_size();
  for (const auto& msg : this->_impl_.candidate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .osi3.DetectedItemHeader header = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectedLane::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DetectedLane::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectedLane::GetClassData() const { return &_class_data_; }


void DetectedLane::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DetectedLane*>(&to_msg);
  auto& from = static_cast<const DetectedLane&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedLane)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.candidate_.MergeFrom(from._impl_.candidate_);
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::osi3::DetectedItemHeader::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectedLane::CopyFrom(const DetectedLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedLane::IsInitialized() const {
  return true;
}

void DetectedLane::InternalSwap(DetectedLane* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.candidate_.InternalSwap(&other->_impl_.candidate_);
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedLane::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fdetectedlane_2eproto_getter, &descriptor_table_osi_5fdetectedlane_2eproto_once,
      file_level_metadata_osi_5fdetectedlane_2eproto[1]);
}

// ===================================================================

class DetectedLaneBoundary_CandidateLaneBoundary::_Internal {
 public:
  using HasBits = decltype(std::declval<DetectedLaneBoundary_CandidateLaneBoundary>()._impl_._has_bits_);
  static void set_has_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::LaneBoundary_Classification& classification(const DetectedLaneBoundary_CandidateLaneBoundary* msg);
  static void set_has_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osi3::LaneBoundary_Classification&
DetectedLaneBoundary_CandidateLaneBoundary::_Internal::classification(const DetectedLaneBoundary_CandidateLaneBoundary* msg) {
  return *msg->_impl_.classification_;
}
void DetectedLaneBoundary_CandidateLaneBoundary::clear_classification() {
  if (_impl_.classification_ != nullptr) _impl_.classification_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DetectedLaneBoundary_CandidateLaneBoundary::DetectedLaneBoundary_CandidateLaneBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
}
DetectedLaneBoundary_CandidateLaneBoundary::DetectedLaneBoundary_CandidateLaneBoundary(const DetectedLaneBoundary_CandidateLaneBoundary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DetectedLaneBoundary_CandidateLaneBoundary* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.classification_){nullptr}
    , decltype(_impl_.probability_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_classification()) {
    _this->_impl_.classification_ = new ::osi3::LaneBoundary_Classification(*from._impl_.classification_);
  }
  _this->_impl_.probability_ = from._impl_.probability_;
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
}

inline void DetectedLaneBoundary_CandidateLaneBoundary::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.classification_){nullptr}
    , decltype(_impl_.probability_){0}
  };
}

DetectedLaneBoundary_CandidateLaneBoundary::~DetectedLaneBoundary_CandidateLaneBoundary() {
  // @@protoc_insertion_point(destructor:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DetectedLaneBoundary_CandidateLaneBoundary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.classification_;
}

void DetectedLaneBoundary_CandidateLaneBoundary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DetectedLaneBoundary_CandidateLaneBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.classification_ != nullptr);
    _impl_.classification_->Clear();
  }
  _impl_.probability_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectedLaneBoundary_CandidateLaneBoundary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_probability(&has_bits);
          _impl_.probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.LaneBoundary.Classification classification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_classification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DetectedLaneBoundary_CandidateLaneBoundary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_probability(), target);
  }

  // optional .osi3.LaneBoundary.Classification classification = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::classification(this),
        _Internal::classification(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  return target;
}

size_t DetectedLaneBoundary_CandidateLaneBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .osi3.LaneBoundary.Classification classification = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.classification_);
    }

    // optional double probability = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectedLaneBoundary_CandidateLaneBoundary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DetectedLaneBoundary_CandidateLaneBoundary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectedLaneBoundary_CandidateLaneBoundary::GetClassData() const { return &_class_data_; }


void DetectedLaneBoundary_CandidateLaneBoundary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DetectedLaneBoundary_CandidateLaneBoundary*>(&to_msg);
  auto& from = static_cast<const DetectedLaneBoundary_CandidateLaneBoundary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_classification()->::osi3::LaneBoundary_Classification::MergeFrom(
          from._internal_classification());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.probability_ = from._impl_.probability_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectedLaneBoundary_CandidateLaneBoundary::CopyFrom(const DetectedLaneBoundary_CandidateLaneBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedLaneBoundary_CandidateLaneBoundary::IsInitialized() const {
  return true;
}

void DetectedLaneBoundary_CandidateLaneBoundary::InternalSwap(DetectedLaneBoundary_CandidateLaneBoundary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectedLaneBoundary_CandidateLaneBoundary, _impl_.probability_)
      + sizeof(DetectedLaneBoundary_CandidateLaneBoundary::_impl_.probability_)
      - PROTOBUF_FIELD_OFFSET(DetectedLaneBoundary_CandidateLaneBoundary, _impl_.classification_)>(
          reinterpret_cast<char*>(&_impl_.classification_),
          reinterpret_cast<char*>(&other->_impl_.classification_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedLaneBoundary_CandidateLaneBoundary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fdetectedlane_2eproto_getter, &descriptor_table_osi_5fdetectedlane_2eproto_once,
      file_level_metadata_osi_5fdetectedlane_2eproto[2]);
}

// ===================================================================

class DetectedLaneBoundary::_Internal {
 public:
  using HasBits = decltype(std::declval<DetectedLaneBoundary>()._impl_._has_bits_);
  static const ::osi3::DetectedItemHeader& header(const DetectedLaneBoundary* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::ColorDescription& color_description(const DetectedLaneBoundary* msg);
  static void set_has_color_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::osi3::DetectedItemHeader&
DetectedLaneBoundary::_Internal::header(const DetectedLaneBoundary* msg) {
  return *msg->_impl_.header_;
}
const ::osi3::ColorDescription&
DetectedLaneBoundary::_Internal::color_description(const DetectedLaneBoundary* msg) {
  return *msg->_impl_.color_description_;
}
void DetectedLaneBoundary::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void DetectedLaneBoundary::clear_boundary_line() {
  _impl_.boundary_line_.Clear();
}
void DetectedLaneBoundary::clear_boundary_line_rmse() {
  _impl_.boundary_line_rmse_.Clear();
}
void DetectedLaneBoundary::clear_color_description() {
  if (_impl_.color_description_ != nullptr) _impl_.color_description_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
DetectedLaneBoundary::DetectedLaneBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.DetectedLaneBoundary)
}
DetectedLaneBoundary::DetectedLaneBoundary(const DetectedLaneBoundary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DetectedLaneBoundary* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.candidate_){from._impl_.candidate_}
    , decltype(_impl_.boundary_line_){from._impl_.boundary_line_}
    , decltype(_impl_.boundary_line_rmse_){from._impl_.boundary_line_rmse_}
    , decltype(_impl_.boundary_line_confidences_){from._impl_.boundary_line_confidences_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.color_description_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::osi3::DetectedItemHeader(*from._impl_.header_);
  }
  if (from._internal_has_color_description()) {
    _this->_impl_.color_description_ = new ::osi3::ColorDescription(*from._impl_.color_description_);
  }
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedLaneBoundary)
}

inline void DetectedLaneBoundary::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.candidate_){arena}
    , decltype(_impl_.boundary_line_){arena}
    , decltype(_impl_.boundary_line_rmse_){arena}
    , decltype(_impl_.boundary_line_confidences_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.color_description_){nullptr}
  };
}

DetectedLaneBoundary::~DetectedLaneBoundary() {
  // @@protoc_insertion_point(destructor:osi3.DetectedLaneBoundary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DetectedLaneBoundary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.candidate_.~RepeatedPtrField();
  _impl_.boundary_line_.~RepeatedPtrField();
  _impl_.boundary_line_rmse_.~RepeatedPtrField();
  _impl_.boundary_line_confidences_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.color_description_;
}

void DetectedLaneBoundary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DetectedLaneBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedLaneBoundary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.candidate_.Clear();
  _impl_.boundary_line_.Clear();
  _impl_.boundary_line_rmse_.Clear();
  _impl_.boundary_line_confidences_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.color_description_ != nullptr);
      _impl_.color_description_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectedLaneBoundary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.DetectedItemHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.DetectedLaneBoundary.CandidateLaneBoundary candidate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candidate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_boundary_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line_rmse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_boundary_line_rmse(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated double boundary_line_confidences = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_boundary_line_confidences(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_boundary_line_confidences(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.ColorDescription color_description = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_color_description(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DetectedLaneBoundary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedLaneBoundary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.DetectedItemHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated .osi3.DetectedLaneBoundary.CandidateLaneBoundary candidate = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_candidate_size()); i < n; i++) {
    const auto& repfield = this->_internal_candidate(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_boundary_line_size()); i < n; i++) {
    const auto& repfield = this->_internal_boundary_line(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line_rmse = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_boundary_line_rmse_size()); i < n; i++) {
    const auto& repfield = this->_internal_boundary_line_rmse(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated double boundary_line_confidences = 5;
  for (int i = 0, n = this->_internal_boundary_line_confidences_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_boundary_line_confidences(i), target);
  }

  // optional .osi3.ColorDescription color_description = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::color_description(this),
        _Internal::color_description(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedLaneBoundary)
  return target;
}

size_t DetectedLaneBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedLaneBoundary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.DetectedLaneBoundary.CandidateLaneBoundary candidate = 2;
  total_size += 1UL * this->_internal_candidate_size();
  for (const auto& msg : this->_impl_.candidate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line = 3;
  total_size += 1UL * this->_internal_boundary_line_size();
  for (const auto& msg : this->_impl_.boundary_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line_rmse = 4;
  total_size += 1UL * this->_internal_boundary_line_rmse_size();
  for (const auto& msg : this->_impl_.boundary_line_rmse_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double boundary_line_confidences = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_boundary_line_confidences_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_boundary_line_confidences_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .osi3.DetectedItemHeader header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .osi3.ColorDescription color_description = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.color_description_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectedLaneBoundary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DetectedLaneBoundary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectedLaneBoundary::GetClassData() const { return &_class_data_; }


void DetectedLaneBoundary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DetectedLaneBoundary*>(&to_msg);
  auto& from = static_cast<const DetectedLaneBoundary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedLaneBoundary)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.candidate_.MergeFrom(from._impl_.candidate_);
  _this->_impl_.boundary_line_.MergeFrom(from._impl_.boundary_line_);
  _this->_impl_.boundary_line_rmse_.MergeFrom(from._impl_.boundary_line_rmse_);
  _this->_impl_.boundary_line_confidences_.MergeFrom(from._impl_.boundary_line_confidences_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::osi3::DetectedItemHeader::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_color_description()->::osi3::ColorDescription::MergeFrom(
          from._internal_color_description());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectedLaneBoundary::CopyFrom(const DetectedLaneBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedLaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedLaneBoundary::IsInitialized() const {
  return true;
}

void DetectedLaneBoundary::InternalSwap(DetectedLaneBoundary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.candidate_.InternalSwap(&other->_impl_.candidate_);
  _impl_.boundary_line_.InternalSwap(&other->_impl_.boundary_line_);
  _impl_.boundary_line_rmse_.InternalSwap(&other->_impl_.boundary_line_rmse_);
  _impl_.boundary_line_confidences_.InternalSwap(&other->_impl_.boundary_line_confidences_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectedLaneBoundary, _impl_.color_description_)
      + sizeof(DetectedLaneBoundary::_impl_.color_description_)
      - PROTOBUF_FIELD_OFFSET(DetectedLaneBoundary, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedLaneBoundary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fdetectedlane_2eproto_getter, &descriptor_table_osi_5fdetectedlane_2eproto_once,
      file_level_metadata_osi_5fdetectedlane_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::DetectedLane_CandidateLane*
Arena::CreateMaybeMessage< ::osi3::DetectedLane_CandidateLane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::DetectedLane_CandidateLane >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::DetectedLane*
Arena::CreateMaybeMessage< ::osi3::DetectedLane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::DetectedLane >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::DetectedLaneBoundary_CandidateLaneBoundary*
Arena::CreateMaybeMessage< ::osi3::DetectedLaneBoundary_CandidateLaneBoundary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::DetectedLaneBoundary_CandidateLaneBoundary >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::DetectedLaneBoundary*
Arena::CreateMaybeMessage< ::osi3::DetectedLaneBoundary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::DetectedLaneBoundary >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

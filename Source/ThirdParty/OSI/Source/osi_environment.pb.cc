// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_environment.proto

#include "osi_environment.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace osi3 {
PROTOBUF_CONSTEXPR EnvironmentalConditions_TimeOfDay::EnvironmentalConditions_TimeOfDay(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.seconds_since_midnight_)*/0u} {}
struct EnvironmentalConditions_TimeOfDayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnvironmentalConditions_TimeOfDayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnvironmentalConditions_TimeOfDayDefaultTypeInternal() {}
  union {
    EnvironmentalConditions_TimeOfDay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnvironmentalConditions_TimeOfDayDefaultTypeInternal _EnvironmentalConditions_TimeOfDay_default_instance_;
PROTOBUF_CONSTEXPR EnvironmentalConditions_CloudLayer::EnvironmentalConditions_CloudLayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fractional_cloud_cover_)*/0} {}
struct EnvironmentalConditions_CloudLayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnvironmentalConditions_CloudLayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnvironmentalConditions_CloudLayerDefaultTypeInternal() {}
  union {
    EnvironmentalConditions_CloudLayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnvironmentalConditions_CloudLayerDefaultTypeInternal _EnvironmentalConditions_CloudLayer_default_instance_;
PROTOBUF_CONSTEXPR EnvironmentalConditions_Wind::EnvironmentalConditions_Wind(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.origin_direction_)*/0
  , /*decltype(_impl_.speed_)*/0} {}
struct EnvironmentalConditions_WindDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnvironmentalConditions_WindDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnvironmentalConditions_WindDefaultTypeInternal() {}
  union {
    EnvironmentalConditions_Wind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnvironmentalConditions_WindDefaultTypeInternal _EnvironmentalConditions_Wind_default_instance_;
PROTOBUF_CONSTEXPR EnvironmentalConditions_Sun::EnvironmentalConditions_Sun(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.azimuth_)*/0
  , /*decltype(_impl_.elevation_)*/0
  , /*decltype(_impl_.intensity_)*/0} {}
struct EnvironmentalConditions_SunDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnvironmentalConditions_SunDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnvironmentalConditions_SunDefaultTypeInternal() {}
  union {
    EnvironmentalConditions_Sun _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnvironmentalConditions_SunDefaultTypeInternal _EnvironmentalConditions_Sun_default_instance_;
PROTOBUF_CONSTEXPR EnvironmentalConditions::EnvironmentalConditions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.source_reference_)*/{}
  , /*decltype(_impl_.time_of_day_)*/nullptr
  , /*decltype(_impl_.clouds_)*/nullptr
  , /*decltype(_impl_.wind_)*/nullptr
  , /*decltype(_impl_.sun_)*/nullptr
  , /*decltype(_impl_.atmospheric_pressure_)*/0
  , /*decltype(_impl_.ambient_illumination_)*/0
  , /*decltype(_impl_.precipitation_)*/0
  , /*decltype(_impl_.temperature_)*/0
  , /*decltype(_impl_.relative_humidity_)*/0
  , /*decltype(_impl_.unix_timestamp_)*/int64_t{0}
  , /*decltype(_impl_.fog_)*/0} {}
struct EnvironmentalConditionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnvironmentalConditionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnvironmentalConditionsDefaultTypeInternal() {}
  union {
    EnvironmentalConditions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnvironmentalConditionsDefaultTypeInternal _EnvironmentalConditions_default_instance_;
}  // namespace osi3
static ::_pb::Metadata file_level_metadata_osi_5fenvironment_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_osi_5fenvironment_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_osi_5fenvironment_2eproto = nullptr;

const uint32_t TableStruct_osi_5fenvironment_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions_TimeOfDay, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions_TimeOfDay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions_TimeOfDay, _impl_.seconds_since_midnight_),
  0,
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions_CloudLayer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions_CloudLayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions_CloudLayer, _impl_.fractional_cloud_cover_),
  0,
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions_Wind, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions_Wind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions_Wind, _impl_.origin_direction_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions_Wind, _impl_.speed_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions_Sun, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions_Sun, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions_Sun, _impl_.azimuth_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions_Sun, _impl_.elevation_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions_Sun, _impl_.intensity_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, _impl_.ambient_illumination_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, _impl_.time_of_day_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, _impl_.unix_timestamp_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, _impl_.atmospheric_pressure_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, _impl_.temperature_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, _impl_.relative_humidity_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, _impl_.precipitation_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, _impl_.fog_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, _impl_.source_reference_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, _impl_.clouds_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, _impl_.wind_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, _impl_.sun_),
  5,
  0,
  9,
  4,
  7,
  8,
  6,
  10,
  ~0u,
  1,
  2,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::osi3::EnvironmentalConditions_TimeOfDay)},
  { 8, 15, -1, sizeof(::osi3::EnvironmentalConditions_CloudLayer)},
  { 16, 24, -1, sizeof(::osi3::EnvironmentalConditions_Wind)},
  { 26, 35, -1, sizeof(::osi3::EnvironmentalConditions_Sun)},
  { 38, 56, -1, sizeof(::osi3::EnvironmentalConditions)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::osi3::_EnvironmentalConditions_TimeOfDay_default_instance_._instance,
  &::osi3::_EnvironmentalConditions_CloudLayer_default_instance_._instance,
  &::osi3::_EnvironmentalConditions_Wind_default_instance_._instance,
  &::osi3::_EnvironmentalConditions_Sun_default_instance_._instance,
  &::osi3::_EnvironmentalConditions_default_instance_._instance,
};

const char descriptor_table_protodef_osi_5fenvironment_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025osi_environment.proto\022\004osi3\032\020osi_commo"
  "n.proto\"\230\021\n\027EnvironmentalConditions\022O\n\024a"
  "mbient_illumination\030\001 \001(\01621.osi3.Environ"
  "mentalConditions.AmbientIllumination\022<\n\013"
  "time_of_day\030\002 \001(\0132\'.osi3.EnvironmentalCo"
  "nditions.TimeOfDay\022\026\n\016unix_timestamp\030\010 \001"
  "(\003\022\034\n\024atmospheric_pressure\030\003 \001(\001\022\023\n\013temp"
  "erature\030\004 \001(\001\022\031\n\021relative_humidity\030\005 \001(\001"
  "\022B\n\rprecipitation\030\006 \001(\0162+.osi3.Environme"
  "ntalConditions.Precipitation\022.\n\003fog\030\007 \001("
  "\0162!.osi3.EnvironmentalConditions.Fog\0221\n\020"
  "source_reference\030\t \003(\0132\027.osi3.ExternalRe"
  "ference\0228\n\006clouds\030\n \001(\0132(.osi3.Environme"
  "ntalConditions.CloudLayer\0220\n\004wind\030\013 \001(\0132"
  "\".osi3.EnvironmentalConditions.Wind\022.\n\003s"
  "un\030\014 \001(\0132!.osi3.EnvironmentalConditions."
  "Sun\032+\n\tTimeOfDay\022\036\n\026seconds_since_midnig"
  "ht\030\001 \001(\r\032\322\004\n\nCloudLayer\022]\n\026fractional_cl"
  "oud_cover\030\001 \001(\0162=.osi3.EnvironmentalCond"
  "itions.CloudLayer.FractionalCloudCover\"\344"
  "\003\n\024FractionalCloudCover\022\"\n\036FRACTIONAL_CL"
  "OUD_COVER_UNKNOWN\020\000\022 \n\034FRACTIONAL_CLOUD_"
  "COVER_OTHER\020\001\022%\n!FRACTIONAL_CLOUD_COVER_"
  "ZERO_OKTAS\020\002\022$\n FRACTIONAL_CLOUD_COVER_O"
  "NE_OKTAS\020\003\022$\n FRACTIONAL_CLOUD_COVER_TWO"
  "_OKTAS\020\004\022&\n\"FRACTIONAL_CLOUD_COVER_THREE"
  "_OKTAS\020\005\022%\n!FRACTIONAL_CLOUD_COVER_FOUR_"
  "OKTAS\020\006\022%\n!FRACTIONAL_CLOUD_COVER_FIVE_O"
  "KTAS\020\007\022$\n FRACTIONAL_CLOUD_COVER_SIX_OKT"
  "AS\020\010\022&\n\"FRACTIONAL_CLOUD_COVER_SEVEN_OKT"
  "AS\020\t\022&\n\"FRACTIONAL_CLOUD_COVER_EIGHT_OKT"
  "AS\020\n\022\'\n#FRACTIONAL_CLOUD_COVER_SKY_OBSCU"
  "RED\020\013\032/\n\004Wind\022\030\n\020origin_direction\030\001 \001(\001\022"
  "\r\n\005speed\030\002 \001(\001\032<\n\003Sun\022\017\n\007azimuth\030\001 \001(\001\022\021"
  "\n\televation\030\002 \001(\001\022\021\n\tintensity\030\003 \001(\001\"\200\002\n"
  "\rPrecipitation\022\031\n\025PRECIPITATION_UNKNOWN\020"
  "\000\022\027\n\023PRECIPITATION_OTHER\020\001\022\026\n\022PRECIPITAT"
  "ION_NONE\020\002\022\034\n\030PRECIPITATION_VERY_LIGHT\020\003"
  "\022\027\n\023PRECIPITATION_LIGHT\020\004\022\032\n\026PRECIPITATI"
  "ON_MODERATE\020\005\022\027\n\023PRECIPITATION_HEAVY\020\006\022\034"
  "\n\030PRECIPITATION_VERY_HEAVY\020\007\022\031\n\025PRECIPIT"
  "ATION_EXTREME\020\010\"\315\001\n\003Fog\022\017\n\013FOG_UNKNOWN\020\000"
  "\022\r\n\tFOG_OTHER\020\001\022\034\n\030FOG_EXCELLENT_VISIBIL"
  "ITY\020\002\022\027\n\023FOG_GOOD_VISIBILITY\020\003\022\033\n\027FOG_MO"
  "DERATE_VISIBILITY\020\004\022\027\n\023FOG_POOR_VISIBILI"
  "TY\020\005\022\014\n\010FOG_MIST\020\006\022\r\n\tFOG_LIGHT\020\007\022\r\n\tFOG"
  "_THICK\020\010\022\r\n\tFOG_DENSE\020\t\"\200\003\n\023AmbientIllum"
  "ination\022 \n\034AMBIENT_ILLUMINATION_UNKNOWN\020"
  "\000\022\036\n\032AMBIENT_ILLUMINATION_OTHER\020\001\022\037\n\033AMB"
  "IENT_ILLUMINATION_LEVEL1\020\002\022\037\n\033AMBIENT_IL"
  "LUMINATION_LEVEL2\020\003\022\037\n\033AMBIENT_ILLUMINAT"
  "ION_LEVEL3\020\004\022\037\n\033AMBIENT_ILLUMINATION_LEV"
  "EL4\020\005\022\037\n\033AMBIENT_ILLUMINATION_LEVEL5\020\006\022\037"
  "\n\033AMBIENT_ILLUMINATION_LEVEL6\020\007\022\037\n\033AMBIE"
  "NT_ILLUMINATION_LEVEL7\020\010\022\037\n\033AMBIENT_ILLU"
  "MINATION_LEVEL8\020\t\022\037\n\033AMBIENT_ILLUMINATIO"
  "N_LEVEL9\020\nB\002H\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_osi_5fenvironment_2eproto_deps[1] = {
  &::descriptor_table_osi_5fcommon_2eproto,
};
static ::_pbi::once_flag descriptor_table_osi_5fenvironment_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_osi_5fenvironment_2eproto = {
    false, false, 2254, descriptor_table_protodef_osi_5fenvironment_2eproto,
    "osi_environment.proto",
    &descriptor_table_osi_5fenvironment_2eproto_once, descriptor_table_osi_5fenvironment_2eproto_deps, 1, 5,
    schemas, file_default_instances, TableStruct_osi_5fenvironment_2eproto::offsets,
    file_level_metadata_osi_5fenvironment_2eproto, file_level_enum_descriptors_osi_5fenvironment_2eproto,
    file_level_service_descriptors_osi_5fenvironment_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_osi_5fenvironment_2eproto_getter() {
  return &descriptor_table_osi_5fenvironment_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_osi_5fenvironment_2eproto(&descriptor_table_osi_5fenvironment_2eproto);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnvironmentalConditions_CloudLayer_FractionalCloudCover_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fenvironment_2eproto);
  return file_level_enum_descriptors_osi_5fenvironment_2eproto[0];
}
bool EnvironmentalConditions_CloudLayer_FractionalCloudCover_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_UNKNOWN;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_OTHER;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_ZERO_OKTAS;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_ONE_OKTAS;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_TWO_OKTAS;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_THREE_OKTAS;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_FOUR_OKTAS;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_FIVE_OKTAS;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_SIX_OKTAS;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_SEVEN_OKTAS;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_EIGHT_OKTAS;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_SKY_OBSCURED;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FractionalCloudCover_MIN;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FractionalCloudCover_MAX;
constexpr int EnvironmentalConditions_CloudLayer::FractionalCloudCover_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnvironmentalConditions_Precipitation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fenvironment_2eproto);
  return file_level_enum_descriptors_osi_5fenvironment_2eproto[1];
}
bool EnvironmentalConditions_Precipitation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_UNKNOWN;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_OTHER;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_NONE;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_VERY_LIGHT;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_LIGHT;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_MODERATE;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_HEAVY;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_VERY_HEAVY;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_EXTREME;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::Precipitation_MIN;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::Precipitation_MAX;
constexpr int EnvironmentalConditions::Precipitation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnvironmentalConditions_Fog_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fenvironment_2eproto);
  return file_level_enum_descriptors_osi_5fenvironment_2eproto[2];
}
bool EnvironmentalConditions_Fog_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_UNKNOWN;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_OTHER;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_EXCELLENT_VISIBILITY;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_GOOD_VISIBILITY;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_MODERATE_VISIBILITY;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_POOR_VISIBILITY;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_MIST;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_LIGHT;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_THICK;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_DENSE;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::Fog_MIN;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::Fog_MAX;
constexpr int EnvironmentalConditions::Fog_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnvironmentalConditions_AmbientIllumination_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fenvironment_2eproto);
  return file_level_enum_descriptors_osi_5fenvironment_2eproto[3];
}
bool EnvironmentalConditions_AmbientIllumination_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_UNKNOWN;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_OTHER;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL1;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL2;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL3;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL4;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL5;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL6;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL7;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL8;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL9;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AmbientIllumination_MIN;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AmbientIllumination_MAX;
constexpr int EnvironmentalConditions::AmbientIllumination_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class EnvironmentalConditions_TimeOfDay::_Internal {
 public:
  using HasBits = decltype(std::declval<EnvironmentalConditions_TimeOfDay>()._impl_._has_bits_);
  static void set_has_seconds_since_midnight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnvironmentalConditions_TimeOfDay::EnvironmentalConditions_TimeOfDay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.EnvironmentalConditions.TimeOfDay)
}
EnvironmentalConditions_TimeOfDay::EnvironmentalConditions_TimeOfDay(const EnvironmentalConditions_TimeOfDay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnvironmentalConditions_TimeOfDay* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.seconds_since_midnight_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.seconds_since_midnight_ = from._impl_.seconds_since_midnight_;
  // @@protoc_insertion_point(copy_constructor:osi3.EnvironmentalConditions.TimeOfDay)
}

inline void EnvironmentalConditions_TimeOfDay::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.seconds_since_midnight_){0u}
  };
}

EnvironmentalConditions_TimeOfDay::~EnvironmentalConditions_TimeOfDay() {
  // @@protoc_insertion_point(destructor:osi3.EnvironmentalConditions.TimeOfDay)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnvironmentalConditions_TimeOfDay::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnvironmentalConditions_TimeOfDay::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnvironmentalConditions_TimeOfDay::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.EnvironmentalConditions.TimeOfDay)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.seconds_since_midnight_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnvironmentalConditions_TimeOfDay::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 seconds_since_midnight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_seconds_since_midnight(&has_bits);
          _impl_.seconds_since_midnight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnvironmentalConditions_TimeOfDay::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.EnvironmentalConditions.TimeOfDay)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 seconds_since_midnight = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_seconds_since_midnight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.EnvironmentalConditions.TimeOfDay)
  return target;
}

size_t EnvironmentalConditions_TimeOfDay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.EnvironmentalConditions.TimeOfDay)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 seconds_since_midnight = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_seconds_since_midnight());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnvironmentalConditions_TimeOfDay::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnvironmentalConditions_TimeOfDay::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnvironmentalConditions_TimeOfDay::GetClassData() const { return &_class_data_; }


void EnvironmentalConditions_TimeOfDay::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnvironmentalConditions_TimeOfDay*>(&to_msg);
  auto& from = static_cast<const EnvironmentalConditions_TimeOfDay&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.EnvironmentalConditions.TimeOfDay)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_seconds_since_midnight()) {
    _this->_internal_set_seconds_since_midnight(from._internal_seconds_since_midnight());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnvironmentalConditions_TimeOfDay::CopyFrom(const EnvironmentalConditions_TimeOfDay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.EnvironmentalConditions.TimeOfDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentalConditions_TimeOfDay::IsInitialized() const {
  return true;
}

void EnvironmentalConditions_TimeOfDay::InternalSwap(EnvironmentalConditions_TimeOfDay* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.seconds_since_midnight_, other->_impl_.seconds_since_midnight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvironmentalConditions_TimeOfDay::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fenvironment_2eproto_getter, &descriptor_table_osi_5fenvironment_2eproto_once,
      file_level_metadata_osi_5fenvironment_2eproto[0]);
}

// ===================================================================

class EnvironmentalConditions_CloudLayer::_Internal {
 public:
  using HasBits = decltype(std::declval<EnvironmentalConditions_CloudLayer>()._impl_._has_bits_);
  static void set_has_fractional_cloud_cover(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnvironmentalConditions_CloudLayer::EnvironmentalConditions_CloudLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.EnvironmentalConditions.CloudLayer)
}
EnvironmentalConditions_CloudLayer::EnvironmentalConditions_CloudLayer(const EnvironmentalConditions_CloudLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnvironmentalConditions_CloudLayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fractional_cloud_cover_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.fractional_cloud_cover_ = from._impl_.fractional_cloud_cover_;
  // @@protoc_insertion_point(copy_constructor:osi3.EnvironmentalConditions.CloudLayer)
}

inline void EnvironmentalConditions_CloudLayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fractional_cloud_cover_){0}
  };
}

EnvironmentalConditions_CloudLayer::~EnvironmentalConditions_CloudLayer() {
  // @@protoc_insertion_point(destructor:osi3.EnvironmentalConditions.CloudLayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnvironmentalConditions_CloudLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnvironmentalConditions_CloudLayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnvironmentalConditions_CloudLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.EnvironmentalConditions.CloudLayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fractional_cloud_cover_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnvironmentalConditions_CloudLayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.EnvironmentalConditions.CloudLayer.FractionalCloudCover fractional_cloud_cover = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::EnvironmentalConditions_CloudLayer_FractionalCloudCover_IsValid(val))) {
            _internal_set_fractional_cloud_cover(static_cast<::osi3::EnvironmentalConditions_CloudLayer_FractionalCloudCover>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnvironmentalConditions_CloudLayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.EnvironmentalConditions.CloudLayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.EnvironmentalConditions.CloudLayer.FractionalCloudCover fractional_cloud_cover = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_fractional_cloud_cover(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.EnvironmentalConditions.CloudLayer)
  return target;
}

size_t EnvironmentalConditions_CloudLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.EnvironmentalConditions.CloudLayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .osi3.EnvironmentalConditions.CloudLayer.FractionalCloudCover fractional_cloud_cover = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_fractional_cloud_cover());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnvironmentalConditions_CloudLayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnvironmentalConditions_CloudLayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnvironmentalConditions_CloudLayer::GetClassData() const { return &_class_data_; }


void EnvironmentalConditions_CloudLayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnvironmentalConditions_CloudLayer*>(&to_msg);
  auto& from = static_cast<const EnvironmentalConditions_CloudLayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.EnvironmentalConditions.CloudLayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fractional_cloud_cover()) {
    _this->_internal_set_fractional_cloud_cover(from._internal_fractional_cloud_cover());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnvironmentalConditions_CloudLayer::CopyFrom(const EnvironmentalConditions_CloudLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.EnvironmentalConditions.CloudLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentalConditions_CloudLayer::IsInitialized() const {
  return true;
}

void EnvironmentalConditions_CloudLayer::InternalSwap(EnvironmentalConditions_CloudLayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.fractional_cloud_cover_, other->_impl_.fractional_cloud_cover_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvironmentalConditions_CloudLayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fenvironment_2eproto_getter, &descriptor_table_osi_5fenvironment_2eproto_once,
      file_level_metadata_osi_5fenvironment_2eproto[1]);
}

// ===================================================================

class EnvironmentalConditions_Wind::_Internal {
 public:
  using HasBits = decltype(std::declval<EnvironmentalConditions_Wind>()._impl_._has_bits_);
  static void set_has_origin_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

EnvironmentalConditions_Wind::EnvironmentalConditions_Wind(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.EnvironmentalConditions.Wind)
}
EnvironmentalConditions_Wind::EnvironmentalConditions_Wind(const EnvironmentalConditions_Wind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnvironmentalConditions_Wind* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.origin_direction_){}
    , decltype(_impl_.speed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.origin_direction_, &from._impl_.origin_direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.speed_) -
    reinterpret_cast<char*>(&_impl_.origin_direction_)) + sizeof(_impl_.speed_));
  // @@protoc_insertion_point(copy_constructor:osi3.EnvironmentalConditions.Wind)
}

inline void EnvironmentalConditions_Wind::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.origin_direction_){0}
    , decltype(_impl_.speed_){0}
  };
}

EnvironmentalConditions_Wind::~EnvironmentalConditions_Wind() {
  // @@protoc_insertion_point(destructor:osi3.EnvironmentalConditions.Wind)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnvironmentalConditions_Wind::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnvironmentalConditions_Wind::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnvironmentalConditions_Wind::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.EnvironmentalConditions.Wind)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.origin_direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.speed_) -
        reinterpret_cast<char*>(&_impl_.origin_direction_)) + sizeof(_impl_.speed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnvironmentalConditions_Wind::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double origin_direction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_origin_direction(&has_bits);
          _impl_.origin_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_speed(&has_bits);
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnvironmentalConditions_Wind::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.EnvironmentalConditions.Wind)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double origin_direction = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_origin_direction(), target);
  }

  // optional double speed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.EnvironmentalConditions.Wind)
  return target;
}

size_t EnvironmentalConditions_Wind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.EnvironmentalConditions.Wind)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double origin_direction = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double speed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnvironmentalConditions_Wind::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnvironmentalConditions_Wind::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnvironmentalConditions_Wind::GetClassData() const { return &_class_data_; }


void EnvironmentalConditions_Wind::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnvironmentalConditions_Wind*>(&to_msg);
  auto& from = static_cast<const EnvironmentalConditions_Wind&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.EnvironmentalConditions.Wind)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.origin_direction_ = from._impl_.origin_direction_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.speed_ = from._impl_.speed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnvironmentalConditions_Wind::CopyFrom(const EnvironmentalConditions_Wind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.EnvironmentalConditions.Wind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentalConditions_Wind::IsInitialized() const {
  return true;
}

void EnvironmentalConditions_Wind::InternalSwap(EnvironmentalConditions_Wind* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnvironmentalConditions_Wind, _impl_.speed_)
      + sizeof(EnvironmentalConditions_Wind::_impl_.speed_)
      - PROTOBUF_FIELD_OFFSET(EnvironmentalConditions_Wind, _impl_.origin_direction_)>(
          reinterpret_cast<char*>(&_impl_.origin_direction_),
          reinterpret_cast<char*>(&other->_impl_.origin_direction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvironmentalConditions_Wind::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fenvironment_2eproto_getter, &descriptor_table_osi_5fenvironment_2eproto_once,
      file_level_metadata_osi_5fenvironment_2eproto[2]);
}

// ===================================================================

class EnvironmentalConditions_Sun::_Internal {
 public:
  using HasBits = decltype(std::declval<EnvironmentalConditions_Sun>()._impl_._has_bits_);
  static void set_has_azimuth(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_elevation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_intensity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

EnvironmentalConditions_Sun::EnvironmentalConditions_Sun(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.EnvironmentalConditions.Sun)
}
EnvironmentalConditions_Sun::EnvironmentalConditions_Sun(const EnvironmentalConditions_Sun& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnvironmentalConditions_Sun* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.azimuth_){}
    , decltype(_impl_.elevation_){}
    , decltype(_impl_.intensity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.azimuth_, &from._impl_.azimuth_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.intensity_) -
    reinterpret_cast<char*>(&_impl_.azimuth_)) + sizeof(_impl_.intensity_));
  // @@protoc_insertion_point(copy_constructor:osi3.EnvironmentalConditions.Sun)
}

inline void EnvironmentalConditions_Sun::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.azimuth_){0}
    , decltype(_impl_.elevation_){0}
    , decltype(_impl_.intensity_){0}
  };
}

EnvironmentalConditions_Sun::~EnvironmentalConditions_Sun() {
  // @@protoc_insertion_point(destructor:osi3.EnvironmentalConditions.Sun)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnvironmentalConditions_Sun::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnvironmentalConditions_Sun::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnvironmentalConditions_Sun::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.EnvironmentalConditions.Sun)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.azimuth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.intensity_) -
        reinterpret_cast<char*>(&_impl_.azimuth_)) + sizeof(_impl_.intensity_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnvironmentalConditions_Sun::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double azimuth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_azimuth(&has_bits);
          _impl_.azimuth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double elevation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_elevation(&has_bits);
          _impl_.elevation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double intensity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_intensity(&has_bits);
          _impl_.intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnvironmentalConditions_Sun::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.EnvironmentalConditions.Sun)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double azimuth = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_azimuth(), target);
  }

  // optional double elevation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_elevation(), target);
  }

  // optional double intensity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_intensity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.EnvironmentalConditions.Sun)
  return target;
}

size_t EnvironmentalConditions_Sun::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.EnvironmentalConditions.Sun)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double azimuth = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double elevation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double intensity = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnvironmentalConditions_Sun::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnvironmentalConditions_Sun::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnvironmentalConditions_Sun::GetClassData() const { return &_class_data_; }


void EnvironmentalConditions_Sun::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnvironmentalConditions_Sun*>(&to_msg);
  auto& from = static_cast<const EnvironmentalConditions_Sun&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.EnvironmentalConditions.Sun)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.azimuth_ = from._impl_.azimuth_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.elevation_ = from._impl_.elevation_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.intensity_ = from._impl_.intensity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnvironmentalConditions_Sun::CopyFrom(const EnvironmentalConditions_Sun& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.EnvironmentalConditions.Sun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentalConditions_Sun::IsInitialized() const {
  return true;
}

void EnvironmentalConditions_Sun::InternalSwap(EnvironmentalConditions_Sun* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnvironmentalConditions_Sun, _impl_.intensity_)
      + sizeof(EnvironmentalConditions_Sun::_impl_.intensity_)
      - PROTOBUF_FIELD_OFFSET(EnvironmentalConditions_Sun, _impl_.azimuth_)>(
          reinterpret_cast<char*>(&_impl_.azimuth_),
          reinterpret_cast<char*>(&other->_impl_.azimuth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvironmentalConditions_Sun::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fenvironment_2eproto_getter, &descriptor_table_osi_5fenvironment_2eproto_once,
      file_level_metadata_osi_5fenvironment_2eproto[3]);
}

// ===================================================================

class EnvironmentalConditions::_Internal {
 public:
  using HasBits = decltype(std::declval<EnvironmentalConditions>()._impl_._has_bits_);
  static void set_has_ambient_illumination(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::osi3::EnvironmentalConditions_TimeOfDay& time_of_day(const EnvironmentalConditions* msg);
  static void set_has_time_of_day(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unix_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_atmospheric_pressure(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_relative_humidity(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_precipitation(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_fog(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::osi3::EnvironmentalConditions_CloudLayer& clouds(const EnvironmentalConditions* msg);
  static void set_has_clouds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::EnvironmentalConditions_Wind& wind(const EnvironmentalConditions* msg);
  static void set_has_wind(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::osi3::EnvironmentalConditions_Sun& sun(const EnvironmentalConditions* msg);
  static void set_has_sun(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::osi3::EnvironmentalConditions_TimeOfDay&
EnvironmentalConditions::_Internal::time_of_day(const EnvironmentalConditions* msg) {
  return *msg->_impl_.time_of_day_;
}
const ::osi3::EnvironmentalConditions_CloudLayer&
EnvironmentalConditions::_Internal::clouds(const EnvironmentalConditions* msg) {
  return *msg->_impl_.clouds_;
}
const ::osi3::EnvironmentalConditions_Wind&
EnvironmentalConditions::_Internal::wind(const EnvironmentalConditions* msg) {
  return *msg->_impl_.wind_;
}
const ::osi3::EnvironmentalConditions_Sun&
EnvironmentalConditions::_Internal::sun(const EnvironmentalConditions* msg) {
  return *msg->_impl_.sun_;
}
void EnvironmentalConditions::clear_source_reference() {
  _impl_.source_reference_.Clear();
}
EnvironmentalConditions::EnvironmentalConditions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.EnvironmentalConditions)
}
EnvironmentalConditions::EnvironmentalConditions(const EnvironmentalConditions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnvironmentalConditions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_reference_){from._impl_.source_reference_}
    , decltype(_impl_.time_of_day_){nullptr}
    , decltype(_impl_.clouds_){nullptr}
    , decltype(_impl_.wind_){nullptr}
    , decltype(_impl_.sun_){nullptr}
    , decltype(_impl_.atmospheric_pressure_){}
    , decltype(_impl_.ambient_illumination_){}
    , decltype(_impl_.precipitation_){}
    , decltype(_impl_.temperature_){}
    , decltype(_impl_.relative_humidity_){}
    , decltype(_impl_.unix_timestamp_){}
    , decltype(_impl_.fog_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_of_day()) {
    _this->_impl_.time_of_day_ = new ::osi3::EnvironmentalConditions_TimeOfDay(*from._impl_.time_of_day_);
  }
  if (from._internal_has_clouds()) {
    _this->_impl_.clouds_ = new ::osi3::EnvironmentalConditions_CloudLayer(*from._impl_.clouds_);
  }
  if (from._internal_has_wind()) {
    _this->_impl_.wind_ = new ::osi3::EnvironmentalConditions_Wind(*from._impl_.wind_);
  }
  if (from._internal_has_sun()) {
    _this->_impl_.sun_ = new ::osi3::EnvironmentalConditions_Sun(*from._impl_.sun_);
  }
  ::memcpy(&_impl_.atmospheric_pressure_, &from._impl_.atmospheric_pressure_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fog_) -
    reinterpret_cast<char*>(&_impl_.atmospheric_pressure_)) + sizeof(_impl_.fog_));
  // @@protoc_insertion_point(copy_constructor:osi3.EnvironmentalConditions)
}

inline void EnvironmentalConditions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_reference_){arena}
    , decltype(_impl_.time_of_day_){nullptr}
    , decltype(_impl_.clouds_){nullptr}
    , decltype(_impl_.wind_){nullptr}
    , decltype(_impl_.sun_){nullptr}
    , decltype(_impl_.atmospheric_pressure_){0}
    , decltype(_impl_.ambient_illumination_){0}
    , decltype(_impl_.precipitation_){0}
    , decltype(_impl_.temperature_){0}
    , decltype(_impl_.relative_humidity_){0}
    , decltype(_impl_.unix_timestamp_){int64_t{0}}
    , decltype(_impl_.fog_){0}
  };
}

EnvironmentalConditions::~EnvironmentalConditions() {
  // @@protoc_insertion_point(destructor:osi3.EnvironmentalConditions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnvironmentalConditions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.source_reference_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.time_of_day_;
  if (this != internal_default_instance()) delete _impl_.clouds_;
  if (this != internal_default_instance()) delete _impl_.wind_;
  if (this != internal_default_instance()) delete _impl_.sun_;
}

void EnvironmentalConditions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnvironmentalConditions::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.EnvironmentalConditions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.source_reference_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.time_of_day_ != nullptr);
      _impl_.time_of_day_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.clouds_ != nullptr);
      _impl_.clouds_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.wind_ != nullptr);
      _impl_.wind_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.sun_ != nullptr);
      _impl_.sun_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.atmospheric_pressure_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.temperature_) -
        reinterpret_cast<char*>(&_impl_.atmospheric_pressure_)) + sizeof(_impl_.temperature_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.relative_humidity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.fog_) -
        reinterpret_cast<char*>(&_impl_.relative_humidity_)) + sizeof(_impl_.fog_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnvironmentalConditions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.EnvironmentalConditions.AmbientIllumination ambient_illumination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::EnvironmentalConditions_AmbientIllumination_IsValid(val))) {
            _internal_set_ambient_illumination(static_cast<::osi3::EnvironmentalConditions_AmbientIllumination>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.EnvironmentalConditions.TimeOfDay time_of_day = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_of_day(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double atmospheric_pressure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_atmospheric_pressure(&has_bits);
          _impl_.atmospheric_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double temperature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_temperature(&has_bits);
          _impl_.temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double relative_humidity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_relative_humidity(&has_bits);
          _impl_.relative_humidity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.EnvironmentalConditions.Precipitation precipitation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::EnvironmentalConditions_Precipitation_IsValid(val))) {
            _internal_set_precipitation(static_cast<::osi3::EnvironmentalConditions_Precipitation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.EnvironmentalConditions.Fog fog = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::EnvironmentalConditions_Fog_IsValid(val))) {
            _internal_set_fog(static_cast<::osi3::EnvironmentalConditions_Fog>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 unix_timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_unix_timestamp(&has_bits);
          _impl_.unix_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.ExternalReference source_reference = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_source_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.EnvironmentalConditions.CloudLayer clouds = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_clouds(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.EnvironmentalConditions.Wind wind = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_wind(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.EnvironmentalConditions.Sun sun = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_sun(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnvironmentalConditions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.EnvironmentalConditions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.EnvironmentalConditions.AmbientIllumination ambient_illumination = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ambient_illumination(), target);
  }

  // optional .osi3.EnvironmentalConditions.TimeOfDay time_of_day = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time_of_day(this),
        _Internal::time_of_day(this).GetCachedSize(), target, stream);
  }

  // optional double atmospheric_pressure = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_atmospheric_pressure(), target);
  }

  // optional double temperature = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_temperature(), target);
  }

  // optional double relative_humidity = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_relative_humidity(), target);
  }

  // optional .osi3.EnvironmentalConditions.Precipitation precipitation = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_precipitation(), target);
  }

  // optional .osi3.EnvironmentalConditions.Fog fog = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_fog(), target);
  }

  // optional int64 unix_timestamp = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_unix_timestamp(), target);
  }

  // repeated .osi3.ExternalReference source_reference = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_source_reference_size()); i < n; i++) {
    const auto& repfield = this->_internal_source_reference(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .osi3.EnvironmentalConditions.CloudLayer clouds = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::clouds(this),
        _Internal::clouds(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.EnvironmentalConditions.Wind wind = 11;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::wind(this),
        _Internal::wind(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.EnvironmentalConditions.Sun sun = 12;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::sun(this),
        _Internal::sun(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.EnvironmentalConditions)
  return target;
}

size_t EnvironmentalConditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.EnvironmentalConditions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.ExternalReference source_reference = 9;
  total_size += 1UL * this->_internal_source_reference_size();
  for (const auto& msg : this->_impl_.source_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .osi3.EnvironmentalConditions.TimeOfDay time_of_day = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.time_of_day_);
    }

    // optional .osi3.EnvironmentalConditions.CloudLayer clouds = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.clouds_);
    }

    // optional .osi3.EnvironmentalConditions.Wind wind = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.wind_);
    }

    // optional .osi3.EnvironmentalConditions.Sun sun = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sun_);
    }

    // optional double atmospheric_pressure = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional .osi3.EnvironmentalConditions.AmbientIllumination ambient_illumination = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_ambient_illumination());
    }

    // optional .osi3.EnvironmentalConditions.Precipitation precipitation = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_precipitation());
    }

    // optional double temperature = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional double relative_humidity = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional int64 unix_timestamp = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_unix_timestamp());
    }

    // optional .osi3.EnvironmentalConditions.Fog fog = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_fog());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnvironmentalConditions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnvironmentalConditions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnvironmentalConditions::GetClassData() const { return &_class_data_; }


void EnvironmentalConditions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnvironmentalConditions*>(&to_msg);
  auto& from = static_cast<const EnvironmentalConditions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.EnvironmentalConditions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.source_reference_.MergeFrom(from._impl_.source_reference_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_time_of_day()->::osi3::EnvironmentalConditions_TimeOfDay::MergeFrom(
          from._internal_time_of_day());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_clouds()->::osi3::EnvironmentalConditions_CloudLayer::MergeFrom(
          from._internal_clouds());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_wind()->::osi3::EnvironmentalConditions_Wind::MergeFrom(
          from._internal_wind());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_sun()->::osi3::EnvironmentalConditions_Sun::MergeFrom(
          from._internal_sun());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.atmospheric_pressure_ = from._impl_.atmospheric_pressure_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.ambient_illumination_ = from._impl_.ambient_illumination_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.precipitation_ = from._impl_.precipitation_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.temperature_ = from._impl_.temperature_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.relative_humidity_ = from._impl_.relative_humidity_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.unix_timestamp_ = from._impl_.unix_timestamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.fog_ = from._impl_.fog_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnvironmentalConditions::CopyFrom(const EnvironmentalConditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.EnvironmentalConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentalConditions::IsInitialized() const {
  return true;
}

void EnvironmentalConditions::InternalSwap(EnvironmentalConditions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.source_reference_.InternalSwap(&other->_impl_.source_reference_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnvironmentalConditions, _impl_.fog_)
      + sizeof(EnvironmentalConditions::_impl_.fog_)
      - PROTOBUF_FIELD_OFFSET(EnvironmentalConditions, _impl_.time_of_day_)>(
          reinterpret_cast<char*>(&_impl_.time_of_day_),
          reinterpret_cast<char*>(&other->_impl_.time_of_day_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvironmentalConditions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fenvironment_2eproto_getter, &descriptor_table_osi_5fenvironment_2eproto_once,
      file_level_metadata_osi_5fenvironment_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::EnvironmentalConditions_TimeOfDay*
Arena::CreateMaybeMessage< ::osi3::EnvironmentalConditions_TimeOfDay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::EnvironmentalConditions_TimeOfDay >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::EnvironmentalConditions_CloudLayer*
Arena::CreateMaybeMessage< ::osi3::EnvironmentalConditions_CloudLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::EnvironmentalConditions_CloudLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::EnvironmentalConditions_Wind*
Arena::CreateMaybeMessage< ::osi3::EnvironmentalConditions_Wind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::EnvironmentalConditions_Wind >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::EnvironmentalConditions_Sun*
Arena::CreateMaybeMessage< ::osi3::EnvironmentalConditions_Sun >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::EnvironmentalConditions_Sun >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::EnvironmentalConditions*
Arena::CreateMaybeMessage< ::osi3::EnvironmentalConditions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::EnvironmentalConditions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_referenceline.proto

#include "osi_referenceline.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace osi3 {
PROTOBUF_CONSTEXPR ReferenceLine_ReferenceLinePoint::ReferenceLine_ReferenceLinePoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.world_position_)*/nullptr
  , /*decltype(_impl_.s_position_)*/0
  , /*decltype(_impl_.t_axis_yaw_)*/0} {}
struct ReferenceLine_ReferenceLinePointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReferenceLine_ReferenceLinePointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReferenceLine_ReferenceLinePointDefaultTypeInternal() {}
  union {
    ReferenceLine_ReferenceLinePoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReferenceLine_ReferenceLinePointDefaultTypeInternal _ReferenceLine_ReferenceLinePoint_default_instance_;
PROTOBUF_CONSTEXPR ReferenceLine::ReferenceLine(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.poly_line_)*/{}
  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_.type_)*/0} {}
struct ReferenceLineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReferenceLineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReferenceLineDefaultTypeInternal() {}
  union {
    ReferenceLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReferenceLineDefaultTypeInternal _ReferenceLine_default_instance_;
}  // namespace osi3
static ::_pb::Metadata file_level_metadata_osi_5freferenceline_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_osi_5freferenceline_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_osi_5freferenceline_2eproto = nullptr;

const uint32_t TableStruct_osi_5freferenceline_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::osi3::ReferenceLine_ReferenceLinePoint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::ReferenceLine_ReferenceLinePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::ReferenceLine_ReferenceLinePoint, _impl_.world_position_),
  PROTOBUF_FIELD_OFFSET(::osi3::ReferenceLine_ReferenceLinePoint, _impl_.s_position_),
  PROTOBUF_FIELD_OFFSET(::osi3::ReferenceLine_ReferenceLinePoint, _impl_.t_axis_yaw_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::osi3::ReferenceLine, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::ReferenceLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::ReferenceLine, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::osi3::ReferenceLine, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::osi3::ReferenceLine, _impl_.poly_line_),
  0,
  1,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::osi3::ReferenceLine_ReferenceLinePoint)},
  { 12, 21, -1, sizeof(::osi3::ReferenceLine)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::osi3::_ReferenceLine_ReferenceLinePoint_default_instance_._instance,
  &::osi3::_ReferenceLine_default_instance_._instance,
};

const char descriptor_table_protodef_osi_5freferenceline_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027osi_referenceline.proto\022\004osi3\032\020osi_com"
  "mon.proto\"\260\002\n\rReferenceLine\022\034\n\002id\030\001 \001(\0132"
  "\020.osi3.Identifier\022&\n\004type\030\003 \001(\0162\030.osi3.R"
  "eferenceLine.Type\0229\n\tpoly_line\030\002 \003(\0132&.o"
  "si3.ReferenceLine.ReferenceLinePoint\032d\n\022"
  "ReferenceLinePoint\022&\n\016world_position\030\001 \001"
  "(\0132\016.osi3.Vector3d\022\022\n\ns_position\030\002 \001(\001\022\022"
  "\n\nt_axis_yaw\030\003 \001(\001\"8\n\004Type\022\021\n\rTYPE_POLYL"
  "INE\020\000\022\035\n\031TYPE_POLYLINE_WITH_T_AXIS\020\001B\002H\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_osi_5freferenceline_2eproto_deps[1] = {
  &::descriptor_table_osi_5fcommon_2eproto,
};
static ::_pbi::once_flag descriptor_table_osi_5freferenceline_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_osi_5freferenceline_2eproto = {
    false, false, 360, descriptor_table_protodef_osi_5freferenceline_2eproto,
    "osi_referenceline.proto",
    &descriptor_table_osi_5freferenceline_2eproto_once, descriptor_table_osi_5freferenceline_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_osi_5freferenceline_2eproto::offsets,
    file_level_metadata_osi_5freferenceline_2eproto, file_level_enum_descriptors_osi_5freferenceline_2eproto,
    file_level_service_descriptors_osi_5freferenceline_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_osi_5freferenceline_2eproto_getter() {
  return &descriptor_table_osi_5freferenceline_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_osi_5freferenceline_2eproto(&descriptor_table_osi_5freferenceline_2eproto);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReferenceLine_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5freferenceline_2eproto);
  return file_level_enum_descriptors_osi_5freferenceline_2eproto[0];
}
bool ReferenceLine_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ReferenceLine_Type ReferenceLine::TYPE_POLYLINE;
constexpr ReferenceLine_Type ReferenceLine::TYPE_POLYLINE_WITH_T_AXIS;
constexpr ReferenceLine_Type ReferenceLine::Type_MIN;
constexpr ReferenceLine_Type ReferenceLine::Type_MAX;
constexpr int ReferenceLine::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ReferenceLine_ReferenceLinePoint::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferenceLine_ReferenceLinePoint>()._impl_._has_bits_);
  static const ::osi3::Vector3d& world_position(const ReferenceLine_ReferenceLinePoint* msg);
  static void set_has_world_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_s_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_t_axis_yaw(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::osi3::Vector3d&
ReferenceLine_ReferenceLinePoint::_Internal::world_position(const ReferenceLine_ReferenceLinePoint* msg) {
  return *msg->_impl_.world_position_;
}
void ReferenceLine_ReferenceLinePoint::clear_world_position() {
  if (_impl_.world_position_ != nullptr) _impl_.world_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ReferenceLine_ReferenceLinePoint::ReferenceLine_ReferenceLinePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.ReferenceLine.ReferenceLinePoint)
}
ReferenceLine_ReferenceLinePoint::ReferenceLine_ReferenceLinePoint(const ReferenceLine_ReferenceLinePoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReferenceLine_ReferenceLinePoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.world_position_){nullptr}
    , decltype(_impl_.s_position_){}
    , decltype(_impl_.t_axis_yaw_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_world_position()) {
    _this->_impl_.world_position_ = new ::osi3::Vector3d(*from._impl_.world_position_);
  }
  ::memcpy(&_impl_.s_position_, &from._impl_.s_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.t_axis_yaw_) -
    reinterpret_cast<char*>(&_impl_.s_position_)) + sizeof(_impl_.t_axis_yaw_));
  // @@protoc_insertion_point(copy_constructor:osi3.ReferenceLine.ReferenceLinePoint)
}

inline void ReferenceLine_ReferenceLinePoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.world_position_){nullptr}
    , decltype(_impl_.s_position_){0}
    , decltype(_impl_.t_axis_yaw_){0}
  };
}

ReferenceLine_ReferenceLinePoint::~ReferenceLine_ReferenceLinePoint() {
  // @@protoc_insertion_point(destructor:osi3.ReferenceLine.ReferenceLinePoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReferenceLine_ReferenceLinePoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.world_position_;
}

void ReferenceLine_ReferenceLinePoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReferenceLine_ReferenceLinePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.ReferenceLine.ReferenceLinePoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.world_position_ != nullptr);
    _impl_.world_position_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.s_position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.t_axis_yaw_) -
        reinterpret_cast<char*>(&_impl_.s_position_)) + sizeof(_impl_.t_axis_yaw_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceLine_ReferenceLinePoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Vector3d world_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double s_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_s_position(&has_bits);
          _impl_.s_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double t_axis_yaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_t_axis_yaw(&has_bits);
          _impl_.t_axis_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReferenceLine_ReferenceLinePoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.ReferenceLine.ReferenceLinePoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.Vector3d world_position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::world_position(this),
        _Internal::world_position(this).GetCachedSize(), target, stream);
  }

  // optional double s_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_s_position(), target);
  }

  // optional double t_axis_yaw = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_t_axis_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.ReferenceLine.ReferenceLinePoint)
  return target;
}

size_t ReferenceLine_ReferenceLinePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.ReferenceLine.ReferenceLinePoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .osi3.Vector3d world_position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.world_position_);
    }

    // optional double s_position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double t_axis_yaw = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReferenceLine_ReferenceLinePoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReferenceLine_ReferenceLinePoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReferenceLine_ReferenceLinePoint::GetClassData() const { return &_class_data_; }


void ReferenceLine_ReferenceLinePoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReferenceLine_ReferenceLinePoint*>(&to_msg);
  auto& from = static_cast<const ReferenceLine_ReferenceLinePoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.ReferenceLine.ReferenceLinePoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_world_position()->::osi3::Vector3d::MergeFrom(
          from._internal_world_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.s_position_ = from._impl_.s_position_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.t_axis_yaw_ = from._impl_.t_axis_yaw_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReferenceLine_ReferenceLinePoint::CopyFrom(const ReferenceLine_ReferenceLinePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.ReferenceLine.ReferenceLinePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLine_ReferenceLinePoint::IsInitialized() const {
  return true;
}

void ReferenceLine_ReferenceLinePoint::InternalSwap(ReferenceLine_ReferenceLinePoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReferenceLine_ReferenceLinePoint, _impl_.t_axis_yaw_)
      + sizeof(ReferenceLine_ReferenceLinePoint::_impl_.t_axis_yaw_)
      - PROTOBUF_FIELD_OFFSET(ReferenceLine_ReferenceLinePoint, _impl_.world_position_)>(
          reinterpret_cast<char*>(&_impl_.world_position_),
          reinterpret_cast<char*>(&other->_impl_.world_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceLine_ReferenceLinePoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5freferenceline_2eproto_getter, &descriptor_table_osi_5freferenceline_2eproto_once,
      file_level_metadata_osi_5freferenceline_2eproto[0]);
}

// ===================================================================

class ReferenceLine::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferenceLine>()._impl_._has_bits_);
  static const ::osi3::Identifier& id(const ReferenceLine* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::osi3::Identifier&
ReferenceLine::_Internal::id(const ReferenceLine* msg) {
  return *msg->_impl_.id_;
}
void ReferenceLine::clear_id() {
  if (_impl_.id_ != nullptr) _impl_.id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ReferenceLine::ReferenceLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.ReferenceLine)
}
ReferenceLine::ReferenceLine(const ReferenceLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReferenceLine* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.poly_line_){from._impl_.poly_line_}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    _this->_impl_.id_ = new ::osi3::Identifier(*from._impl_.id_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:osi3.ReferenceLine)
}

inline void ReferenceLine::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.poly_line_){arena}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.type_){0}
  };
}

ReferenceLine::~ReferenceLine() {
  // @@protoc_insertion_point(destructor:osi3.ReferenceLine)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReferenceLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.poly_line_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.id_;
}

void ReferenceLine::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReferenceLine::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.ReferenceLine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.poly_line_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.id_ != nullptr);
    _impl_.id_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceLine::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Identifier id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.ReferenceLine.ReferenceLinePoint poly_line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_poly_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.ReferenceLine.Type type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::ReferenceLine_Type_IsValid(val))) {
            _internal_set_type(static_cast<::osi3::ReferenceLine_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReferenceLine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.ReferenceLine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.Identifier id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // repeated .osi3.ReferenceLine.ReferenceLinePoint poly_line = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_poly_line_size()); i < n; i++) {
    const auto& repfield = this->_internal_poly_line(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .osi3.ReferenceLine.Type type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.ReferenceLine)
  return target;
}

size_t ReferenceLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.ReferenceLine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.ReferenceLine.ReferenceLinePoint poly_line = 2;
  total_size += 1UL * this->_internal_poly_line_size();
  for (const auto& msg : this->_impl_.poly_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .osi3.Identifier id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.id_);
    }

    // optional .osi3.ReferenceLine.Type type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReferenceLine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReferenceLine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReferenceLine::GetClassData() const { return &_class_data_; }


void ReferenceLine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReferenceLine*>(&to_msg);
  auto& from = static_cast<const ReferenceLine&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.ReferenceLine)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.poly_line_.MergeFrom(from._impl_.poly_line_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_id()->::osi3::Identifier::MergeFrom(
          from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReferenceLine::CopyFrom(const ReferenceLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.ReferenceLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLine::IsInitialized() const {
  return true;
}

void ReferenceLine::InternalSwap(ReferenceLine* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.poly_line_.InternalSwap(&other->_impl_.poly_line_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReferenceLine, _impl_.type_)
      + sizeof(ReferenceLine::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(ReferenceLine, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceLine::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5freferenceline_2eproto_getter, &descriptor_table_osi_5freferenceline_2eproto_once,
      file_level_metadata_osi_5freferenceline_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::ReferenceLine_ReferenceLinePoint*
Arena::CreateMaybeMessage< ::osi3::ReferenceLine_ReferenceLinePoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::ReferenceLine_ReferenceLinePoint >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::ReferenceLine*
Arena::CreateMaybeMessage< ::osi3::ReferenceLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::ReferenceLine >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

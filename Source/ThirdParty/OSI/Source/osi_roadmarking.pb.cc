// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_roadmarking.proto

#include "osi_roadmarking.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace osi3 {
PROTOBUF_CONSTEXPR RoadMarking_Classification::RoadMarking_Classification(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.assigned_lane_id_)*/{}
  , /*decltype(_impl_.logical_lane_assignment_)*/{}
  , /*decltype(_impl_.value_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_revision_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sub_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.traffic_main_sign_type_)*/0
  , /*decltype(_impl_.monochrome_color_)*/0
  , /*decltype(_impl_.is_out_of_service_)*/false} {}
struct RoadMarking_ClassificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadMarking_ClassificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadMarking_ClassificationDefaultTypeInternal() {}
  union {
    RoadMarking_Classification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadMarking_ClassificationDefaultTypeInternal _RoadMarking_Classification_default_instance_;
PROTOBUF_CONSTEXPR RoadMarking::RoadMarking(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.source_reference_)*/{}
  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.classification_)*/nullptr
  , /*decltype(_impl_.color_description_)*/nullptr} {}
struct RoadMarkingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadMarkingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadMarkingDefaultTypeInternal() {}
  union {
    RoadMarking _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadMarkingDefaultTypeInternal _RoadMarking_default_instance_;
}  // namespace osi3
static ::_pb::Metadata file_level_metadata_osi_5froadmarking_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_osi_5froadmarking_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_osi_5froadmarking_2eproto = nullptr;

const uint32_t TableStruct_osi_5froadmarking_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking_Classification, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking_Classification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking_Classification, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking_Classification, _impl_.traffic_main_sign_type_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking_Classification, _impl_.monochrome_color_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking_Classification, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking_Classification, _impl_.value_text_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking_Classification, _impl_.assigned_lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking_Classification, _impl_.is_out_of_service_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking_Classification, _impl_.country_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking_Classification, _impl_.country_revision_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking_Classification, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking_Classification, _impl_.sub_code_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking_Classification, _impl_.logical_lane_assignment_),
  6,
  7,
  8,
  5,
  0,
  ~0u,
  9,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking, _impl_.classification_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking, _impl_.source_reference_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking, _impl_.color_description_),
  0,
  1,
  2,
  ~0u,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, -1, sizeof(::osi3::RoadMarking_Classification)},
  { 30, 41, -1, sizeof(::osi3::RoadMarking)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::osi3::_RoadMarking_Classification_default_instance_._instance,
  &::osi3::_RoadMarking_default_instance_._instance,
};

const char descriptor_table_protodef_osi_5froadmarking_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025osi_roadmarking.proto\022\004osi3\032\020osi_commo"
  "n.proto\032\025osi_trafficsign.proto\"\311\010\n\013RoadM"
  "arking\022\034\n\002id\030\001 \001(\0132\020.osi3.Identifier\022\"\n\004"
  "base\030\002 \001(\0132\024.osi3.BaseStationary\0228\n\016clas"
  "sification\030\003 \001(\0132 .osi3.RoadMarking.Clas"
  "sification\0221\n\020source_reference\030\004 \003(\0132\027.o"
  "si3.ExternalReference\0221\n\021color_descripti"
  "on\030\005 \001(\0132\026.osi3.ColorDescription\032\327\006\n\016Cla"
  "ssification\0223\n\004type\030\001 \001(\0162%.osi3.RoadMar"
  "king.Classification.Type\022N\n\026traffic_main"
  "_sign_type\030\002 \001(\0162..osi3.TrafficSign.Main"
  "Sign.Classification.Type\022@\n\020monochrome_c"
  "olor\030\003 \001(\0162&.osi3.RoadMarking.Classifica"
  "tion.Color\022%\n\005value\030\004 \001(\0132\026.osi3.Traffic"
  "SignValue\022\022\n\nvalue_text\030\005 \001(\t\022*\n\020assigne"
  "d_lane_id\030\006 \003(\0132\020.osi3.Identifier\022\031\n\021is_"
  "out_of_service\030\007 \001(\010\022\017\n\007country\030\010 \001(\t\022\030\n"
  "\020country_revision\030\t \001(\t\022\014\n\004code\030\n \001(\t\022\020\n"
  "\010sub_code\030\013 \001(\t\022<\n\027logical_lane_assignme"
  "nt\030\014 \003(\0132\033.osi3.LogicalLaneAssignment\"\315\001"
  "\n\004Type\022\020\n\014TYPE_UNKNOWN\020\000\022\016\n\nTYPE_OTHER\020\001"
  "\022\035\n\031TYPE_PAINTED_TRAFFIC_SIGN\020\002\022\036\n\032TYPE_"
  "SYMBOLIC_TRAFFIC_SIGN\020\003\022\035\n\031TYPE_TEXTUAL_"
  "TRAFFIC_SIGN\020\004\022\027\n\023TYPE_GENERIC_SYMBOL\020\005\022"
  "\025\n\021TYPE_GENERIC_LINE\020\006\022\025\n\021TYPE_GENERIC_T"
  "EXT\020\007\"\242\001\n\005Color\022\021\n\rCOLOR_UNKNOWN\020\000\022\017\n\013CO"
  "LOR_OTHER\020\001\022\017\n\013COLOR_WHITE\020\002\022\020\n\014COLOR_YE"
  "LLOW\020\003\022\016\n\nCOLOR_BLUE\020\005\022\r\n\tCOLOR_RED\020\006\022\017\n"
  "\013COLOR_GREEN\020\007\022\020\n\014COLOR_VIOLET\020\010\022\020\n\014COLO"
  "R_ORANGE\020\tB\002H\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_osi_5froadmarking_2eproto_deps[2] = {
  &::descriptor_table_osi_5fcommon_2eproto,
  &::descriptor_table_osi_5ftrafficsign_2eproto,
};
static ::_pbi::once_flag descriptor_table_osi_5froadmarking_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_osi_5froadmarking_2eproto = {
    false, false, 1174, descriptor_table_protodef_osi_5froadmarking_2eproto,
    "osi_roadmarking.proto",
    &descriptor_table_osi_5froadmarking_2eproto_once, descriptor_table_osi_5froadmarking_2eproto_deps, 2, 2,
    schemas, file_default_instances, TableStruct_osi_5froadmarking_2eproto::offsets,
    file_level_metadata_osi_5froadmarking_2eproto, file_level_enum_descriptors_osi_5froadmarking_2eproto,
    file_level_service_descriptors_osi_5froadmarking_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_osi_5froadmarking_2eproto_getter() {
  return &descriptor_table_osi_5froadmarking_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_osi_5froadmarking_2eproto(&descriptor_table_osi_5froadmarking_2eproto);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoadMarking_Classification_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5froadmarking_2eproto);
  return file_level_enum_descriptors_osi_5froadmarking_2eproto[0];
}
bool RoadMarking_Classification_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RoadMarking_Classification_Type RoadMarking_Classification::TYPE_UNKNOWN;
constexpr RoadMarking_Classification_Type RoadMarking_Classification::TYPE_OTHER;
constexpr RoadMarking_Classification_Type RoadMarking_Classification::TYPE_PAINTED_TRAFFIC_SIGN;
constexpr RoadMarking_Classification_Type RoadMarking_Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN;
constexpr RoadMarking_Classification_Type RoadMarking_Classification::TYPE_TEXTUAL_TRAFFIC_SIGN;
constexpr RoadMarking_Classification_Type RoadMarking_Classification::TYPE_GENERIC_SYMBOL;
constexpr RoadMarking_Classification_Type RoadMarking_Classification::TYPE_GENERIC_LINE;
constexpr RoadMarking_Classification_Type RoadMarking_Classification::TYPE_GENERIC_TEXT;
constexpr RoadMarking_Classification_Type RoadMarking_Classification::Type_MIN;
constexpr RoadMarking_Classification_Type RoadMarking_Classification::Type_MAX;
constexpr int RoadMarking_Classification::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoadMarking_Classification_Color_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5froadmarking_2eproto);
  return file_level_enum_descriptors_osi_5froadmarking_2eproto[1];
}
bool RoadMarking_Classification_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RoadMarking_Classification_Color RoadMarking_Classification::COLOR_UNKNOWN;
constexpr RoadMarking_Classification_Color RoadMarking_Classification::COLOR_OTHER;
constexpr RoadMarking_Classification_Color RoadMarking_Classification::COLOR_WHITE;
constexpr RoadMarking_Classification_Color RoadMarking_Classification::COLOR_YELLOW;
constexpr RoadMarking_Classification_Color RoadMarking_Classification::COLOR_BLUE;
constexpr RoadMarking_Classification_Color RoadMarking_Classification::COLOR_RED;
constexpr RoadMarking_Classification_Color RoadMarking_Classification::COLOR_GREEN;
constexpr RoadMarking_Classification_Color RoadMarking_Classification::COLOR_VIOLET;
constexpr RoadMarking_Classification_Color RoadMarking_Classification::COLOR_ORANGE;
constexpr RoadMarking_Classification_Color RoadMarking_Classification::Color_MIN;
constexpr RoadMarking_Classification_Color RoadMarking_Classification::Color_MAX;
constexpr int RoadMarking_Classification::Color_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class RoadMarking_Classification::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadMarking_Classification>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_traffic_main_sign_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_monochrome_color(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::osi3::TrafficSignValue& value(const RoadMarking_Classification* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_value_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_out_of_service(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_country_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sub_code(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::osi3::TrafficSignValue&
RoadMarking_Classification::_Internal::value(const RoadMarking_Classification* msg) {
  return *msg->_impl_.value_;
}
void RoadMarking_Classification::clear_value() {
  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void RoadMarking_Classification::clear_assigned_lane_id() {
  _impl_.assigned_lane_id_.Clear();
}
void RoadMarking_Classification::clear_logical_lane_assignment() {
  _impl_.logical_lane_assignment_.Clear();
}
RoadMarking_Classification::RoadMarking_Classification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.RoadMarking.Classification)
}
RoadMarking_Classification::RoadMarking_Classification(const RoadMarking_Classification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoadMarking_Classification* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.assigned_lane_id_){from._impl_.assigned_lane_id_}
    , decltype(_impl_.logical_lane_assignment_){from._impl_.logical_lane_assignment_}
    , decltype(_impl_.value_text_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.country_revision_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.sub_code_){}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.traffic_main_sign_type_){}
    , decltype(_impl_.monochrome_color_){}
    , decltype(_impl_.is_out_of_service_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value_text()) {
    _this->_impl_.value_text_.Set(from._internal_value_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country()) {
    _this->_impl_.country_.Set(from._internal_country(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_revision_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_revision_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country_revision()) {
    _this->_impl_.country_revision_.Set(from._internal_country_revision(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_code()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sub_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sub_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sub_code()) {
    _this->_impl_.sub_code_.Set(from._internal_sub_code(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::osi3::TrafficSignValue(*from._impl_.value_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_out_of_service_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.is_out_of_service_));
  // @@protoc_insertion_point(copy_constructor:osi3.RoadMarking.Classification)
}

inline void RoadMarking_Classification::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.assigned_lane_id_){arena}
    , decltype(_impl_.logical_lane_assignment_){arena}
    , decltype(_impl_.value_text_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.country_revision_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.sub_code_){}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.traffic_main_sign_type_){0}
    , decltype(_impl_.monochrome_color_){0}
    , decltype(_impl_.is_out_of_service_){false}
  };
  _impl_.value_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_revision_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_revision_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sub_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sub_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoadMarking_Classification::~RoadMarking_Classification() {
  // @@protoc_insertion_point(destructor:osi3.RoadMarking.Classification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoadMarking_Classification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.assigned_lane_id_.~RepeatedPtrField();
  _impl_.logical_lane_assignment_.~RepeatedPtrField();
  _impl_.value_text_.Destroy();
  _impl_.country_.Destroy();
  _impl_.country_revision_.Destroy();
  _impl_.code_.Destroy();
  _impl_.sub_code_.Destroy();
  if (this != internal_default_instance()) delete _impl_.value_;
}

void RoadMarking_Classification::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoadMarking_Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.RoadMarking.Classification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.assigned_lane_id_.Clear();
  _impl_.logical_lane_assignment_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.value_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.country_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.country_revision_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.sub_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.value_ != nullptr);
      _impl_.value_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.traffic_main_sign_type_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.traffic_main_sign_type_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.monochrome_color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_out_of_service_) -
        reinterpret_cast<char*>(&_impl_.monochrome_color_)) + sizeof(_impl_.is_out_of_service_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoadMarking_Classification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.RoadMarking.Classification.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::RoadMarking_Classification_Type_IsValid(val))) {
            _internal_set_type(static_cast<::osi3::RoadMarking_Classification_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficSign.MainSign.Classification.Type traffic_main_sign_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::TrafficSign_MainSign_Classification_Type_IsValid(val))) {
            _internal_set_traffic_main_sign_type(static_cast<::osi3::TrafficSign_MainSign_Classification_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.RoadMarking.Classification.Color monochrome_color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::osi3::RoadMarking_Classification_Color_IsValid(val))) {
            _internal_set_monochrome_color(static_cast<::osi3::RoadMarking_Classification_Color>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficSignValue value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value_text = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_value_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "osi3.RoadMarking.Classification.value_text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.Identifier assigned_lane_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assigned_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_out_of_service = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_out_of_service(&has_bits);
          _impl_.is_out_of_service_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string country = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "osi3.RoadMarking.Classification.country");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string country_revision = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_country_revision();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "osi3.RoadMarking.Classification.country_revision");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string code = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "osi3.RoadMarking.Classification.code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string sub_code = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_sub_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "osi3.RoadMarking.Classification.sub_code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logical_lane_assignment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoadMarking_Classification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.RoadMarking.Classification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.RoadMarking.Classification.Type type = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .osi3.TrafficSign.MainSign.Classification.Type traffic_main_sign_type = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_traffic_main_sign_type(), target);
  }

  // optional .osi3.RoadMarking.Classification.Color monochrome_color = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_monochrome_color(), target);
  }

  // optional .osi3.TrafficSignValue value = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  // optional string value_text = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value_text().data(), static_cast<int>(this->_internal_value_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.RoadMarking.Classification.value_text");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_value_text(), target);
  }

  // repeated .osi3.Identifier assigned_lane_id = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_assigned_lane_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_assigned_lane_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool is_out_of_service = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_out_of_service(), target);
  }

  // optional string country = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.RoadMarking.Classification.country");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_country(), target);
  }

  // optional string country_revision = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_revision().data(), static_cast<int>(this->_internal_country_revision().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.RoadMarking.Classification.country_revision");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_country_revision(), target);
  }

  // optional string code = 10;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.RoadMarking.Classification.code");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_code(), target);
  }

  // optional string sub_code = 11;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sub_code().data(), static_cast<int>(this->_internal_sub_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "osi3.RoadMarking.Classification.sub_code");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_sub_code(), target);
  }

  // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_logical_lane_assignment_size()); i < n; i++) {
    const auto& repfield = this->_internal_logical_lane_assignment(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.RoadMarking.Classification)
  return target;
}

size_t RoadMarking_Classification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.RoadMarking.Classification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Identifier assigned_lane_id = 6;
  total_size += 1UL * this->_internal_assigned_lane_id_size();
  for (const auto& msg : this->_impl_.assigned_lane_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 12;
  total_size += 1UL * this->_internal_logical_lane_assignment_size();
  for (const auto& msg : this->_impl_.logical_lane_assignment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string value_text = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value_text());
    }

    // optional string country = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country());
    }

    // optional string country_revision = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_revision());
    }

    // optional string code = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code());
    }

    // optional string sub_code = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sub_code());
    }

    // optional .osi3.TrafficSignValue value = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_);
    }

    // optional .osi3.RoadMarking.Classification.Type type = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .osi3.TrafficSign.MainSign.Classification.Type traffic_main_sign_type = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_traffic_main_sign_type());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .osi3.RoadMarking.Classification.Color monochrome_color = 3;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_monochrome_color());
    }

    // optional bool is_out_of_service = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoadMarking_Classification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoadMarking_Classification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoadMarking_Classification::GetClassData() const { return &_class_data_; }


void RoadMarking_Classification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoadMarking_Classification*>(&to_msg);
  auto& from = static_cast<const RoadMarking_Classification&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.RoadMarking.Classification)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.assigned_lane_id_.MergeFrom(from._impl_.assigned_lane_id_);
  _this->_impl_.logical_lane_assignment_.MergeFrom(from._impl_.logical_lane_assignment_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_value_text(from._internal_value_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_country(from._internal_country());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_country_revision(from._internal_country_revision());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_code(from._internal_code());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_sub_code(from._internal_sub_code());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_value()->::osi3::TrafficSignValue::MergeFrom(
          from._internal_value());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.traffic_main_sign_type_ = from._impl_.traffic_main_sign_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.monochrome_color_ = from._impl_.monochrome_color_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.is_out_of_service_ = from._impl_.is_out_of_service_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoadMarking_Classification::CopyFrom(const RoadMarking_Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.RoadMarking.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadMarking_Classification::IsInitialized() const {
  return true;
}

void RoadMarking_Classification::InternalSwap(RoadMarking_Classification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.assigned_lane_id_.InternalSwap(&other->_impl_.assigned_lane_id_);
  _impl_.logical_lane_assignment_.InternalSwap(&other->_impl_.logical_lane_assignment_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_text_, lhs_arena,
      &other->_impl_.value_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_, lhs_arena,
      &other->_impl_.country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_revision_, lhs_arena,
      &other->_impl_.country_revision_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sub_code_, lhs_arena,
      &other->_impl_.sub_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadMarking_Classification, _impl_.is_out_of_service_)
      + sizeof(RoadMarking_Classification::_impl_.is_out_of_service_)
      - PROTOBUF_FIELD_OFFSET(RoadMarking_Classification, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadMarking_Classification::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5froadmarking_2eproto_getter, &descriptor_table_osi_5froadmarking_2eproto_once,
      file_level_metadata_osi_5froadmarking_2eproto[0]);
}

// ===================================================================

class RoadMarking::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadMarking>()._impl_._has_bits_);
  static const ::osi3::Identifier& id(const RoadMarking* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::BaseStationary& base(const RoadMarking* msg);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::RoadMarking_Classification& classification(const RoadMarking* msg);
  static void set_has_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::osi3::ColorDescription& color_description(const RoadMarking* msg);
  static void set_has_color_description(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::osi3::Identifier&
RoadMarking::_Internal::id(const RoadMarking* msg) {
  return *msg->_impl_.id_;
}
const ::osi3::BaseStationary&
RoadMarking::_Internal::base(const RoadMarking* msg) {
  return *msg->_impl_.base_;
}
const ::osi3::RoadMarking_Classification&
RoadMarking::_Internal::classification(const RoadMarking* msg) {
  return *msg->_impl_.classification_;
}
const ::osi3::ColorDescription&
RoadMarking::_Internal::color_description(const RoadMarking* msg) {
  return *msg->_impl_.color_description_;
}
void RoadMarking::clear_id() {
  if (_impl_.id_ != nullptr) _impl_.id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RoadMarking::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void RoadMarking::clear_source_reference() {
  _impl_.source_reference_.Clear();
}
void RoadMarking::clear_color_description() {
  if (_impl_.color_description_ != nullptr) _impl_.color_description_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
RoadMarking::RoadMarking(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.RoadMarking)
}
RoadMarking::RoadMarking(const RoadMarking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoadMarking* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_reference_){from._impl_.source_reference_}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.classification_){nullptr}
    , decltype(_impl_.color_description_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    _this->_impl_.id_ = new ::osi3::Identifier(*from._impl_.id_);
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::osi3::BaseStationary(*from._impl_.base_);
  }
  if (from._internal_has_classification()) {
    _this->_impl_.classification_ = new ::osi3::RoadMarking_Classification(*from._impl_.classification_);
  }
  if (from._internal_has_color_description()) {
    _this->_impl_.color_description_ = new ::osi3::ColorDescription(*from._impl_.color_description_);
  }
  // @@protoc_insertion_point(copy_constructor:osi3.RoadMarking)
}

inline void RoadMarking::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_reference_){arena}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.classification_){nullptr}
    , decltype(_impl_.color_description_){nullptr}
  };
}

RoadMarking::~RoadMarking() {
  // @@protoc_insertion_point(destructor:osi3.RoadMarking)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoadMarking::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.source_reference_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.id_;
  if (this != internal_default_instance()) delete _impl_.base_;
  if (this != internal_default_instance()) delete _impl_.classification_;
  if (this != internal_default_instance()) delete _impl_.color_description_;
}

void RoadMarking::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoadMarking::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.RoadMarking)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.source_reference_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.id_ != nullptr);
      _impl_.id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.base_ != nullptr);
      _impl_.base_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.classification_ != nullptr);
      _impl_.classification_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.color_description_ != nullptr);
      _impl_.color_description_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoadMarking::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.Identifier id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.BaseStationary base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.RoadMarking.Classification classification = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_classification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.ExternalReference source_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_source_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.ColorDescription color_description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_color_description(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoadMarking::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.RoadMarking)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.Identifier id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.BaseStationary base = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.RoadMarking.Classification classification = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::classification(this),
        _Internal::classification(this).GetCachedSize(), target, stream);
  }

  // repeated .osi3.ExternalReference source_reference = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_source_reference_size()); i < n; i++) {
    const auto& repfield = this->_internal_source_reference(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .osi3.ColorDescription color_description = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::color_description(this),
        _Internal::color_description(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.RoadMarking)
  return target;
}

size_t RoadMarking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.RoadMarking)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.ExternalReference source_reference = 4;
  total_size += 1UL * this->_internal_source_reference_size();
  for (const auto& msg : this->_impl_.source_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .osi3.Identifier id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.id_);
    }

    // optional .osi3.BaseStationary base = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.base_);
    }

    // optional .osi3.RoadMarking.Classification classification = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.classification_);
    }

    // optional .osi3.ColorDescription color_description = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.color_description_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoadMarking::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoadMarking::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoadMarking::GetClassData() const { return &_class_data_; }


void RoadMarking::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoadMarking*>(&to_msg);
  auto& from = static_cast<const RoadMarking&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.RoadMarking)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.source_reference_.MergeFrom(from._impl_.source_reference_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_id()->::osi3::Identifier::MergeFrom(
          from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_base()->::osi3::BaseStationary::MergeFrom(
          from._internal_base());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_classification()->::osi3::RoadMarking_Classification::MergeFrom(
          from._internal_classification());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_color_description()->::osi3::ColorDescription::MergeFrom(
          from._internal_color_description());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoadMarking::CopyFrom(const RoadMarking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.RoadMarking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadMarking::IsInitialized() const {
  return true;
}

void RoadMarking::InternalSwap(RoadMarking* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.source_reference_.InternalSwap(&other->_impl_.source_reference_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadMarking, _impl_.color_description_)
      + sizeof(RoadMarking::_impl_.color_description_)
      - PROTOBUF_FIELD_OFFSET(RoadMarking, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadMarking::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5froadmarking_2eproto_getter, &descriptor_table_osi_5froadmarking_2eproto_once,
      file_level_metadata_osi_5froadmarking_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::RoadMarking_Classification*
Arena::CreateMaybeMessage< ::osi3::RoadMarking_Classification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::RoadMarking_Classification >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::RoadMarking*
Arena::CreateMaybeMessage< ::osi3::RoadMarking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::RoadMarking >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

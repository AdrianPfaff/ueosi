// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_sensorview.proto

#include "osi_sensorview.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace osi3 {
PROTOBUF_CONSTEXPR SensorView::SensorView(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.generic_sensor_view_)*/{}
  , /*decltype(_impl_.radar_sensor_view_)*/{}
  , /*decltype(_impl_.lidar_sensor_view_)*/{}
  , /*decltype(_impl_.camera_sensor_view_)*/{}
  , /*decltype(_impl_.ultrasonic_sensor_view_)*/{}
  , /*decltype(_impl_.version_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.sensor_id_)*/nullptr
  , /*decltype(_impl_.mounting_position_)*/nullptr
  , /*decltype(_impl_.mounting_position_rmse_)*/nullptr
  , /*decltype(_impl_.host_vehicle_data_)*/nullptr
  , /*decltype(_impl_.global_ground_truth_)*/nullptr
  , /*decltype(_impl_.host_vehicle_id_)*/nullptr} {}
struct SensorViewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorViewDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorViewDefaultTypeInternal() {}
  union {
    SensorView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorViewDefaultTypeInternal _SensorView_default_instance_;
PROTOBUF_CONSTEXPR GenericSensorView::GenericSensorView(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.view_configuration_)*/nullptr} {}
struct GenericSensorViewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenericSensorViewDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenericSensorViewDefaultTypeInternal() {}
  union {
    GenericSensorView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenericSensorViewDefaultTypeInternal _GenericSensorView_default_instance_;
PROTOBUF_CONSTEXPR RadarSensorView_Reflection::RadarSensorView_Reflection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.signal_strength_)*/0
  , /*decltype(_impl_.time_of_flight_)*/0
  , /*decltype(_impl_.doppler_shift_)*/0
  , /*decltype(_impl_.source_horizontal_angle_)*/0
  , /*decltype(_impl_.source_vertical_angle_)*/0} {}
struct RadarSensorView_ReflectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RadarSensorView_ReflectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RadarSensorView_ReflectionDefaultTypeInternal() {}
  union {
    RadarSensorView_Reflection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RadarSensorView_ReflectionDefaultTypeInternal _RadarSensorView_Reflection_default_instance_;
PROTOBUF_CONSTEXPR RadarSensorView::RadarSensorView(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reflection_)*/{}
  , /*decltype(_impl_.view_configuration_)*/nullptr} {}
struct RadarSensorViewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RadarSensorViewDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RadarSensorViewDefaultTypeInternal() {}
  union {
    RadarSensorView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RadarSensorViewDefaultTypeInternal _RadarSensorView_default_instance_;
PROTOBUF_CONSTEXPR LidarSensorView_Reflection::LidarSensorView_Reflection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.normal_to_surface_)*/nullptr
  , /*decltype(_impl_.object_id_)*/nullptr
  , /*decltype(_impl_.signal_strength_)*/0
  , /*decltype(_impl_.time_of_flight_)*/0
  , /*decltype(_impl_.doppler_shift_)*/0} {}
struct LidarSensorView_ReflectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LidarSensorView_ReflectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LidarSensorView_ReflectionDefaultTypeInternal() {}
  union {
    LidarSensorView_Reflection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LidarSensorView_ReflectionDefaultTypeInternal _LidarSensorView_Reflection_default_instance_;
PROTOBUF_CONSTEXPR LidarSensorView::LidarSensorView(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reflection_)*/{}
  , /*decltype(_impl_.view_configuration_)*/nullptr} {}
struct LidarSensorViewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LidarSensorViewDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LidarSensorViewDefaultTypeInternal() {}
  union {
    LidarSensorView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LidarSensorViewDefaultTypeInternal _LidarSensorView_default_instance_;
PROTOBUF_CONSTEXPR CameraSensorView::CameraSensorView(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.image_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.view_configuration_)*/nullptr} {}
struct CameraSensorViewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CameraSensorViewDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CameraSensorViewDefaultTypeInternal() {}
  union {
    CameraSensorView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CameraSensorViewDefaultTypeInternal _CameraSensorView_default_instance_;
PROTOBUF_CONSTEXPR UltrasonicSensorView::UltrasonicSensorView(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.view_configuration_)*/nullptr} {}
struct UltrasonicSensorViewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UltrasonicSensorViewDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UltrasonicSensorViewDefaultTypeInternal() {}
  union {
    UltrasonicSensorView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UltrasonicSensorViewDefaultTypeInternal _UltrasonicSensorView_default_instance_;
}  // namespace osi3
static ::_pb::Metadata file_level_metadata_osi_5fsensorview_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_osi_5fsensorview_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_osi_5fsensorview_2eproto = nullptr;

const uint32_t TableStruct_osi_5fsensorview_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::osi3::SensorView, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::SensorView, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorView, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorView, _impl_.sensor_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorView, _impl_.mounting_position_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorView, _impl_.mounting_position_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorView, _impl_.host_vehicle_data_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorView, _impl_.global_ground_truth_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorView, _impl_.host_vehicle_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorView, _impl_.generic_sensor_view_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorView, _impl_.radar_sensor_view_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorView, _impl_.lidar_sensor_view_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorView, _impl_.camera_sensor_view_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorView, _impl_.ultrasonic_sensor_view_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::GenericSensorView, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::GenericSensorView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::GenericSensorView, _impl_.view_configuration_),
  0,
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorView_Reflection, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorView_Reflection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorView_Reflection, _impl_.signal_strength_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorView_Reflection, _impl_.time_of_flight_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorView_Reflection, _impl_.doppler_shift_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorView_Reflection, _impl_.source_horizontal_angle_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorView_Reflection, _impl_.source_vertical_angle_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorView, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorView, _impl_.view_configuration_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorView, _impl_.reflection_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorView_Reflection, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorView_Reflection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorView_Reflection, _impl_.signal_strength_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorView_Reflection, _impl_.time_of_flight_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorView_Reflection, _impl_.doppler_shift_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorView_Reflection, _impl_.normal_to_surface_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorView_Reflection, _impl_.object_id_),
  2,
  3,
  4,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorView, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorView, _impl_.view_configuration_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorView, _impl_.reflection_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSensorView, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSensorView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSensorView, _impl_.view_configuration_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSensorView, _impl_.image_data_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicSensorView, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicSensorView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicSensorView, _impl_.view_configuration_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, -1, sizeof(::osi3::SensorView)},
  { 32, 39, -1, sizeof(::osi3::GenericSensorView)},
  { 40, 51, -1, sizeof(::osi3::RadarSensorView_Reflection)},
  { 56, 64, -1, sizeof(::osi3::RadarSensorView)},
  { 66, 77, -1, sizeof(::osi3::LidarSensorView_Reflection)},
  { 82, 90, -1, sizeof(::osi3::LidarSensorView)},
  { 92, 100, -1, sizeof(::osi3::CameraSensorView)},
  { 102, 109, -1, sizeof(::osi3::UltrasonicSensorView)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::osi3::_SensorView_default_instance_._instance,
  &::osi3::_GenericSensorView_default_instance_._instance,
  &::osi3::_RadarSensorView_Reflection_default_instance_._instance,
  &::osi3::_RadarSensorView_default_instance_._instance,
  &::osi3::_LidarSensorView_Reflection_default_instance_._instance,
  &::osi3::_LidarSensorView_default_instance_._instance,
  &::osi3::_CameraSensorView_default_instance_._instance,
  &::osi3::_UltrasonicSensorView_default_instance_._instance,
};

const char descriptor_table_protodef_osi_5fsensorview_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024osi_sensorview.proto\022\004osi3\032\021osi_versio"
  "n.proto\032\020osi_common.proto\032\025osi_groundtru"
  "th.proto\032!osi_sensorviewconfiguration.pr"
  "oto\032\031osi_hostvehicledata.proto\"\205\005\n\nSenso"
  "rView\022\'\n\007version\030\001 \001(\0132\026.osi3.InterfaceV"
  "ersion\022\"\n\ttimestamp\030\002 \001(\0132\017.osi3.Timesta"
  "mp\022#\n\tsensor_id\030\003 \001(\0132\020.osi3.Identifier\022"
  "1\n\021mounting_position\030\004 \001(\0132\026.osi3.Mounti"
  "ngPosition\0226\n\026mounting_position_rmse\030\005 \001"
  "(\0132\026.osi3.MountingPosition\0220\n\021host_vehic"
  "le_data\030\006 \001(\0132\025.osi3.HostVehicleData\022.\n\023"
  "global_ground_truth\030\007 \001(\0132\021.osi3.GroundT"
  "ruth\022)\n\017host_vehicle_id\030\010 \001(\0132\020.osi3.Ide"
  "ntifier\0225\n\023generic_sensor_view\030\350\007 \003(\0132\027."
  "osi3.GenericSensorView\0221\n\021radar_sensor_v"
  "iew\030\351\007 \003(\0132\025.osi3.RadarSensorView\0221\n\021lid"
  "ar_sensor_view\030\352\007 \003(\0132\025.osi3.LidarSensor"
  "View\0223\n\022camera_sensor_view\030\353\007 \003(\0132\026.osi3"
  ".CameraSensorView\022;\n\026ultrasonic_sensor_v"
  "iew\030\354\007 \003(\0132\032.osi3.UltrasonicSensorView\"U"
  "\n\021GenericSensorView\022@\n\022view_configuratio"
  "n\030\001 \001(\0132$.osi3.GenericSensorViewConfigur"
  "ation\"\236\002\n\017RadarSensorView\022>\n\022view_config"
  "uration\030\001 \001(\0132\".osi3.RadarSensorViewConf"
  "iguration\0224\n\nreflection\030\002 \003(\0132 .osi3.Rad"
  "arSensorView.Reflection\032\224\001\n\nReflection\022\027"
  "\n\017signal_strength\030\001 \001(\001\022\026\n\016time_of_fligh"
  "t\030\002 \001(\001\022\025\n\rdoppler_shift\030\003 \001(\001\022\037\n\027source"
  "_horizontal_angle\030\004 \001(\001\022\035\n\025source_vertic"
  "al_angle\030\005 \001(\001\"\256\002\n\017LidarSensorView\022>\n\022vi"
  "ew_configuration\030\001 \001(\0132\".osi3.LidarSenso"
  "rViewConfiguration\0224\n\nreflection\030\002 \003(\0132 "
  ".osi3.LidarSensorView.Reflection\032\244\001\n\nRef"
  "lection\022\027\n\017signal_strength\030\001 \001(\001\022\026\n\016time"
  "_of_flight\030\002 \001(\001\022\025\n\rdoppler_shift\030\003 \001(\001\022"
  ")\n\021normal_to_surface\030\005 \001(\0132\016.osi3.Vector"
  "3d\022#\n\tobject_id\030\006 \001(\0132\020.osi3.Identifier\""
  "g\n\020CameraSensorView\022\?\n\022view_configuratio"
  "n\030\001 \001(\0132#.osi3.CameraSensorViewConfigura"
  "tion\022\022\n\nimage_data\030\002 \001(\014\"[\n\024UltrasonicSe"
  "nsorView\022C\n\022view_configuration\030\001 \001(\0132\'.o"
  "si3.UltrasonicSensorViewConfigurationB\002H"
  "\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_osi_5fsensorview_2eproto_deps[5] = {
  &::descriptor_table_osi_5fcommon_2eproto,
  &::descriptor_table_osi_5fgroundtruth_2eproto,
  &::descriptor_table_osi_5fhostvehicledata_2eproto,
  &::descriptor_table_osi_5fsensorviewconfiguration_2eproto,
  &::descriptor_table_osi_5fversion_2eproto,
};
static ::_pbi::once_flag descriptor_table_osi_5fsensorview_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_osi_5fsensorview_2eproto = {
    false, false, 1681, descriptor_table_protodef_osi_5fsensorview_2eproto,
    "osi_sensorview.proto",
    &descriptor_table_osi_5fsensorview_2eproto_once, descriptor_table_osi_5fsensorview_2eproto_deps, 5, 8,
    schemas, file_default_instances, TableStruct_osi_5fsensorview_2eproto::offsets,
    file_level_metadata_osi_5fsensorview_2eproto, file_level_enum_descriptors_osi_5fsensorview_2eproto,
    file_level_service_descriptors_osi_5fsensorview_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_osi_5fsensorview_2eproto_getter() {
  return &descriptor_table_osi_5fsensorview_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_osi_5fsensorview_2eproto(&descriptor_table_osi_5fsensorview_2eproto);
namespace osi3 {

// ===================================================================

class SensorView::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorView>()._impl_._has_bits_);
  static const ::osi3::InterfaceVersion& version(const SensorView* msg);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::Timestamp& timestamp(const SensorView* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::Identifier& sensor_id(const SensorView* msg);
  static void set_has_sensor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::osi3::MountingPosition& mounting_position(const SensorView* msg);
  static void set_has_mounting_position(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::osi3::MountingPosition& mounting_position_rmse(const SensorView* msg);
  static void set_has_mounting_position_rmse(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::osi3::HostVehicleData& host_vehicle_data(const SensorView* msg);
  static void set_has_host_vehicle_data(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::osi3::GroundTruth& global_ground_truth(const SensorView* msg);
  static void set_has_global_ground_truth(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::osi3::Identifier& host_vehicle_id(const SensorView* msg);
  static void set_has_host_vehicle_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::osi3::InterfaceVersion&
SensorView::_Internal::version(const SensorView* msg) {
  return *msg->_impl_.version_;
}
const ::osi3::Timestamp&
SensorView::_Internal::timestamp(const SensorView* msg) {
  return *msg->_impl_.timestamp_;
}
const ::osi3::Identifier&
SensorView::_Internal::sensor_id(const SensorView* msg) {
  return *msg->_impl_.sensor_id_;
}
const ::osi3::MountingPosition&
SensorView::_Internal::mounting_position(const SensorView* msg) {
  return *msg->_impl_.mounting_position_;
}
const ::osi3::MountingPosition&
SensorView::_Internal::mounting_position_rmse(const SensorView* msg) {
  return *msg->_impl_.mounting_position_rmse_;
}
const ::osi3::HostVehicleData&
SensorView::_Internal::host_vehicle_data(const SensorView* msg) {
  return *msg->_impl_.host_vehicle_data_;
}
const ::osi3::GroundTruth&
SensorView::_Internal::global_ground_truth(const SensorView* msg) {
  return *msg->_impl_.global_ground_truth_;
}
const ::osi3::Identifier&
SensorView::_Internal::host_vehicle_id(const SensorView* msg) {
  return *msg->_impl_.host_vehicle_id_;
}
void SensorView::clear_version() {
  if (_impl_.version_ != nullptr) _impl_.version_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SensorView::clear_timestamp() {
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void SensorView::clear_sensor_id() {
  if (_impl_.sensor_id_ != nullptr) _impl_.sensor_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void SensorView::clear_mounting_position() {
  if (_impl_.mounting_position_ != nullptr) _impl_.mounting_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void SensorView::clear_mounting_position_rmse() {
  if (_impl_.mounting_position_rmse_ != nullptr) _impl_.mounting_position_rmse_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void SensorView::clear_host_vehicle_data() {
  if (_impl_.host_vehicle_data_ != nullptr) _impl_.host_vehicle_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void SensorView::clear_global_ground_truth() {
  if (_impl_.global_ground_truth_ != nullptr) _impl_.global_ground_truth_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void SensorView::clear_host_vehicle_id() {
  if (_impl_.host_vehicle_id_ != nullptr) _impl_.host_vehicle_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
SensorView::SensorView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.SensorView)
}
SensorView::SensorView(const SensorView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SensorView* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.generic_sensor_view_){from._impl_.generic_sensor_view_}
    , decltype(_impl_.radar_sensor_view_){from._impl_.radar_sensor_view_}
    , decltype(_impl_.lidar_sensor_view_){from._impl_.lidar_sensor_view_}
    , decltype(_impl_.camera_sensor_view_){from._impl_.camera_sensor_view_}
    , decltype(_impl_.ultrasonic_sensor_view_){from._impl_.ultrasonic_sensor_view_}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.sensor_id_){nullptr}
    , decltype(_impl_.mounting_position_){nullptr}
    , decltype(_impl_.mounting_position_rmse_){nullptr}
    , decltype(_impl_.host_vehicle_data_){nullptr}
    , decltype(_impl_.global_ground_truth_){nullptr}
    , decltype(_impl_.host_vehicle_id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_version()) {
    _this->_impl_.version_ = new ::osi3::InterfaceVersion(*from._impl_.version_);
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::osi3::Timestamp(*from._impl_.timestamp_);
  }
  if (from._internal_has_sensor_id()) {
    _this->_impl_.sensor_id_ = new ::osi3::Identifier(*from._impl_.sensor_id_);
  }
  if (from._internal_has_mounting_position()) {
    _this->_impl_.mounting_position_ = new ::osi3::MountingPosition(*from._impl_.mounting_position_);
  }
  if (from._internal_has_mounting_position_rmse()) {
    _this->_impl_.mounting_position_rmse_ = new ::osi3::MountingPosition(*from._impl_.mounting_position_rmse_);
  }
  if (from._internal_has_host_vehicle_data()) {
    _this->_impl_.host_vehicle_data_ = new ::osi3::HostVehicleData(*from._impl_.host_vehicle_data_);
  }
  if (from._internal_has_global_ground_truth()) {
    _this->_impl_.global_ground_truth_ = new ::osi3::GroundTruth(*from._impl_.global_ground_truth_);
  }
  if (from._internal_has_host_vehicle_id()) {
    _this->_impl_.host_vehicle_id_ = new ::osi3::Identifier(*from._impl_.host_vehicle_id_);
  }
  // @@protoc_insertion_point(copy_constructor:osi3.SensorView)
}

inline void SensorView::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.generic_sensor_view_){arena}
    , decltype(_impl_.radar_sensor_view_){arena}
    , decltype(_impl_.lidar_sensor_view_){arena}
    , decltype(_impl_.camera_sensor_view_){arena}
    , decltype(_impl_.ultrasonic_sensor_view_){arena}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.sensor_id_){nullptr}
    , decltype(_impl_.mounting_position_){nullptr}
    , decltype(_impl_.mounting_position_rmse_){nullptr}
    , decltype(_impl_.host_vehicle_data_){nullptr}
    , decltype(_impl_.global_ground_truth_){nullptr}
    , decltype(_impl_.host_vehicle_id_){nullptr}
  };
}

SensorView::~SensorView() {
  // @@protoc_insertion_point(destructor:osi3.SensorView)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SensorView::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.generic_sensor_view_.~RepeatedPtrField();
  _impl_.radar_sensor_view_.~RepeatedPtrField();
  _impl_.lidar_sensor_view_.~RepeatedPtrField();
  _impl_.camera_sensor_view_.~RepeatedPtrField();
  _impl_.ultrasonic_sensor_view_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.version_;
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (this != internal_default_instance()) delete _impl_.sensor_id_;
  if (this != internal_default_instance()) delete _impl_.mounting_position_;
  if (this != internal_default_instance()) delete _impl_.mounting_position_rmse_;
  if (this != internal_default_instance()) delete _impl_.host_vehicle_data_;
  if (this != internal_default_instance()) delete _impl_.global_ground_truth_;
  if (this != internal_default_instance()) delete _impl_.host_vehicle_id_;
}

void SensorView::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SensorView::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.SensorView)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.generic_sensor_view_.Clear();
  _impl_.radar_sensor_view_.Clear();
  _impl_.lidar_sensor_view_.Clear();
  _impl_.camera_sensor_view_.Clear();
  _impl_.ultrasonic_sensor_view_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.version_ != nullptr);
      _impl_.version_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.sensor_id_ != nullptr);
      _impl_.sensor_id_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.mounting_position_ != nullptr);
      _impl_.mounting_position_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.mounting_position_rmse_ != nullptr);
      _impl_.mounting_position_rmse_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.host_vehicle_data_ != nullptr);
      _impl_.host_vehicle_data_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.global_ground_truth_ != nullptr);
      _impl_.global_ground_truth_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.host_vehicle_id_ != nullptr);
      _impl_.host_vehicle_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorView::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.InterfaceVersion version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Identifier sensor_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sensor_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MountingPosition mounting_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mounting_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.MountingPosition mounting_position_rmse = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mounting_position_rmse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.HostVehicleData host_vehicle_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_vehicle_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.GroundTruth global_ground_truth = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_global_ground_truth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Identifier host_vehicle_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_vehicle_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.GenericSensorView generic_sensor_view = 1000;
      case 1000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_generic_sensor_view(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8002>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.RadarSensorView radar_sensor_view = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_radar_sensor_view(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8010>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.LidarSensorView lidar_sensor_view = 1002;
      case 1002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lidar_sensor_view(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8018>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.CameraSensorView camera_sensor_view = 1003;
      case 1003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_camera_sensor_view(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8026>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.UltrasonicSensorView ultrasonic_sensor_view = 1004;
      case 1004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ultrasonic_sensor_view(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8034>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorView::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.SensorView)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.InterfaceVersion version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.Timestamp timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.Identifier sensor_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::sensor_id(this),
        _Internal::sensor_id(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.MountingPosition mounting_position = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::mounting_position(this),
        _Internal::mounting_position(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.MountingPosition mounting_position_rmse = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::mounting_position_rmse(this),
        _Internal::mounting_position_rmse(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.HostVehicleData host_vehicle_data = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::host_vehicle_data(this),
        _Internal::host_vehicle_data(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.GroundTruth global_ground_truth = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::global_ground_truth(this),
        _Internal::global_ground_truth(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.Identifier host_vehicle_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::host_vehicle_id(this),
        _Internal::host_vehicle_id(this).GetCachedSize(), target, stream);
  }

  // repeated .osi3.GenericSensorView generic_sensor_view = 1000;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_generic_sensor_view_size()); i < n; i++) {
    const auto& repfield = this->_internal_generic_sensor_view(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1000, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .osi3.RadarSensorView radar_sensor_view = 1001;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_radar_sensor_view_size()); i < n; i++) {
    const auto& repfield = this->_internal_radar_sensor_view(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1001, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .osi3.LidarSensorView lidar_sensor_view = 1002;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lidar_sensor_view_size()); i < n; i++) {
    const auto& repfield = this->_internal_lidar_sensor_view(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1002, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .osi3.CameraSensorView camera_sensor_view = 1003;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_camera_sensor_view_size()); i < n; i++) {
    const auto& repfield = this->_internal_camera_sensor_view(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1003, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .osi3.UltrasonicSensorView ultrasonic_sensor_view = 1004;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ultrasonic_sensor_view_size()); i < n; i++) {
    const auto& repfield = this->_internal_ultrasonic_sensor_view(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1004, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.SensorView)
  return target;
}

size_t SensorView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.SensorView)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.GenericSensorView generic_sensor_view = 1000;
  total_size += 2UL * this->_internal_generic_sensor_view_size();
  for (const auto& msg : this->_impl_.generic_sensor_view_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.RadarSensorView radar_sensor_view = 1001;
  total_size += 2UL * this->_internal_radar_sensor_view_size();
  for (const auto& msg : this->_impl_.radar_sensor_view_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.LidarSensorView lidar_sensor_view = 1002;
  total_size += 2UL * this->_internal_lidar_sensor_view_size();
  for (const auto& msg : this->_impl_.lidar_sensor_view_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.CameraSensorView camera_sensor_view = 1003;
  total_size += 2UL * this->_internal_camera_sensor_view_size();
  for (const auto& msg : this->_impl_.camera_sensor_view_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osi3.UltrasonicSensorView ultrasonic_sensor_view = 1004;
  total_size += 2UL * this->_internal_ultrasonic_sensor_view_size();
  for (const auto& msg : this->_impl_.ultrasonic_sensor_view_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .osi3.InterfaceVersion version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.version_);
    }

    // optional .osi3.Timestamp timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.timestamp_);
    }

    // optional .osi3.Identifier sensor_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sensor_id_);
    }

    // optional .osi3.MountingPosition mounting_position = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mounting_position_);
    }

    // optional .osi3.MountingPosition mounting_position_rmse = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mounting_position_rmse_);
    }

    // optional .osi3.HostVehicleData host_vehicle_data = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.host_vehicle_data_);
    }

    // optional .osi3.GroundTruth global_ground_truth = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.global_ground_truth_);
    }

    // optional .osi3.Identifier host_vehicle_id = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.host_vehicle_id_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorView::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SensorView::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorView::GetClassData() const { return &_class_data_; }


void SensorView::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SensorView*>(&to_msg);
  auto& from = static_cast<const SensorView&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.SensorView)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.generic_sensor_view_.MergeFrom(from._impl_.generic_sensor_view_);
  _this->_impl_.radar_sensor_view_.MergeFrom(from._impl_.radar_sensor_view_);
  _this->_impl_.lidar_sensor_view_.MergeFrom(from._impl_.lidar_sensor_view_);
  _this->_impl_.camera_sensor_view_.MergeFrom(from._impl_.camera_sensor_view_);
  _this->_impl_.ultrasonic_sensor_view_.MergeFrom(from._impl_.ultrasonic_sensor_view_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_version()->::osi3::InterfaceVersion::MergeFrom(
          from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_timestamp()->::osi3::Timestamp::MergeFrom(
          from._internal_timestamp());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_sensor_id()->::osi3::Identifier::MergeFrom(
          from._internal_sensor_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_mounting_position()->::osi3::MountingPosition::MergeFrom(
          from._internal_mounting_position());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_mounting_position_rmse()->::osi3::MountingPosition::MergeFrom(
          from._internal_mounting_position_rmse());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_host_vehicle_data()->::osi3::HostVehicleData::MergeFrom(
          from._internal_host_vehicle_data());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_global_ground_truth()->::osi3::GroundTruth::MergeFrom(
          from._internal_global_ground_truth());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_host_vehicle_id()->::osi3::Identifier::MergeFrom(
          from._internal_host_vehicle_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorView::CopyFrom(const SensorView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.SensorView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorView::IsInitialized() const {
  return true;
}

void SensorView::InternalSwap(SensorView* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.generic_sensor_view_.InternalSwap(&other->_impl_.generic_sensor_view_);
  _impl_.radar_sensor_view_.InternalSwap(&other->_impl_.radar_sensor_view_);
  _impl_.lidar_sensor_view_.InternalSwap(&other->_impl_.lidar_sensor_view_);
  _impl_.camera_sensor_view_.InternalSwap(&other->_impl_.camera_sensor_view_);
  _impl_.ultrasonic_sensor_view_.InternalSwap(&other->_impl_.ultrasonic_sensor_view_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorView, _impl_.host_vehicle_id_)
      + sizeof(SensorView::_impl_.host_vehicle_id_)
      - PROTOBUF_FIELD_OFFSET(SensorView, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorView::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fsensorview_2eproto_getter, &descriptor_table_osi_5fsensorview_2eproto_once,
      file_level_metadata_osi_5fsensorview_2eproto[0]);
}

// ===================================================================

class GenericSensorView::_Internal {
 public:
  using HasBits = decltype(std::declval<GenericSensorView>()._impl_._has_bits_);
  static const ::osi3::GenericSensorViewConfiguration& view_configuration(const GenericSensorView* msg);
  static void set_has_view_configuration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osi3::GenericSensorViewConfiguration&
GenericSensorView::_Internal::view_configuration(const GenericSensorView* msg) {
  return *msg->_impl_.view_configuration_;
}
void GenericSensorView::clear_view_configuration() {
  if (_impl_.view_configuration_ != nullptr) _impl_.view_configuration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GenericSensorView::GenericSensorView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.GenericSensorView)
}
GenericSensorView::GenericSensorView(const GenericSensorView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenericSensorView* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.view_configuration_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_view_configuration()) {
    _this->_impl_.view_configuration_ = new ::osi3::GenericSensorViewConfiguration(*from._impl_.view_configuration_);
  }
  // @@protoc_insertion_point(copy_constructor:osi3.GenericSensorView)
}

inline void GenericSensorView::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.view_configuration_){nullptr}
  };
}

GenericSensorView::~GenericSensorView() {
  // @@protoc_insertion_point(destructor:osi3.GenericSensorView)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenericSensorView::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.view_configuration_;
}

void GenericSensorView::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenericSensorView::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.GenericSensorView)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.view_configuration_ != nullptr);
    _impl_.view_configuration_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenericSensorView::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.GenericSensorViewConfiguration view_configuration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_view_configuration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GenericSensorView::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.GenericSensorView)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.GenericSensorViewConfiguration view_configuration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::view_configuration(this),
        _Internal::view_configuration(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.GenericSensorView)
  return target;
}

size_t GenericSensorView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.GenericSensorView)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .osi3.GenericSensorViewConfiguration view_configuration = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.view_configuration_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenericSensorView::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenericSensorView::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenericSensorView::GetClassData() const { return &_class_data_; }


void GenericSensorView::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenericSensorView*>(&to_msg);
  auto& from = static_cast<const GenericSensorView&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.GenericSensorView)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_view_configuration()) {
    _this->_internal_mutable_view_configuration()->::osi3::GenericSensorViewConfiguration::MergeFrom(
        from._internal_view_configuration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenericSensorView::CopyFrom(const GenericSensorView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.GenericSensorView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericSensorView::IsInitialized() const {
  return true;
}

void GenericSensorView::InternalSwap(GenericSensorView* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.view_configuration_, other->_impl_.view_configuration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericSensorView::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fsensorview_2eproto_getter, &descriptor_table_osi_5fsensorview_2eproto_once,
      file_level_metadata_osi_5fsensorview_2eproto[1]);
}

// ===================================================================

class RadarSensorView_Reflection::_Internal {
 public:
  using HasBits = decltype(std::declval<RadarSensorView_Reflection>()._impl_._has_bits_);
  static void set_has_signal_strength(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_of_flight(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_doppler_shift(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_source_horizontal_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_source_vertical_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

RadarSensorView_Reflection::RadarSensorView_Reflection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.RadarSensorView.Reflection)
}
RadarSensorView_Reflection::RadarSensorView_Reflection(const RadarSensorView_Reflection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RadarSensorView_Reflection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signal_strength_){}
    , decltype(_impl_.time_of_flight_){}
    , decltype(_impl_.doppler_shift_){}
    , decltype(_impl_.source_horizontal_angle_){}
    , decltype(_impl_.source_vertical_angle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.signal_strength_, &from._impl_.signal_strength_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.source_vertical_angle_) -
    reinterpret_cast<char*>(&_impl_.signal_strength_)) + sizeof(_impl_.source_vertical_angle_));
  // @@protoc_insertion_point(copy_constructor:osi3.RadarSensorView.Reflection)
}

inline void RadarSensorView_Reflection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signal_strength_){0}
    , decltype(_impl_.time_of_flight_){0}
    , decltype(_impl_.doppler_shift_){0}
    , decltype(_impl_.source_horizontal_angle_){0}
    , decltype(_impl_.source_vertical_angle_){0}
  };
}

RadarSensorView_Reflection::~RadarSensorView_Reflection() {
  // @@protoc_insertion_point(destructor:osi3.RadarSensorView.Reflection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RadarSensorView_Reflection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RadarSensorView_Reflection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RadarSensorView_Reflection::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.RadarSensorView.Reflection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.signal_strength_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.source_vertical_angle_) -
        reinterpret_cast<char*>(&_impl_.signal_strength_)) + sizeof(_impl_.source_vertical_angle_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarSensorView_Reflection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double signal_strength = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_signal_strength(&has_bits);
          _impl_.signal_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double time_of_flight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_time_of_flight(&has_bits);
          _impl_.time_of_flight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double doppler_shift = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_doppler_shift(&has_bits);
          _impl_.doppler_shift_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double source_horizontal_angle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_source_horizontal_angle(&has_bits);
          _impl_.source_horizontal_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double source_vertical_angle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_source_vertical_angle(&has_bits);
          _impl_.source_vertical_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RadarSensorView_Reflection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.RadarSensorView.Reflection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double signal_strength = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_signal_strength(), target);
  }

  // optional double time_of_flight = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_time_of_flight(), target);
  }

  // optional double doppler_shift = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_doppler_shift(), target);
  }

  // optional double source_horizontal_angle = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_source_horizontal_angle(), target);
  }

  // optional double source_vertical_angle = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_source_vertical_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.RadarSensorView.Reflection)
  return target;
}

size_t RadarSensorView_Reflection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.RadarSensorView.Reflection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double signal_strength = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double time_of_flight = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double doppler_shift = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double source_horizontal_angle = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double source_vertical_angle = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadarSensorView_Reflection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RadarSensorView_Reflection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadarSensorView_Reflection::GetClassData() const { return &_class_data_; }


void RadarSensorView_Reflection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RadarSensorView_Reflection*>(&to_msg);
  auto& from = static_cast<const RadarSensorView_Reflection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.RadarSensorView.Reflection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.signal_strength_ = from._impl_.signal_strength_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.time_of_flight_ = from._impl_.time_of_flight_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.doppler_shift_ = from._impl_.doppler_shift_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.source_horizontal_angle_ = from._impl_.source_horizontal_angle_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.source_vertical_angle_ = from._impl_.source_vertical_angle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadarSensorView_Reflection::CopyFrom(const RadarSensorView_Reflection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.RadarSensorView.Reflection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarSensorView_Reflection::IsInitialized() const {
  return true;
}

void RadarSensorView_Reflection::InternalSwap(RadarSensorView_Reflection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarSensorView_Reflection, _impl_.source_vertical_angle_)
      + sizeof(RadarSensorView_Reflection::_impl_.source_vertical_angle_)
      - PROTOBUF_FIELD_OFFSET(RadarSensorView_Reflection, _impl_.signal_strength_)>(
          reinterpret_cast<char*>(&_impl_.signal_strength_),
          reinterpret_cast<char*>(&other->_impl_.signal_strength_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarSensorView_Reflection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fsensorview_2eproto_getter, &descriptor_table_osi_5fsensorview_2eproto_once,
      file_level_metadata_osi_5fsensorview_2eproto[2]);
}

// ===================================================================

class RadarSensorView::_Internal {
 public:
  using HasBits = decltype(std::declval<RadarSensorView>()._impl_._has_bits_);
  static const ::osi3::RadarSensorViewConfiguration& view_configuration(const RadarSensorView* msg);
  static void set_has_view_configuration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osi3::RadarSensorViewConfiguration&
RadarSensorView::_Internal::view_configuration(const RadarSensorView* msg) {
  return *msg->_impl_.view_configuration_;
}
void RadarSensorView::clear_view_configuration() {
  if (_impl_.view_configuration_ != nullptr) _impl_.view_configuration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RadarSensorView::RadarSensorView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.RadarSensorView)
}
RadarSensorView::RadarSensorView(const RadarSensorView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RadarSensorView* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reflection_){from._impl_.reflection_}
    , decltype(_impl_.view_configuration_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_view_configuration()) {
    _this->_impl_.view_configuration_ = new ::osi3::RadarSensorViewConfiguration(*from._impl_.view_configuration_);
  }
  // @@protoc_insertion_point(copy_constructor:osi3.RadarSensorView)
}

inline void RadarSensorView::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reflection_){arena}
    , decltype(_impl_.view_configuration_){nullptr}
  };
}

RadarSensorView::~RadarSensorView() {
  // @@protoc_insertion_point(destructor:osi3.RadarSensorView)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RadarSensorView::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reflection_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.view_configuration_;
}

void RadarSensorView::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RadarSensorView::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.RadarSensorView)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reflection_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.view_configuration_ != nullptr);
    _impl_.view_configuration_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarSensorView::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.RadarSensorViewConfiguration view_configuration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_view_configuration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.RadarSensorView.Reflection reflection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reflection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RadarSensorView::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.RadarSensorView)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.RadarSensorViewConfiguration view_configuration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::view_configuration(this),
        _Internal::view_configuration(this).GetCachedSize(), target, stream);
  }

  // repeated .osi3.RadarSensorView.Reflection reflection = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_reflection_size()); i < n; i++) {
    const auto& repfield = this->_internal_reflection(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.RadarSensorView)
  return target;
}

size_t RadarSensorView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.RadarSensorView)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.RadarSensorView.Reflection reflection = 2;
  total_size += 1UL * this->_internal_reflection_size();
  for (const auto& msg : this->_impl_.reflection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .osi3.RadarSensorViewConfiguration view_configuration = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.view_configuration_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadarSensorView::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RadarSensorView::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadarSensorView::GetClassData() const { return &_class_data_; }


void RadarSensorView::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RadarSensorView*>(&to_msg);
  auto& from = static_cast<const RadarSensorView&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.RadarSensorView)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.reflection_.MergeFrom(from._impl_.reflection_);
  if (from._internal_has_view_configuration()) {
    _this->_internal_mutable_view_configuration()->::osi3::RadarSensorViewConfiguration::MergeFrom(
        from._internal_view_configuration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadarSensorView::CopyFrom(const RadarSensorView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.RadarSensorView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarSensorView::IsInitialized() const {
  return true;
}

void RadarSensorView::InternalSwap(RadarSensorView* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.reflection_.InternalSwap(&other->_impl_.reflection_);
  swap(_impl_.view_configuration_, other->_impl_.view_configuration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarSensorView::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fsensorview_2eproto_getter, &descriptor_table_osi_5fsensorview_2eproto_once,
      file_level_metadata_osi_5fsensorview_2eproto[3]);
}

// ===================================================================

class LidarSensorView_Reflection::_Internal {
 public:
  using HasBits = decltype(std::declval<LidarSensorView_Reflection>()._impl_._has_bits_);
  static void set_has_signal_strength(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_of_flight(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_doppler_shift(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::osi3::Vector3d& normal_to_surface(const LidarSensorView_Reflection* msg);
  static void set_has_normal_to_surface(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::Identifier& object_id(const LidarSensorView_Reflection* msg);
  static void set_has_object_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::osi3::Vector3d&
LidarSensorView_Reflection::_Internal::normal_to_surface(const LidarSensorView_Reflection* msg) {
  return *msg->_impl_.normal_to_surface_;
}
const ::osi3::Identifier&
LidarSensorView_Reflection::_Internal::object_id(const LidarSensorView_Reflection* msg) {
  return *msg->_impl_.object_id_;
}
void LidarSensorView_Reflection::clear_normal_to_surface() {
  if (_impl_.normal_to_surface_ != nullptr) _impl_.normal_to_surface_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LidarSensorView_Reflection::clear_object_id() {
  if (_impl_.object_id_ != nullptr) _impl_.object_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
LidarSensorView_Reflection::LidarSensorView_Reflection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.LidarSensorView.Reflection)
}
LidarSensorView_Reflection::LidarSensorView_Reflection(const LidarSensorView_Reflection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LidarSensorView_Reflection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.normal_to_surface_){nullptr}
    , decltype(_impl_.object_id_){nullptr}
    , decltype(_impl_.signal_strength_){}
    , decltype(_impl_.time_of_flight_){}
    , decltype(_impl_.doppler_shift_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_normal_to_surface()) {
    _this->_impl_.normal_to_surface_ = new ::osi3::Vector3d(*from._impl_.normal_to_surface_);
  }
  if (from._internal_has_object_id()) {
    _this->_impl_.object_id_ = new ::osi3::Identifier(*from._impl_.object_id_);
  }
  ::memcpy(&_impl_.signal_strength_, &from._impl_.signal_strength_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.doppler_shift_) -
    reinterpret_cast<char*>(&_impl_.signal_strength_)) + sizeof(_impl_.doppler_shift_));
  // @@protoc_insertion_point(copy_constructor:osi3.LidarSensorView.Reflection)
}

inline void LidarSensorView_Reflection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.normal_to_surface_){nullptr}
    , decltype(_impl_.object_id_){nullptr}
    , decltype(_impl_.signal_strength_){0}
    , decltype(_impl_.time_of_flight_){0}
    , decltype(_impl_.doppler_shift_){0}
  };
}

LidarSensorView_Reflection::~LidarSensorView_Reflection() {
  // @@protoc_insertion_point(destructor:osi3.LidarSensorView.Reflection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LidarSensorView_Reflection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.normal_to_surface_;
  if (this != internal_default_instance()) delete _impl_.object_id_;
}

void LidarSensorView_Reflection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LidarSensorView_Reflection::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LidarSensorView.Reflection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.normal_to_surface_ != nullptr);
      _impl_.normal_to_surface_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.object_id_ != nullptr);
      _impl_.object_id_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.signal_strength_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.doppler_shift_) -
        reinterpret_cast<char*>(&_impl_.signal_strength_)) + sizeof(_impl_.doppler_shift_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LidarSensorView_Reflection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double signal_strength = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_signal_strength(&has_bits);
          _impl_.signal_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double time_of_flight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_time_of_flight(&has_bits);
          _impl_.time_of_flight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double doppler_shift = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_doppler_shift(&has_bits);
          _impl_.doppler_shift_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Vector3d normal_to_surface = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_normal_to_surface(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.Identifier object_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LidarSensorView_Reflection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LidarSensorView.Reflection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double signal_strength = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_signal_strength(), target);
  }

  // optional double time_of_flight = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_time_of_flight(), target);
  }

  // optional double doppler_shift = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_doppler_shift(), target);
  }

  // optional .osi3.Vector3d normal_to_surface = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::normal_to_surface(this),
        _Internal::normal_to_surface(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.Identifier object_id = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::object_id(this),
        _Internal::object_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LidarSensorView.Reflection)
  return target;
}

size_t LidarSensorView_Reflection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LidarSensorView.Reflection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .osi3.Vector3d normal_to_surface = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.normal_to_surface_);
    }

    // optional .osi3.Identifier object_id = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.object_id_);
    }

    // optional double signal_strength = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double time_of_flight = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double doppler_shift = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LidarSensorView_Reflection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LidarSensorView_Reflection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LidarSensorView_Reflection::GetClassData() const { return &_class_data_; }


void LidarSensorView_Reflection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LidarSensorView_Reflection*>(&to_msg);
  auto& from = static_cast<const LidarSensorView_Reflection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.LidarSensorView.Reflection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_normal_to_surface()->::osi3::Vector3d::MergeFrom(
          from._internal_normal_to_surface());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_object_id()->::osi3::Identifier::MergeFrom(
          from._internal_object_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.signal_strength_ = from._impl_.signal_strength_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.time_of_flight_ = from._impl_.time_of_flight_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.doppler_shift_ = from._impl_.doppler_shift_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LidarSensorView_Reflection::CopyFrom(const LidarSensorView_Reflection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LidarSensorView.Reflection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarSensorView_Reflection::IsInitialized() const {
  return true;
}

void LidarSensorView_Reflection::InternalSwap(LidarSensorView_Reflection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LidarSensorView_Reflection, _impl_.doppler_shift_)
      + sizeof(LidarSensorView_Reflection::_impl_.doppler_shift_)
      - PROTOBUF_FIELD_OFFSET(LidarSensorView_Reflection, _impl_.normal_to_surface_)>(
          reinterpret_cast<char*>(&_impl_.normal_to_surface_),
          reinterpret_cast<char*>(&other->_impl_.normal_to_surface_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LidarSensorView_Reflection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fsensorview_2eproto_getter, &descriptor_table_osi_5fsensorview_2eproto_once,
      file_level_metadata_osi_5fsensorview_2eproto[4]);
}

// ===================================================================

class LidarSensorView::_Internal {
 public:
  using HasBits = decltype(std::declval<LidarSensorView>()._impl_._has_bits_);
  static const ::osi3::LidarSensorViewConfiguration& view_configuration(const LidarSensorView* msg);
  static void set_has_view_configuration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osi3::LidarSensorViewConfiguration&
LidarSensorView::_Internal::view_configuration(const LidarSensorView* msg) {
  return *msg->_impl_.view_configuration_;
}
void LidarSensorView::clear_view_configuration() {
  if (_impl_.view_configuration_ != nullptr) _impl_.view_configuration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LidarSensorView::LidarSensorView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.LidarSensorView)
}
LidarSensorView::LidarSensorView(const LidarSensorView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LidarSensorView* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reflection_){from._impl_.reflection_}
    , decltype(_impl_.view_configuration_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_view_configuration()) {
    _this->_impl_.view_configuration_ = new ::osi3::LidarSensorViewConfiguration(*from._impl_.view_configuration_);
  }
  // @@protoc_insertion_point(copy_constructor:osi3.LidarSensorView)
}

inline void LidarSensorView::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reflection_){arena}
    , decltype(_impl_.view_configuration_){nullptr}
  };
}

LidarSensorView::~LidarSensorView() {
  // @@protoc_insertion_point(destructor:osi3.LidarSensorView)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LidarSensorView::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reflection_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.view_configuration_;
}

void LidarSensorView::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LidarSensorView::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LidarSensorView)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reflection_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.view_configuration_ != nullptr);
    _impl_.view_configuration_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LidarSensorView::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.LidarSensorViewConfiguration view_configuration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_view_configuration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.LidarSensorView.Reflection reflection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reflection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LidarSensorView::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LidarSensorView)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.LidarSensorViewConfiguration view_configuration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::view_configuration(this),
        _Internal::view_configuration(this).GetCachedSize(), target, stream);
  }

  // repeated .osi3.LidarSensorView.Reflection reflection = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_reflection_size()); i < n; i++) {
    const auto& repfield = this->_internal_reflection(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LidarSensorView)
  return target;
}

size_t LidarSensorView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LidarSensorView)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.LidarSensorView.Reflection reflection = 2;
  total_size += 1UL * this->_internal_reflection_size();
  for (const auto& msg : this->_impl_.reflection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .osi3.LidarSensorViewConfiguration view_configuration = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.view_configuration_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LidarSensorView::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LidarSensorView::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LidarSensorView::GetClassData() const { return &_class_data_; }


void LidarSensorView::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LidarSensorView*>(&to_msg);
  auto& from = static_cast<const LidarSensorView&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.LidarSensorView)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.reflection_.MergeFrom(from._impl_.reflection_);
  if (from._internal_has_view_configuration()) {
    _this->_internal_mutable_view_configuration()->::osi3::LidarSensorViewConfiguration::MergeFrom(
        from._internal_view_configuration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LidarSensorView::CopyFrom(const LidarSensorView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LidarSensorView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarSensorView::IsInitialized() const {
  return true;
}

void LidarSensorView::InternalSwap(LidarSensorView* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.reflection_.InternalSwap(&other->_impl_.reflection_);
  swap(_impl_.view_configuration_, other->_impl_.view_configuration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LidarSensorView::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fsensorview_2eproto_getter, &descriptor_table_osi_5fsensorview_2eproto_once,
      file_level_metadata_osi_5fsensorview_2eproto[5]);
}

// ===================================================================

class CameraSensorView::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraSensorView>()._impl_._has_bits_);
  static const ::osi3::CameraSensorViewConfiguration& view_configuration(const CameraSensorView* msg);
  static void set_has_view_configuration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_image_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osi3::CameraSensorViewConfiguration&
CameraSensorView::_Internal::view_configuration(const CameraSensorView* msg) {
  return *msg->_impl_.view_configuration_;
}
void CameraSensorView::clear_view_configuration() {
  if (_impl_.view_configuration_ != nullptr) _impl_.view_configuration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CameraSensorView::CameraSensorView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.CameraSensorView)
}
CameraSensorView::CameraSensorView(const CameraSensorView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CameraSensorView* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.image_data_){}
    , decltype(_impl_.view_configuration_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.image_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_image_data()) {
    _this->_impl_.image_data_.Set(from._internal_image_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_view_configuration()) {
    _this->_impl_.view_configuration_ = new ::osi3::CameraSensorViewConfiguration(*from._impl_.view_configuration_);
  }
  // @@protoc_insertion_point(copy_constructor:osi3.CameraSensorView)
}

inline void CameraSensorView::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.image_data_){}
    , decltype(_impl_.view_configuration_){nullptr}
  };
  _impl_.image_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CameraSensorView::~CameraSensorView() {
  // @@protoc_insertion_point(destructor:osi3.CameraSensorView)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CameraSensorView::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.image_data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.view_configuration_;
}

void CameraSensorView::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CameraSensorView::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.CameraSensorView)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.image_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.view_configuration_ != nullptr);
      _impl_.view_configuration_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraSensorView::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.CameraSensorViewConfiguration view_configuration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_view_configuration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes image_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_image_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CameraSensorView::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.CameraSensorView)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.CameraSensorViewConfiguration view_configuration = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::view_configuration(this),
        _Internal::view_configuration(this).GetCachedSize(), target, stream);
  }

  // optional bytes image_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_image_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.CameraSensorView)
  return target;
}

size_t CameraSensorView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.CameraSensorView)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes image_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_image_data());
    }

    // optional .osi3.CameraSensorViewConfiguration view_configuration = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.view_configuration_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraSensorView::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CameraSensorView::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraSensorView::GetClassData() const { return &_class_data_; }


void CameraSensorView::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CameraSensorView*>(&to_msg);
  auto& from = static_cast<const CameraSensorView&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.CameraSensorView)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_image_data(from._internal_image_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_view_configuration()->::osi3::CameraSensorViewConfiguration::MergeFrom(
          from._internal_view_configuration());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraSensorView::CopyFrom(const CameraSensorView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.CameraSensorView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraSensorView::IsInitialized() const {
  return true;
}

void CameraSensorView::InternalSwap(CameraSensorView* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.image_data_, lhs_arena,
      &other->_impl_.image_data_, rhs_arena
  );
  swap(_impl_.view_configuration_, other->_impl_.view_configuration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraSensorView::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fsensorview_2eproto_getter, &descriptor_table_osi_5fsensorview_2eproto_once,
      file_level_metadata_osi_5fsensorview_2eproto[6]);
}

// ===================================================================

class UltrasonicSensorView::_Internal {
 public:
  using HasBits = decltype(std::declval<UltrasonicSensorView>()._impl_._has_bits_);
  static const ::osi3::UltrasonicSensorViewConfiguration& view_configuration(const UltrasonicSensorView* msg);
  static void set_has_view_configuration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osi3::UltrasonicSensorViewConfiguration&
UltrasonicSensorView::_Internal::view_configuration(const UltrasonicSensorView* msg) {
  return *msg->_impl_.view_configuration_;
}
void UltrasonicSensorView::clear_view_configuration() {
  if (_impl_.view_configuration_ != nullptr) _impl_.view_configuration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
UltrasonicSensorView::UltrasonicSensorView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.UltrasonicSensorView)
}
UltrasonicSensorView::UltrasonicSensorView(const UltrasonicSensorView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UltrasonicSensorView* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.view_configuration_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_view_configuration()) {
    _this->_impl_.view_configuration_ = new ::osi3::UltrasonicSensorViewConfiguration(*from._impl_.view_configuration_);
  }
  // @@protoc_insertion_point(copy_constructor:osi3.UltrasonicSensorView)
}

inline void UltrasonicSensorView::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.view_configuration_){nullptr}
  };
}

UltrasonicSensorView::~UltrasonicSensorView() {
  // @@protoc_insertion_point(destructor:osi3.UltrasonicSensorView)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UltrasonicSensorView::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.view_configuration_;
}

void UltrasonicSensorView::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UltrasonicSensorView::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.UltrasonicSensorView)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.view_configuration_ != nullptr);
    _impl_.view_configuration_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UltrasonicSensorView::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.UltrasonicSensorViewConfiguration view_configuration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_view_configuration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UltrasonicSensorView::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.UltrasonicSensorView)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.UltrasonicSensorViewConfiguration view_configuration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::view_configuration(this),
        _Internal::view_configuration(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.UltrasonicSensorView)
  return target;
}

size_t UltrasonicSensorView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.UltrasonicSensorView)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .osi3.UltrasonicSensorViewConfiguration view_configuration = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.view_configuration_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UltrasonicSensorView::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UltrasonicSensorView::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UltrasonicSensorView::GetClassData() const { return &_class_data_; }


void UltrasonicSensorView::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UltrasonicSensorView*>(&to_msg);
  auto& from = static_cast<const UltrasonicSensorView&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.UltrasonicSensorView)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_view_configuration()) {
    _this->_internal_mutable_view_configuration()->::osi3::UltrasonicSensorViewConfiguration::MergeFrom(
        from._internal_view_configuration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UltrasonicSensorView::CopyFrom(const UltrasonicSensorView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.UltrasonicSensorView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltrasonicSensorView::IsInitialized() const {
  return true;
}

void UltrasonicSensorView::InternalSwap(UltrasonicSensorView* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.view_configuration_, other->_impl_.view_configuration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UltrasonicSensorView::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fsensorview_2eproto_getter, &descriptor_table_osi_5fsensorview_2eproto_once,
      file_level_metadata_osi_5fsensorview_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::SensorView*
Arena::CreateMaybeMessage< ::osi3::SensorView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::SensorView >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::GenericSensorView*
Arena::CreateMaybeMessage< ::osi3::GenericSensorView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::GenericSensorView >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::RadarSensorView_Reflection*
Arena::CreateMaybeMessage< ::osi3::RadarSensorView_Reflection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::RadarSensorView_Reflection >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::RadarSensorView*
Arena::CreateMaybeMessage< ::osi3::RadarSensorView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::RadarSensorView >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::LidarSensorView_Reflection*
Arena::CreateMaybeMessage< ::osi3::LidarSensorView_Reflection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::LidarSensorView_Reflection >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::LidarSensorView*
Arena::CreateMaybeMessage< ::osi3::LidarSensorView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::LidarSensorView >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::CameraSensorView*
Arena::CreateMaybeMessage< ::osi3::CameraSensorView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::CameraSensorView >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::UltrasonicSensorView*
Arena::CreateMaybeMessage< ::osi3::UltrasonicSensorView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::UltrasonicSensorView >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

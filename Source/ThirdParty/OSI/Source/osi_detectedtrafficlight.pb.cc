// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_detectedtrafficlight.proto

#include "osi_detectedtrafficlight.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace osi3 {
PROTOBUF_CONSTEXPR DetectedTrafficLight_CandidateTrafficLight::DetectedTrafficLight_CandidateTrafficLight(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.classification_)*/nullptr
  , /*decltype(_impl_.probability_)*/0} {}
struct DetectedTrafficLight_CandidateTrafficLightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetectedTrafficLight_CandidateTrafficLightDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetectedTrafficLight_CandidateTrafficLightDefaultTypeInternal() {}
  union {
    DetectedTrafficLight_CandidateTrafficLight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetectedTrafficLight_CandidateTrafficLightDefaultTypeInternal _DetectedTrafficLight_CandidateTrafficLight_default_instance_;
PROTOBUF_CONSTEXPR DetectedTrafficLight::DetectedTrafficLight(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.candidate_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.base_rmse_)*/nullptr
  , /*decltype(_impl_.color_description_)*/nullptr} {}
struct DetectedTrafficLightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetectedTrafficLightDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetectedTrafficLightDefaultTypeInternal() {}
  union {
    DetectedTrafficLight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetectedTrafficLightDefaultTypeInternal _DetectedTrafficLight_default_instance_;
}  // namespace osi3
static ::_pb::Metadata file_level_metadata_osi_5fdetectedtrafficlight_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_osi_5fdetectedtrafficlight_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_osi_5fdetectedtrafficlight_2eproto = nullptr;

const uint32_t TableStruct_osi_5fdetectedtrafficlight_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficLight_CandidateTrafficLight, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficLight_CandidateTrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficLight_CandidateTrafficLight, _impl_.probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficLight_CandidateTrafficLight, _impl_.classification_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficLight, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficLight, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficLight, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficLight, _impl_.base_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficLight, _impl_.candidate_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficLight, _impl_.color_description_),
  0,
  1,
  2,
  ~0u,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::osi3::DetectedTrafficLight_CandidateTrafficLight)},
  { 10, 21, -1, sizeof(::osi3::DetectedTrafficLight)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::osi3::_DetectedTrafficLight_CandidateTrafficLight_default_instance_._instance,
  &::osi3::_DetectedTrafficLight_default_instance_._instance,
};

const char descriptor_table_protodef_osi_5fdetectedtrafficlight_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036osi_detectedtrafficlight.proto\022\004osi3\032\020"
  "osi_common.proto\032\026osi_trafficlight.proto"
  "\032\030osi_detectedobject.proto\"\356\002\n\024DetectedT"
  "rafficLight\022(\n\006header\030\001 \001(\0132\030.osi3.Detec"
  "tedItemHeader\022\"\n\004base\030\002 \001(\0132\024.osi3.BaseS"
  "tationary\022\'\n\tbase_rmse\030\003 \001(\0132\024.osi3.Base"
  "Stationary\022C\n\tcandidate\030\004 \003(\01320.osi3.Det"
  "ectedTrafficLight.CandidateTrafficLight\022"
  "1\n\021color_description\030\005 \001(\0132\026.osi3.ColorD"
  "escription\032g\n\025CandidateTrafficLight\022\023\n\013p"
  "robability\030\001 \001(\001\0229\n\016classification\030\002 \001(\013"
  "2!.osi3.TrafficLight.ClassificationB\002H\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_osi_5fdetectedtrafficlight_2eproto_deps[3] = {
  &::descriptor_table_osi_5fcommon_2eproto,
  &::descriptor_table_osi_5fdetectedobject_2eproto,
  &::descriptor_table_osi_5ftrafficlight_2eproto,
};
static ::_pbi::once_flag descriptor_table_osi_5fdetectedtrafficlight_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_osi_5fdetectedtrafficlight_2eproto = {
    false, false, 479, descriptor_table_protodef_osi_5fdetectedtrafficlight_2eproto,
    "osi_detectedtrafficlight.proto",
    &descriptor_table_osi_5fdetectedtrafficlight_2eproto_once, descriptor_table_osi_5fdetectedtrafficlight_2eproto_deps, 3, 2,
    schemas, file_default_instances, TableStruct_osi_5fdetectedtrafficlight_2eproto::offsets,
    file_level_metadata_osi_5fdetectedtrafficlight_2eproto, file_level_enum_descriptors_osi_5fdetectedtrafficlight_2eproto,
    file_level_service_descriptors_osi_5fdetectedtrafficlight_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_osi_5fdetectedtrafficlight_2eproto_getter() {
  return &descriptor_table_osi_5fdetectedtrafficlight_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_osi_5fdetectedtrafficlight_2eproto(&descriptor_table_osi_5fdetectedtrafficlight_2eproto);
namespace osi3 {

// ===================================================================

class DetectedTrafficLight_CandidateTrafficLight::_Internal {
 public:
  using HasBits = decltype(std::declval<DetectedTrafficLight_CandidateTrafficLight>()._impl_._has_bits_);
  static void set_has_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::TrafficLight_Classification& classification(const DetectedTrafficLight_CandidateTrafficLight* msg);
  static void set_has_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::osi3::TrafficLight_Classification&
DetectedTrafficLight_CandidateTrafficLight::_Internal::classification(const DetectedTrafficLight_CandidateTrafficLight* msg) {
  return *msg->_impl_.classification_;
}
void DetectedTrafficLight_CandidateTrafficLight::clear_classification() {
  if (_impl_.classification_ != nullptr) _impl_.classification_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DetectedTrafficLight_CandidateTrafficLight::DetectedTrafficLight_CandidateTrafficLight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.DetectedTrafficLight.CandidateTrafficLight)
}
DetectedTrafficLight_CandidateTrafficLight::DetectedTrafficLight_CandidateTrafficLight(const DetectedTrafficLight_CandidateTrafficLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DetectedTrafficLight_CandidateTrafficLight* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.classification_){nullptr}
    , decltype(_impl_.probability_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_classification()) {
    _this->_impl_.classification_ = new ::osi3::TrafficLight_Classification(*from._impl_.classification_);
  }
  _this->_impl_.probability_ = from._impl_.probability_;
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedTrafficLight.CandidateTrafficLight)
}

inline void DetectedTrafficLight_CandidateTrafficLight::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.classification_){nullptr}
    , decltype(_impl_.probability_){0}
  };
}

DetectedTrafficLight_CandidateTrafficLight::~DetectedTrafficLight_CandidateTrafficLight() {
  // @@protoc_insertion_point(destructor:osi3.DetectedTrafficLight.CandidateTrafficLight)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DetectedTrafficLight_CandidateTrafficLight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.classification_;
}

void DetectedTrafficLight_CandidateTrafficLight::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DetectedTrafficLight_CandidateTrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedTrafficLight.CandidateTrafficLight)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.classification_ != nullptr);
    _impl_.classification_->Clear();
  }
  _impl_.probability_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectedTrafficLight_CandidateTrafficLight::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_probability(&has_bits);
          _impl_.probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.TrafficLight.Classification classification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_classification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DetectedTrafficLight_CandidateTrafficLight::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedTrafficLight.CandidateTrafficLight)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_probability(), target);
  }

  // optional .osi3.TrafficLight.Classification classification = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::classification(this),
        _Internal::classification(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedTrafficLight.CandidateTrafficLight)
  return target;
}

size_t DetectedTrafficLight_CandidateTrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedTrafficLight.CandidateTrafficLight)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .osi3.TrafficLight.Classification classification = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.classification_);
    }

    // optional double probability = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectedTrafficLight_CandidateTrafficLight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DetectedTrafficLight_CandidateTrafficLight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectedTrafficLight_CandidateTrafficLight::GetClassData() const { return &_class_data_; }


void DetectedTrafficLight_CandidateTrafficLight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DetectedTrafficLight_CandidateTrafficLight*>(&to_msg);
  auto& from = static_cast<const DetectedTrafficLight_CandidateTrafficLight&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedTrafficLight.CandidateTrafficLight)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_classification()->::osi3::TrafficLight_Classification::MergeFrom(
          from._internal_classification());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.probability_ = from._impl_.probability_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectedTrafficLight_CandidateTrafficLight::CopyFrom(const DetectedTrafficLight_CandidateTrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedTrafficLight.CandidateTrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedTrafficLight_CandidateTrafficLight::IsInitialized() const {
  return true;
}

void DetectedTrafficLight_CandidateTrafficLight::InternalSwap(DetectedTrafficLight_CandidateTrafficLight* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectedTrafficLight_CandidateTrafficLight, _impl_.probability_)
      + sizeof(DetectedTrafficLight_CandidateTrafficLight::_impl_.probability_)
      - PROTOBUF_FIELD_OFFSET(DetectedTrafficLight_CandidateTrafficLight, _impl_.classification_)>(
          reinterpret_cast<char*>(&_impl_.classification_),
          reinterpret_cast<char*>(&other->_impl_.classification_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedTrafficLight_CandidateTrafficLight::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fdetectedtrafficlight_2eproto_getter, &descriptor_table_osi_5fdetectedtrafficlight_2eproto_once,
      file_level_metadata_osi_5fdetectedtrafficlight_2eproto[0]);
}

// ===================================================================

class DetectedTrafficLight::_Internal {
 public:
  using HasBits = decltype(std::declval<DetectedTrafficLight>()._impl_._has_bits_);
  static const ::osi3::DetectedItemHeader& header(const DetectedTrafficLight* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::osi3::BaseStationary& base(const DetectedTrafficLight* msg);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::osi3::BaseStationary& base_rmse(const DetectedTrafficLight* msg);
  static void set_has_base_rmse(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::osi3::ColorDescription& color_description(const DetectedTrafficLight* msg);
  static void set_has_color_description(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::osi3::DetectedItemHeader&
DetectedTrafficLight::_Internal::header(const DetectedTrafficLight* msg) {
  return *msg->_impl_.header_;
}
const ::osi3::BaseStationary&
DetectedTrafficLight::_Internal::base(const DetectedTrafficLight* msg) {
  return *msg->_impl_.base_;
}
const ::osi3::BaseStationary&
DetectedTrafficLight::_Internal::base_rmse(const DetectedTrafficLight* msg) {
  return *msg->_impl_.base_rmse_;
}
const ::osi3::ColorDescription&
DetectedTrafficLight::_Internal::color_description(const DetectedTrafficLight* msg) {
  return *msg->_impl_.color_description_;
}
void DetectedTrafficLight::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void DetectedTrafficLight::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void DetectedTrafficLight::clear_base_rmse() {
  if (_impl_.base_rmse_ != nullptr) _impl_.base_rmse_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void DetectedTrafficLight::clear_color_description() {
  if (_impl_.color_description_ != nullptr) _impl_.color_description_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
DetectedTrafficLight::DetectedTrafficLight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:osi3.DetectedTrafficLight)
}
DetectedTrafficLight::DetectedTrafficLight(const DetectedTrafficLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DetectedTrafficLight* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.candidate_){from._impl_.candidate_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.base_rmse_){nullptr}
    , decltype(_impl_.color_description_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::osi3::DetectedItemHeader(*from._impl_.header_);
  }
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::osi3::BaseStationary(*from._impl_.base_);
  }
  if (from._internal_has_base_rmse()) {
    _this->_impl_.base_rmse_ = new ::osi3::BaseStationary(*from._impl_.base_rmse_);
  }
  if (from._internal_has_color_description()) {
    _this->_impl_.color_description_ = new ::osi3::ColorDescription(*from._impl_.color_description_);
  }
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedTrafficLight)
}

inline void DetectedTrafficLight::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.candidate_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.base_rmse_){nullptr}
    , decltype(_impl_.color_description_){nullptr}
  };
}

DetectedTrafficLight::~DetectedTrafficLight() {
  // @@protoc_insertion_point(destructor:osi3.DetectedTrafficLight)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DetectedTrafficLight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.candidate_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.base_;
  if (this != internal_default_instance()) delete _impl_.base_rmse_;
  if (this != internal_default_instance()) delete _impl_.color_description_;
}

void DetectedTrafficLight::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DetectedTrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedTrafficLight)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.candidate_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.base_ != nullptr);
      _impl_.base_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.base_rmse_ != nullptr);
      _impl_.base_rmse_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.color_description_ != nullptr);
      _impl_.color_description_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectedTrafficLight::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .osi3.DetectedItemHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.BaseStationary base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.BaseStationary base_rmse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_rmse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .osi3.DetectedTrafficLight.CandidateTrafficLight candidate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candidate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .osi3.ColorDescription color_description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_color_description(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DetectedTrafficLight::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedTrafficLight)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .osi3.DetectedItemHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.BaseStationary base = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // optional .osi3.BaseStationary base_rmse = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::base_rmse(this),
        _Internal::base_rmse(this).GetCachedSize(), target, stream);
  }

  // repeated .osi3.DetectedTrafficLight.CandidateTrafficLight candidate = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_candidate_size()); i < n; i++) {
    const auto& repfield = this->_internal_candidate(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .osi3.ColorDescription color_description = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::color_description(this),
        _Internal::color_description(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedTrafficLight)
  return target;
}

size_t DetectedTrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedTrafficLight)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.DetectedTrafficLight.CandidateTrafficLight candidate = 4;
  total_size += 1UL * this->_internal_candidate_size();
  for (const auto& msg : this->_impl_.candidate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .osi3.DetectedItemHeader header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .osi3.BaseStationary base = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.base_);
    }

    // optional .osi3.BaseStationary base_rmse = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.base_rmse_);
    }

    // optional .osi3.ColorDescription color_description = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.color_description_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectedTrafficLight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DetectedTrafficLight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectedTrafficLight::GetClassData() const { return &_class_data_; }


void DetectedTrafficLight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DetectedTrafficLight*>(&to_msg);
  auto& from = static_cast<const DetectedTrafficLight&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedTrafficLight)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.candidate_.MergeFrom(from._impl_.candidate_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::osi3::DetectedItemHeader::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_base()->::osi3::BaseStationary::MergeFrom(
          from._internal_base());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_base_rmse()->::osi3::BaseStationary::MergeFrom(
          from._internal_base_rmse());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_color_description()->::osi3::ColorDescription::MergeFrom(
          from._internal_color_description());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectedTrafficLight::CopyFrom(const DetectedTrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedTrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedTrafficLight::IsInitialized() const {
  return true;
}

void DetectedTrafficLight::InternalSwap(DetectedTrafficLight* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.candidate_.InternalSwap(&other->_impl_.candidate_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectedTrafficLight, _impl_.color_description_)
      + sizeof(DetectedTrafficLight::_impl_.color_description_)
      - PROTOBUF_FIELD_OFFSET(DetectedTrafficLight, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedTrafficLight::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_osi_5fdetectedtrafficlight_2eproto_getter, &descriptor_table_osi_5fdetectedtrafficlight_2eproto_once,
      file_level_metadata_osi_5fdetectedtrafficlight_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::DetectedTrafficLight_CandidateTrafficLight*
Arena::CreateMaybeMessage< ::osi3::DetectedTrafficLight_CandidateTrafficLight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::DetectedTrafficLight_CandidateTrafficLight >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::DetectedTrafficLight*
Arena::CreateMaybeMessage< ::osi3::DetectedTrafficLight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osi3::DetectedTrafficLight >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

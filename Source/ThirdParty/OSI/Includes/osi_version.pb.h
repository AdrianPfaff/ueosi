// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_version.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_osi_5fversion_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_osi_5fversion_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_osi_5fversion_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_osi_5fversion_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fversion_2eproto;
namespace osi3 {
class InterfaceVersion;
struct InterfaceVersionDefaultTypeInternal;
extern InterfaceVersionDefaultTypeInternal _InterfaceVersion_default_instance_;
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> ::osi3::InterfaceVersion* Arena::CreateMaybeMessage<::osi3::InterfaceVersion>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace osi3 {

// ===================================================================

class InterfaceVersion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.InterfaceVersion) */ {
 public:
  inline InterfaceVersion() : InterfaceVersion(nullptr) {}
  ~InterfaceVersion() override;
  explicit PROTOBUF_CONSTEXPR InterfaceVersion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InterfaceVersion(const InterfaceVersion& from);
  InterfaceVersion(InterfaceVersion&& from) noexcept
    : InterfaceVersion() {
    *this = ::std::move(from);
  }

  inline InterfaceVersion& operator=(const InterfaceVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline InterfaceVersion& operator=(InterfaceVersion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InterfaceVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const InterfaceVersion* internal_default_instance() {
    return reinterpret_cast<const InterfaceVersion*>(
               &_InterfaceVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InterfaceVersion& a, InterfaceVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(InterfaceVersion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InterfaceVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InterfaceVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InterfaceVersion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InterfaceVersion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InterfaceVersion& from) {
    InterfaceVersion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterfaceVersion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.InterfaceVersion";
  }
  protected:
  explicit InterfaceVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionMajorFieldNumber = 1,
    kVersionMinorFieldNumber = 2,
    kVersionPatchFieldNumber = 3,
  };
  // optional uint32 version_major = 1;
  bool has_version_major() const;
  private:
  bool _internal_has_version_major() const;
  public:
  void clear_version_major();
  uint32_t version_major() const;
  void set_version_major(uint32_t value);
  private:
  uint32_t _internal_version_major() const;
  void _internal_set_version_major(uint32_t value);
  public:

  // optional uint32 version_minor = 2;
  bool has_version_minor() const;
  private:
  bool _internal_has_version_minor() const;
  public:
  void clear_version_minor();
  uint32_t version_minor() const;
  void set_version_minor(uint32_t value);
  private:
  uint32_t _internal_version_minor() const;
  void _internal_set_version_minor(uint32_t value);
  public:

  // optional uint32 version_patch = 3;
  bool has_version_patch() const;
  private:
  bool _internal_has_version_patch() const;
  public:
  void clear_version_patch();
  uint32_t version_patch() const;
  void set_version_patch(uint32_t value);
  private:
  uint32_t _internal_version_patch() const;
  void _internal_set_version_patch(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.InterfaceVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t version_major_;
    uint32_t version_minor_;
    uint32_t version_patch_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osi_5fversion_2eproto;
};
// ===================================================================

static const int kCurrentInterfaceVersionFieldNumber = 81000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::osi3::InterfaceVersion >, 11, false >
  current_interface_version;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InterfaceVersion

// optional uint32 version_major = 1;
inline bool InterfaceVersion::_internal_has_version_major() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InterfaceVersion::has_version_major() const {
  return _internal_has_version_major();
}
inline void InterfaceVersion::clear_version_major() {
  _impl_.version_major_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t InterfaceVersion::_internal_version_major() const {
  return _impl_.version_major_;
}
inline uint32_t InterfaceVersion::version_major() const {
  // @@protoc_insertion_point(field_get:osi3.InterfaceVersion.version_major)
  return _internal_version_major();
}
inline void InterfaceVersion::_internal_set_version_major(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.version_major_ = value;
}
inline void InterfaceVersion::set_version_major(uint32_t value) {
  _internal_set_version_major(value);
  // @@protoc_insertion_point(field_set:osi3.InterfaceVersion.version_major)
}

// optional uint32 version_minor = 2;
inline bool InterfaceVersion::_internal_has_version_minor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InterfaceVersion::has_version_minor() const {
  return _internal_has_version_minor();
}
inline void InterfaceVersion::clear_version_minor() {
  _impl_.version_minor_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t InterfaceVersion::_internal_version_minor() const {
  return _impl_.version_minor_;
}
inline uint32_t InterfaceVersion::version_minor() const {
  // @@protoc_insertion_point(field_get:osi3.InterfaceVersion.version_minor)
  return _internal_version_minor();
}
inline void InterfaceVersion::_internal_set_version_minor(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.version_minor_ = value;
}
inline void InterfaceVersion::set_version_minor(uint32_t value) {
  _internal_set_version_minor(value);
  // @@protoc_insertion_point(field_set:osi3.InterfaceVersion.version_minor)
}

// optional uint32 version_patch = 3;
inline bool InterfaceVersion::_internal_has_version_patch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool InterfaceVersion::has_version_patch() const {
  return _internal_has_version_patch();
}
inline void InterfaceVersion::clear_version_patch() {
  _impl_.version_patch_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t InterfaceVersion::_internal_version_patch() const {
  return _impl_.version_patch_;
}
inline uint32_t InterfaceVersion::version_patch() const {
  // @@protoc_insertion_point(field_get:osi3.InterfaceVersion.version_patch)
  return _internal_version_patch();
}
inline void InterfaceVersion::_internal_set_version_patch(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.version_patch_ = value;
}
inline void InterfaceVersion::set_version_patch(uint32_t value) {
  _internal_set_version_patch(value);
  // @@protoc_insertion_point(field_set:osi3.InterfaceVersion.version_patch)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_osi_5fversion_2eproto

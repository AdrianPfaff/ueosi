// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_referenceline.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_osi_5freferenceline_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_osi_5freferenceline_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "osi_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_osi_5freferenceline_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_osi_5freferenceline_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5freferenceline_2eproto;
namespace osi3 {
class ReferenceLine;
struct ReferenceLineDefaultTypeInternal;
extern ReferenceLineDefaultTypeInternal _ReferenceLine_default_instance_;
class ReferenceLine_ReferenceLinePoint;
struct ReferenceLine_ReferenceLinePointDefaultTypeInternal;
extern ReferenceLine_ReferenceLinePointDefaultTypeInternal _ReferenceLine_ReferenceLinePoint_default_instance_;
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> ::osi3::ReferenceLine* Arena::CreateMaybeMessage<::osi3::ReferenceLine>(Arena*);
template<> ::osi3::ReferenceLine_ReferenceLinePoint* Arena::CreateMaybeMessage<::osi3::ReferenceLine_ReferenceLinePoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace osi3 {

enum ReferenceLine_Type : int {
  ReferenceLine_Type_TYPE_POLYLINE = 0,
  ReferenceLine_Type_TYPE_POLYLINE_WITH_T_AXIS = 1
};
bool ReferenceLine_Type_IsValid(int value);
constexpr ReferenceLine_Type ReferenceLine_Type_Type_MIN = ReferenceLine_Type_TYPE_POLYLINE;
constexpr ReferenceLine_Type ReferenceLine_Type_Type_MAX = ReferenceLine_Type_TYPE_POLYLINE_WITH_T_AXIS;
constexpr int ReferenceLine_Type_Type_ARRAYSIZE = ReferenceLine_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReferenceLine_Type_descriptor();
template<typename T>
inline const std::string& ReferenceLine_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReferenceLine_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReferenceLine_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReferenceLine_Type_descriptor(), enum_t_value);
}
inline bool ReferenceLine_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReferenceLine_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReferenceLine_Type>(
    ReferenceLine_Type_descriptor(), name, value);
}
// ===================================================================

class ReferenceLine_ReferenceLinePoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.ReferenceLine.ReferenceLinePoint) */ {
 public:
  inline ReferenceLine_ReferenceLinePoint() : ReferenceLine_ReferenceLinePoint(nullptr) {}
  ~ReferenceLine_ReferenceLinePoint() override;
  explicit PROTOBUF_CONSTEXPR ReferenceLine_ReferenceLinePoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReferenceLine_ReferenceLinePoint(const ReferenceLine_ReferenceLinePoint& from);
  ReferenceLine_ReferenceLinePoint(ReferenceLine_ReferenceLinePoint&& from) noexcept
    : ReferenceLine_ReferenceLinePoint() {
    *this = ::std::move(from);
  }

  inline ReferenceLine_ReferenceLinePoint& operator=(const ReferenceLine_ReferenceLinePoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReferenceLine_ReferenceLinePoint& operator=(ReferenceLine_ReferenceLinePoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReferenceLine_ReferenceLinePoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReferenceLine_ReferenceLinePoint* internal_default_instance() {
    return reinterpret_cast<const ReferenceLine_ReferenceLinePoint*>(
               &_ReferenceLine_ReferenceLinePoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReferenceLine_ReferenceLinePoint& a, ReferenceLine_ReferenceLinePoint& b) {
    a.Swap(&b);
  }
  inline void Swap(ReferenceLine_ReferenceLinePoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReferenceLine_ReferenceLinePoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReferenceLine_ReferenceLinePoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReferenceLine_ReferenceLinePoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReferenceLine_ReferenceLinePoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReferenceLine_ReferenceLinePoint& from) {
    ReferenceLine_ReferenceLinePoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReferenceLine_ReferenceLinePoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.ReferenceLine.ReferenceLinePoint";
  }
  protected:
  explicit ReferenceLine_ReferenceLinePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldPositionFieldNumber = 1,
    kSPositionFieldNumber = 2,
    kTAxisYawFieldNumber = 3,
  };
  // optional .osi3.Vector3d world_position = 1;
  bool has_world_position() const;
  private:
  bool _internal_has_world_position() const;
  public:
  void clear_world_position();
  const ::osi3::Vector3d& world_position() const;
  PROTOBUF_NODISCARD ::osi3::Vector3d* release_world_position();
  ::osi3::Vector3d* mutable_world_position();
  void set_allocated_world_position(::osi3::Vector3d* world_position);
  private:
  const ::osi3::Vector3d& _internal_world_position() const;
  ::osi3::Vector3d* _internal_mutable_world_position();
  public:
  void unsafe_arena_set_allocated_world_position(
      ::osi3::Vector3d* world_position);
  ::osi3::Vector3d* unsafe_arena_release_world_position();

  // optional double s_position = 2;
  bool has_s_position() const;
  private:
  bool _internal_has_s_position() const;
  public:
  void clear_s_position();
  double s_position() const;
  void set_s_position(double value);
  private:
  double _internal_s_position() const;
  void _internal_set_s_position(double value);
  public:

  // optional double t_axis_yaw = 3;
  bool has_t_axis_yaw() const;
  private:
  bool _internal_has_t_axis_yaw() const;
  public:
  void clear_t_axis_yaw();
  double t_axis_yaw() const;
  void set_t_axis_yaw(double value);
  private:
  double _internal_t_axis_yaw() const;
  void _internal_set_t_axis_yaw(double value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.ReferenceLine.ReferenceLinePoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::osi3::Vector3d* world_position_;
    double s_position_;
    double t_axis_yaw_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osi_5freferenceline_2eproto;
};
// -------------------------------------------------------------------

class ReferenceLine final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.ReferenceLine) */ {
 public:
  inline ReferenceLine() : ReferenceLine(nullptr) {}
  ~ReferenceLine() override;
  explicit PROTOBUF_CONSTEXPR ReferenceLine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReferenceLine(const ReferenceLine& from);
  ReferenceLine(ReferenceLine&& from) noexcept
    : ReferenceLine() {
    *this = ::std::move(from);
  }

  inline ReferenceLine& operator=(const ReferenceLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReferenceLine& operator=(ReferenceLine&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReferenceLine& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReferenceLine* internal_default_instance() {
    return reinterpret_cast<const ReferenceLine*>(
               &_ReferenceLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReferenceLine& a, ReferenceLine& b) {
    a.Swap(&b);
  }
  inline void Swap(ReferenceLine* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReferenceLine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReferenceLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReferenceLine>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReferenceLine& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReferenceLine& from) {
    ReferenceLine::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReferenceLine* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.ReferenceLine";
  }
  protected:
  explicit ReferenceLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReferenceLine_ReferenceLinePoint ReferenceLinePoint;

  typedef ReferenceLine_Type Type;
  static constexpr Type TYPE_POLYLINE =
    ReferenceLine_Type_TYPE_POLYLINE;
  static constexpr Type TYPE_POLYLINE_WITH_T_AXIS =
    ReferenceLine_Type_TYPE_POLYLINE_WITH_T_AXIS;
  static inline bool Type_IsValid(int value) {
    return ReferenceLine_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ReferenceLine_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ReferenceLine_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ReferenceLine_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return ReferenceLine_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ReferenceLine_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return ReferenceLine_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPolyLineFieldNumber = 2,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 3,
  };
  // repeated .osi3.ReferenceLine.ReferenceLinePoint poly_line = 2;
  int poly_line_size() const;
  private:
  int _internal_poly_line_size() const;
  public:
  void clear_poly_line();
  ::osi3::ReferenceLine_ReferenceLinePoint* mutable_poly_line(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ReferenceLine_ReferenceLinePoint >*
      mutable_poly_line();
  private:
  const ::osi3::ReferenceLine_ReferenceLinePoint& _internal_poly_line(int index) const;
  ::osi3::ReferenceLine_ReferenceLinePoint* _internal_add_poly_line();
  public:
  const ::osi3::ReferenceLine_ReferenceLinePoint& poly_line(int index) const;
  ::osi3::ReferenceLine_ReferenceLinePoint* add_poly_line();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ReferenceLine_ReferenceLinePoint >&
      poly_line() const;

  // optional .osi3.Identifier id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::osi3::Identifier& id() const;
  PROTOBUF_NODISCARD ::osi3::Identifier* release_id();
  ::osi3::Identifier* mutable_id();
  void set_allocated_id(::osi3::Identifier* id);
  private:
  const ::osi3::Identifier& _internal_id() const;
  ::osi3::Identifier* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::osi3::Identifier* id);
  ::osi3::Identifier* unsafe_arena_release_id();

  // optional .osi3.ReferenceLine.Type type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::osi3::ReferenceLine_Type type() const;
  void set_type(::osi3::ReferenceLine_Type value);
  private:
  ::osi3::ReferenceLine_Type _internal_type() const;
  void _internal_set_type(::osi3::ReferenceLine_Type value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.ReferenceLine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ReferenceLine_ReferenceLinePoint > poly_line_;
    ::osi3::Identifier* id_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osi_5freferenceline_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReferenceLine_ReferenceLinePoint

// optional .osi3.Vector3d world_position = 1;
inline bool ReferenceLine_ReferenceLinePoint::_internal_has_world_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.world_position_ != nullptr);
  return value;
}
inline bool ReferenceLine_ReferenceLinePoint::has_world_position() const {
  return _internal_has_world_position();
}
inline const ::osi3::Vector3d& ReferenceLine_ReferenceLinePoint::_internal_world_position() const {
  const ::osi3::Vector3d* p = _impl_.world_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Vector3d&>(
      ::osi3::_Vector3d_default_instance_);
}
inline const ::osi3::Vector3d& ReferenceLine_ReferenceLinePoint::world_position() const {
  // @@protoc_insertion_point(field_get:osi3.ReferenceLine.ReferenceLinePoint.world_position)
  return _internal_world_position();
}
inline void ReferenceLine_ReferenceLinePoint::unsafe_arena_set_allocated_world_position(
    ::osi3::Vector3d* world_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.world_position_);
  }
  _impl_.world_position_ = world_position;
  if (world_position) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.ReferenceLine.ReferenceLinePoint.world_position)
}
inline ::osi3::Vector3d* ReferenceLine_ReferenceLinePoint::release_world_position() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osi3::Vector3d* temp = _impl_.world_position_;
  _impl_.world_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::Vector3d* ReferenceLine_ReferenceLinePoint::unsafe_arena_release_world_position() {
  // @@protoc_insertion_point(field_release:osi3.ReferenceLine.ReferenceLinePoint.world_position)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osi3::Vector3d* temp = _impl_.world_position_;
  _impl_.world_position_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* ReferenceLine_ReferenceLinePoint::_internal_mutable_world_position() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.world_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArenaForAllocation());
    _impl_.world_position_ = p;
  }
  return _impl_.world_position_;
}
inline ::osi3::Vector3d* ReferenceLine_ReferenceLinePoint::mutable_world_position() {
  ::osi3::Vector3d* _msg = _internal_mutable_world_position();
  // @@protoc_insertion_point(field_mutable:osi3.ReferenceLine.ReferenceLinePoint.world_position)
  return _msg;
}
inline void ReferenceLine_ReferenceLinePoint::set_allocated_world_position(::osi3::Vector3d* world_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.world_position_);
  }
  if (world_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_position));
    if (message_arena != submessage_arena) {
      world_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.world_position_ = world_position;
  // @@protoc_insertion_point(field_set_allocated:osi3.ReferenceLine.ReferenceLinePoint.world_position)
}

// optional double s_position = 2;
inline bool ReferenceLine_ReferenceLinePoint::_internal_has_s_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReferenceLine_ReferenceLinePoint::has_s_position() const {
  return _internal_has_s_position();
}
inline void ReferenceLine_ReferenceLinePoint::clear_s_position() {
  _impl_.s_position_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ReferenceLine_ReferenceLinePoint::_internal_s_position() const {
  return _impl_.s_position_;
}
inline double ReferenceLine_ReferenceLinePoint::s_position() const {
  // @@protoc_insertion_point(field_get:osi3.ReferenceLine.ReferenceLinePoint.s_position)
  return _internal_s_position();
}
inline void ReferenceLine_ReferenceLinePoint::_internal_set_s_position(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.s_position_ = value;
}
inline void ReferenceLine_ReferenceLinePoint::set_s_position(double value) {
  _internal_set_s_position(value);
  // @@protoc_insertion_point(field_set:osi3.ReferenceLine.ReferenceLinePoint.s_position)
}

// optional double t_axis_yaw = 3;
inline bool ReferenceLine_ReferenceLinePoint::_internal_has_t_axis_yaw() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReferenceLine_ReferenceLinePoint::has_t_axis_yaw() const {
  return _internal_has_t_axis_yaw();
}
inline void ReferenceLine_ReferenceLinePoint::clear_t_axis_yaw() {
  _impl_.t_axis_yaw_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ReferenceLine_ReferenceLinePoint::_internal_t_axis_yaw() const {
  return _impl_.t_axis_yaw_;
}
inline double ReferenceLine_ReferenceLinePoint::t_axis_yaw() const {
  // @@protoc_insertion_point(field_get:osi3.ReferenceLine.ReferenceLinePoint.t_axis_yaw)
  return _internal_t_axis_yaw();
}
inline void ReferenceLine_ReferenceLinePoint::_internal_set_t_axis_yaw(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.t_axis_yaw_ = value;
}
inline void ReferenceLine_ReferenceLinePoint::set_t_axis_yaw(double value) {
  _internal_set_t_axis_yaw(value);
  // @@protoc_insertion_point(field_set:osi3.ReferenceLine.ReferenceLinePoint.t_axis_yaw)
}

// -------------------------------------------------------------------

// ReferenceLine

// optional .osi3.Identifier id = 1;
inline bool ReferenceLine::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.id_ != nullptr);
  return value;
}
inline bool ReferenceLine::has_id() const {
  return _internal_has_id();
}
inline const ::osi3::Identifier& ReferenceLine::_internal_id() const {
  const ::osi3::Identifier* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Identifier&>(
      ::osi3::_Identifier_default_instance_);
}
inline const ::osi3::Identifier& ReferenceLine::id() const {
  // @@protoc_insertion_point(field_get:osi3.ReferenceLine.id)
  return _internal_id();
}
inline void ReferenceLine::unsafe_arena_set_allocated_id(
    ::osi3::Identifier* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = id;
  if (id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.ReferenceLine.id)
}
inline ::osi3::Identifier* ReferenceLine::release_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osi3::Identifier* temp = _impl_.id_;
  _impl_.id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::Identifier* ReferenceLine::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:osi3.ReferenceLine.id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osi3::Identifier* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::osi3::Identifier* ReferenceLine::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.id_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Identifier>(GetArenaForAllocation());
    _impl_.id_ = p;
  }
  return _impl_.id_;
}
inline ::osi3::Identifier* ReferenceLine::mutable_id() {
  ::osi3::Identifier* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:osi3.ReferenceLine.id)
  return _msg;
}
inline void ReferenceLine::set_allocated_id(::osi3::Identifier* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_ = id;
  // @@protoc_insertion_point(field_set_allocated:osi3.ReferenceLine.id)
}

// optional .osi3.ReferenceLine.Type type = 3;
inline bool ReferenceLine::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReferenceLine::has_type() const {
  return _internal_has_type();
}
inline void ReferenceLine::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::osi3::ReferenceLine_Type ReferenceLine::_internal_type() const {
  return static_cast< ::osi3::ReferenceLine_Type >(_impl_.type_);
}
inline ::osi3::ReferenceLine_Type ReferenceLine::type() const {
  // @@protoc_insertion_point(field_get:osi3.ReferenceLine.type)
  return _internal_type();
}
inline void ReferenceLine::_internal_set_type(::osi3::ReferenceLine_Type value) {
  assert(::osi3::ReferenceLine_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_ = value;
}
inline void ReferenceLine::set_type(::osi3::ReferenceLine_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:osi3.ReferenceLine.type)
}

// repeated .osi3.ReferenceLine.ReferenceLinePoint poly_line = 2;
inline int ReferenceLine::_internal_poly_line_size() const {
  return _impl_.poly_line_.size();
}
inline int ReferenceLine::poly_line_size() const {
  return _internal_poly_line_size();
}
inline void ReferenceLine::clear_poly_line() {
  _impl_.poly_line_.Clear();
}
inline ::osi3::ReferenceLine_ReferenceLinePoint* ReferenceLine::mutable_poly_line(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.ReferenceLine.poly_line)
  return _impl_.poly_line_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ReferenceLine_ReferenceLinePoint >*
ReferenceLine::mutable_poly_line() {
  // @@protoc_insertion_point(field_mutable_list:osi3.ReferenceLine.poly_line)
  return &_impl_.poly_line_;
}
inline const ::osi3::ReferenceLine_ReferenceLinePoint& ReferenceLine::_internal_poly_line(int index) const {
  return _impl_.poly_line_.Get(index);
}
inline const ::osi3::ReferenceLine_ReferenceLinePoint& ReferenceLine::poly_line(int index) const {
  // @@protoc_insertion_point(field_get:osi3.ReferenceLine.poly_line)
  return _internal_poly_line(index);
}
inline ::osi3::ReferenceLine_ReferenceLinePoint* ReferenceLine::_internal_add_poly_line() {
  return _impl_.poly_line_.Add();
}
inline ::osi3::ReferenceLine_ReferenceLinePoint* ReferenceLine::add_poly_line() {
  ::osi3::ReferenceLine_ReferenceLinePoint* _add = _internal_add_poly_line();
  // @@protoc_insertion_point(field_add:osi3.ReferenceLine.poly_line)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ReferenceLine_ReferenceLinePoint >&
ReferenceLine::poly_line() const {
  // @@protoc_insertion_point(field_list:osi3.ReferenceLine.poly_line)
  return _impl_.poly_line_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::osi3::ReferenceLine_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::ReferenceLine_Type>() {
  return ::osi3::ReferenceLine_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_osi_5freferenceline_2eproto

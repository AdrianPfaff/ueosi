// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_motionrequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_osi_5fmotionrequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_osi_5fmotionrequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "osi_common.pb.h"
#include "osi_version.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_osi_5fmotionrequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_osi_5fmotionrequest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fmotionrequest_2eproto;
namespace osi3 {
class MotionRequest;
struct MotionRequestDefaultTypeInternal;
extern MotionRequestDefaultTypeInternal _MotionRequest_default_instance_;
class MotionRequest_DesiredState;
struct MotionRequest_DesiredStateDefaultTypeInternal;
extern MotionRequest_DesiredStateDefaultTypeInternal _MotionRequest_DesiredState_default_instance_;
class MotionRequest_DesiredTrajectory;
struct MotionRequest_DesiredTrajectoryDefaultTypeInternal;
extern MotionRequest_DesiredTrajectoryDefaultTypeInternal _MotionRequest_DesiredTrajectory_default_instance_;
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> ::osi3::MotionRequest* Arena::CreateMaybeMessage<::osi3::MotionRequest>(Arena*);
template<> ::osi3::MotionRequest_DesiredState* Arena::CreateMaybeMessage<::osi3::MotionRequest_DesiredState>(Arena*);
template<> ::osi3::MotionRequest_DesiredTrajectory* Arena::CreateMaybeMessage<::osi3::MotionRequest_DesiredTrajectory>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace osi3 {

enum MotionRequest_MotionRequestType : int {
  MotionRequest_MotionRequestType_MOTION_REQUEST_TYPE_DESIRED_STATE = 0,
  MotionRequest_MotionRequestType_MOTION_REQUEST_TYPE_TRAJECTORY = 1
};
bool MotionRequest_MotionRequestType_IsValid(int value);
constexpr MotionRequest_MotionRequestType MotionRequest_MotionRequestType_MotionRequestType_MIN = MotionRequest_MotionRequestType_MOTION_REQUEST_TYPE_DESIRED_STATE;
constexpr MotionRequest_MotionRequestType MotionRequest_MotionRequestType_MotionRequestType_MAX = MotionRequest_MotionRequestType_MOTION_REQUEST_TYPE_TRAJECTORY;
constexpr int MotionRequest_MotionRequestType_MotionRequestType_ARRAYSIZE = MotionRequest_MotionRequestType_MotionRequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MotionRequest_MotionRequestType_descriptor();
template<typename T>
inline const std::string& MotionRequest_MotionRequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MotionRequest_MotionRequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MotionRequest_MotionRequestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MotionRequest_MotionRequestType_descriptor(), enum_t_value);
}
inline bool MotionRequest_MotionRequestType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MotionRequest_MotionRequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MotionRequest_MotionRequestType>(
    MotionRequest_MotionRequestType_descriptor(), name, value);
}
// ===================================================================

class MotionRequest_DesiredState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.MotionRequest.DesiredState) */ {
 public:
  inline MotionRequest_DesiredState() : MotionRequest_DesiredState(nullptr) {}
  ~MotionRequest_DesiredState() override;
  explicit PROTOBUF_CONSTEXPR MotionRequest_DesiredState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotionRequest_DesiredState(const MotionRequest_DesiredState& from);
  MotionRequest_DesiredState(MotionRequest_DesiredState&& from) noexcept
    : MotionRequest_DesiredState() {
    *this = ::std::move(from);
  }

  inline MotionRequest_DesiredState& operator=(const MotionRequest_DesiredState& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionRequest_DesiredState& operator=(MotionRequest_DesiredState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotionRequest_DesiredState& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotionRequest_DesiredState* internal_default_instance() {
    return reinterpret_cast<const MotionRequest_DesiredState*>(
               &_MotionRequest_DesiredState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MotionRequest_DesiredState& a, MotionRequest_DesiredState& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionRequest_DesiredState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotionRequest_DesiredState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MotionRequest_DesiredState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MotionRequest_DesiredState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MotionRequest_DesiredState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MotionRequest_DesiredState& from) {
    MotionRequest_DesiredState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionRequest_DesiredState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.MotionRequest.DesiredState";
  }
  protected:
  explicit MotionRequest_DesiredState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kPositionFieldNumber = 2,
    kOrientationFieldNumber = 3,
    kVelocityFieldNumber = 4,
    kAccelerationFieldNumber = 5,
  };
  // optional .osi3.Timestamp timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::osi3::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::osi3::Timestamp* release_timestamp();
  ::osi3::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::osi3::Timestamp* timestamp);
  private:
  const ::osi3::Timestamp& _internal_timestamp() const;
  ::osi3::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::osi3::Timestamp* timestamp);
  ::osi3::Timestamp* unsafe_arena_release_timestamp();

  // optional .osi3.Vector3d position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::osi3::Vector3d& position() const;
  PROTOBUF_NODISCARD ::osi3::Vector3d* release_position();
  ::osi3::Vector3d* mutable_position();
  void set_allocated_position(::osi3::Vector3d* position);
  private:
  const ::osi3::Vector3d& _internal_position() const;
  ::osi3::Vector3d* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::osi3::Vector3d* position);
  ::osi3::Vector3d* unsafe_arena_release_position();

  // optional .osi3.Orientation3d orientation = 3;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::osi3::Orientation3d& orientation() const;
  PROTOBUF_NODISCARD ::osi3::Orientation3d* release_orientation();
  ::osi3::Orientation3d* mutable_orientation();
  void set_allocated_orientation(::osi3::Orientation3d* orientation);
  private:
  const ::osi3::Orientation3d& _internal_orientation() const;
  ::osi3::Orientation3d* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::osi3::Orientation3d* orientation);
  ::osi3::Orientation3d* unsafe_arena_release_orientation();

  // optional .osi3.Vector3d velocity = 4;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::osi3::Vector3d& velocity() const;
  PROTOBUF_NODISCARD ::osi3::Vector3d* release_velocity();
  ::osi3::Vector3d* mutable_velocity();
  void set_allocated_velocity(::osi3::Vector3d* velocity);
  private:
  const ::osi3::Vector3d& _internal_velocity() const;
  ::osi3::Vector3d* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::osi3::Vector3d* velocity);
  ::osi3::Vector3d* unsafe_arena_release_velocity();

  // optional .osi3.Vector3d acceleration = 5;
  bool has_acceleration() const;
  private:
  bool _internal_has_acceleration() const;
  public:
  void clear_acceleration();
  const ::osi3::Vector3d& acceleration() const;
  PROTOBUF_NODISCARD ::osi3::Vector3d* release_acceleration();
  ::osi3::Vector3d* mutable_acceleration();
  void set_allocated_acceleration(::osi3::Vector3d* acceleration);
  private:
  const ::osi3::Vector3d& _internal_acceleration() const;
  ::osi3::Vector3d* _internal_mutable_acceleration();
  public:
  void unsafe_arena_set_allocated_acceleration(
      ::osi3::Vector3d* acceleration);
  ::osi3::Vector3d* unsafe_arena_release_acceleration();

  // @@protoc_insertion_point(class_scope:osi3.MotionRequest.DesiredState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::osi3::Timestamp* timestamp_;
    ::osi3::Vector3d* position_;
    ::osi3::Orientation3d* orientation_;
    ::osi3::Vector3d* velocity_;
    ::osi3::Vector3d* acceleration_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osi_5fmotionrequest_2eproto;
};
// -------------------------------------------------------------------

class MotionRequest_DesiredTrajectory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.MotionRequest.DesiredTrajectory) */ {
 public:
  inline MotionRequest_DesiredTrajectory() : MotionRequest_DesiredTrajectory(nullptr) {}
  ~MotionRequest_DesiredTrajectory() override;
  explicit PROTOBUF_CONSTEXPR MotionRequest_DesiredTrajectory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotionRequest_DesiredTrajectory(const MotionRequest_DesiredTrajectory& from);
  MotionRequest_DesiredTrajectory(MotionRequest_DesiredTrajectory&& from) noexcept
    : MotionRequest_DesiredTrajectory() {
    *this = ::std::move(from);
  }

  inline MotionRequest_DesiredTrajectory& operator=(const MotionRequest_DesiredTrajectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionRequest_DesiredTrajectory& operator=(MotionRequest_DesiredTrajectory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotionRequest_DesiredTrajectory& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotionRequest_DesiredTrajectory* internal_default_instance() {
    return reinterpret_cast<const MotionRequest_DesiredTrajectory*>(
               &_MotionRequest_DesiredTrajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MotionRequest_DesiredTrajectory& a, MotionRequest_DesiredTrajectory& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionRequest_DesiredTrajectory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotionRequest_DesiredTrajectory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MotionRequest_DesiredTrajectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MotionRequest_DesiredTrajectory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MotionRequest_DesiredTrajectory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MotionRequest_DesiredTrajectory& from) {
    MotionRequest_DesiredTrajectory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionRequest_DesiredTrajectory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.MotionRequest.DesiredTrajectory";
  }
  protected:
  explicit MotionRequest_DesiredTrajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrajectoryPointFieldNumber = 1,
  };
  // repeated .osi3.StatePoint trajectory_point = 1;
  int trajectory_point_size() const;
  private:
  int _internal_trajectory_point_size() const;
  public:
  void clear_trajectory_point();
  ::osi3::StatePoint* mutable_trajectory_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::StatePoint >*
      mutable_trajectory_point();
  private:
  const ::osi3::StatePoint& _internal_trajectory_point(int index) const;
  ::osi3::StatePoint* _internal_add_trajectory_point();
  public:
  const ::osi3::StatePoint& trajectory_point(int index) const;
  ::osi3::StatePoint* add_trajectory_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::StatePoint >&
      trajectory_point() const;

  // @@protoc_insertion_point(class_scope:osi3.MotionRequest.DesiredTrajectory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::StatePoint > trajectory_point_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osi_5fmotionrequest_2eproto;
};
// -------------------------------------------------------------------

class MotionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.MotionRequest) */ {
 public:
  inline MotionRequest() : MotionRequest(nullptr) {}
  ~MotionRequest() override;
  explicit PROTOBUF_CONSTEXPR MotionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotionRequest(const MotionRequest& from);
  MotionRequest(MotionRequest&& from) noexcept
    : MotionRequest() {
    *this = ::std::move(from);
  }

  inline MotionRequest& operator=(const MotionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionRequest& operator=(MotionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotionRequest* internal_default_instance() {
    return reinterpret_cast<const MotionRequest*>(
               &_MotionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MotionRequest& a, MotionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MotionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MotionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MotionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MotionRequest& from) {
    MotionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.MotionRequest";
  }
  protected:
  explicit MotionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MotionRequest_DesiredState DesiredState;
  typedef MotionRequest_DesiredTrajectory DesiredTrajectory;

  typedef MotionRequest_MotionRequestType MotionRequestType;
  static constexpr MotionRequestType MOTION_REQUEST_TYPE_DESIRED_STATE =
    MotionRequest_MotionRequestType_MOTION_REQUEST_TYPE_DESIRED_STATE;
  static constexpr MotionRequestType MOTION_REQUEST_TYPE_TRAJECTORY =
    MotionRequest_MotionRequestType_MOTION_REQUEST_TYPE_TRAJECTORY;
  static inline bool MotionRequestType_IsValid(int value) {
    return MotionRequest_MotionRequestType_IsValid(value);
  }
  static constexpr MotionRequestType MotionRequestType_MIN =
    MotionRequest_MotionRequestType_MotionRequestType_MIN;
  static constexpr MotionRequestType MotionRequestType_MAX =
    MotionRequest_MotionRequestType_MotionRequestType_MAX;
  static constexpr int MotionRequestType_ARRAYSIZE =
    MotionRequest_MotionRequestType_MotionRequestType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MotionRequestType_descriptor() {
    return MotionRequest_MotionRequestType_descriptor();
  }
  template<typename T>
  static inline const std::string& MotionRequestType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MotionRequestType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MotionRequestType_Name.");
    return MotionRequest_MotionRequestType_Name(enum_t_value);
  }
  static inline bool MotionRequestType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MotionRequestType* value) {
    return MotionRequest_MotionRequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kDesiredStateFieldNumber = 4,
    kDesiredTrajectoryFieldNumber = 5,
    kMotionRequestTypeFieldNumber = 3,
  };
  // optional .osi3.InterfaceVersion version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const ::osi3::InterfaceVersion& version() const;
  PROTOBUF_NODISCARD ::osi3::InterfaceVersion* release_version();
  ::osi3::InterfaceVersion* mutable_version();
  void set_allocated_version(::osi3::InterfaceVersion* version);
  private:
  const ::osi3::InterfaceVersion& _internal_version() const;
  ::osi3::InterfaceVersion* _internal_mutable_version();
  public:
  void unsafe_arena_set_allocated_version(
      ::osi3::InterfaceVersion* version);
  ::osi3::InterfaceVersion* unsafe_arena_release_version();

  // optional .osi3.Timestamp timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::osi3::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::osi3::Timestamp* release_timestamp();
  ::osi3::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::osi3::Timestamp* timestamp);
  private:
  const ::osi3::Timestamp& _internal_timestamp() const;
  ::osi3::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::osi3::Timestamp* timestamp);
  ::osi3::Timestamp* unsafe_arena_release_timestamp();

  // optional .osi3.MotionRequest.DesiredState desired_state = 4;
  bool has_desired_state() const;
  private:
  bool _internal_has_desired_state() const;
  public:
  void clear_desired_state();
  const ::osi3::MotionRequest_DesiredState& desired_state() const;
  PROTOBUF_NODISCARD ::osi3::MotionRequest_DesiredState* release_desired_state();
  ::osi3::MotionRequest_DesiredState* mutable_desired_state();
  void set_allocated_desired_state(::osi3::MotionRequest_DesiredState* desired_state);
  private:
  const ::osi3::MotionRequest_DesiredState& _internal_desired_state() const;
  ::osi3::MotionRequest_DesiredState* _internal_mutable_desired_state();
  public:
  void unsafe_arena_set_allocated_desired_state(
      ::osi3::MotionRequest_DesiredState* desired_state);
  ::osi3::MotionRequest_DesiredState* unsafe_arena_release_desired_state();

  // optional .osi3.MotionRequest.DesiredTrajectory desired_trajectory = 5;
  bool has_desired_trajectory() const;
  private:
  bool _internal_has_desired_trajectory() const;
  public:
  void clear_desired_trajectory();
  const ::osi3::MotionRequest_DesiredTrajectory& desired_trajectory() const;
  PROTOBUF_NODISCARD ::osi3::MotionRequest_DesiredTrajectory* release_desired_trajectory();
  ::osi3::MotionRequest_DesiredTrajectory* mutable_desired_trajectory();
  void set_allocated_desired_trajectory(::osi3::MotionRequest_DesiredTrajectory* desired_trajectory);
  private:
  const ::osi3::MotionRequest_DesiredTrajectory& _internal_desired_trajectory() const;
  ::osi3::MotionRequest_DesiredTrajectory* _internal_mutable_desired_trajectory();
  public:
  void unsafe_arena_set_allocated_desired_trajectory(
      ::osi3::MotionRequest_DesiredTrajectory* desired_trajectory);
  ::osi3::MotionRequest_DesiredTrajectory* unsafe_arena_release_desired_trajectory();

  // optional .osi3.MotionRequest.MotionRequestType motion_request_type = 3;
  bool has_motion_request_type() const;
  private:
  bool _internal_has_motion_request_type() const;
  public:
  void clear_motion_request_type();
  ::osi3::MotionRequest_MotionRequestType motion_request_type() const;
  void set_motion_request_type(::osi3::MotionRequest_MotionRequestType value);
  private:
  ::osi3::MotionRequest_MotionRequestType _internal_motion_request_type() const;
  void _internal_set_motion_request_type(::osi3::MotionRequest_MotionRequestType value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.MotionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::osi3::InterfaceVersion* version_;
    ::osi3::Timestamp* timestamp_;
    ::osi3::MotionRequest_DesiredState* desired_state_;
    ::osi3::MotionRequest_DesiredTrajectory* desired_trajectory_;
    int motion_request_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osi_5fmotionrequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MotionRequest_DesiredState

// optional .osi3.Timestamp timestamp = 1;
inline bool MotionRequest_DesiredState::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline bool MotionRequest_DesiredState::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::osi3::Timestamp& MotionRequest_DesiredState::_internal_timestamp() const {
  const ::osi3::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Timestamp&>(
      ::osi3::_Timestamp_default_instance_);
}
inline const ::osi3::Timestamp& MotionRequest_DesiredState::timestamp() const {
  // @@protoc_insertion_point(field_get:osi3.MotionRequest.DesiredState.timestamp)
  return _internal_timestamp();
}
inline void MotionRequest_DesiredState::unsafe_arena_set_allocated_timestamp(
    ::osi3::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.MotionRequest.DesiredState.timestamp)
}
inline ::osi3::Timestamp* MotionRequest_DesiredState::release_timestamp() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osi3::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::Timestamp* MotionRequest_DesiredState::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:osi3.MotionRequest.DesiredState.timestamp)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osi3::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::osi3::Timestamp* MotionRequest_DesiredState::_internal_mutable_timestamp() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::osi3::Timestamp* MotionRequest_DesiredState::mutable_timestamp() {
  ::osi3::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:osi3.MotionRequest.DesiredState.timestamp)
  return _msg;
}
inline void MotionRequest_DesiredState::set_allocated_timestamp(::osi3::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:osi3.MotionRequest.DesiredState.timestamp)
}

// optional .osi3.Vector3d position = 2;
inline bool MotionRequest_DesiredState::_internal_has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline bool MotionRequest_DesiredState::has_position() const {
  return _internal_has_position();
}
inline const ::osi3::Vector3d& MotionRequest_DesiredState::_internal_position() const {
  const ::osi3::Vector3d* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Vector3d&>(
      ::osi3::_Vector3d_default_instance_);
}
inline const ::osi3::Vector3d& MotionRequest_DesiredState::position() const {
  // @@protoc_insertion_point(field_get:osi3.MotionRequest.DesiredState.position)
  return _internal_position();
}
inline void MotionRequest_DesiredState::unsafe_arena_set_allocated_position(
    ::osi3::Vector3d* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.MotionRequest.DesiredState.position)
}
inline ::osi3::Vector3d* MotionRequest_DesiredState::release_position() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::osi3::Vector3d* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::Vector3d* MotionRequest_DesiredState::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:osi3.MotionRequest.DesiredState.position)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::osi3::Vector3d* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* MotionRequest_DesiredState::_internal_mutable_position() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::osi3::Vector3d* MotionRequest_DesiredState::mutable_position() {
  ::osi3::Vector3d* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:osi3.MotionRequest.DesiredState.position)
  return _msg;
}
inline void MotionRequest_DesiredState::set_allocated_position(::osi3::Vector3d* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:osi3.MotionRequest.DesiredState.position)
}

// optional .osi3.Orientation3d orientation = 3;
inline bool MotionRequest_DesiredState::_internal_has_orientation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.orientation_ != nullptr);
  return value;
}
inline bool MotionRequest_DesiredState::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::osi3::Orientation3d& MotionRequest_DesiredState::_internal_orientation() const {
  const ::osi3::Orientation3d* p = _impl_.orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Orientation3d&>(
      ::osi3::_Orientation3d_default_instance_);
}
inline const ::osi3::Orientation3d& MotionRequest_DesiredState::orientation() const {
  // @@protoc_insertion_point(field_get:osi3.MotionRequest.DesiredState.orientation)
  return _internal_orientation();
}
inline void MotionRequest_DesiredState::unsafe_arena_set_allocated_orientation(
    ::osi3::Orientation3d* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_);
  }
  _impl_.orientation_ = orientation;
  if (orientation) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.MotionRequest.DesiredState.orientation)
}
inline ::osi3::Orientation3d* MotionRequest_DesiredState::release_orientation() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::osi3::Orientation3d* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::Orientation3d* MotionRequest_DesiredState::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:osi3.MotionRequest.DesiredState.orientation)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::osi3::Orientation3d* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
  return temp;
}
inline ::osi3::Orientation3d* MotionRequest_DesiredState::_internal_mutable_orientation() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Orientation3d>(GetArenaForAllocation());
    _impl_.orientation_ = p;
  }
  return _impl_.orientation_;
}
inline ::osi3::Orientation3d* MotionRequest_DesiredState::mutable_orientation() {
  ::osi3::Orientation3d* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:osi3.MotionRequest.DesiredState.orientation)
  return _msg;
}
inline void MotionRequest_DesiredState::set_allocated_orientation(::osi3::Orientation3d* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation));
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:osi3.MotionRequest.DesiredState.orientation)
}

// optional .osi3.Vector3d velocity = 4;
inline bool MotionRequest_DesiredState::_internal_has_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.velocity_ != nullptr);
  return value;
}
inline bool MotionRequest_DesiredState::has_velocity() const {
  return _internal_has_velocity();
}
inline const ::osi3::Vector3d& MotionRequest_DesiredState::_internal_velocity() const {
  const ::osi3::Vector3d* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Vector3d&>(
      ::osi3::_Vector3d_default_instance_);
}
inline const ::osi3::Vector3d& MotionRequest_DesiredState::velocity() const {
  // @@protoc_insertion_point(field_get:osi3.MotionRequest.DesiredState.velocity)
  return _internal_velocity();
}
inline void MotionRequest_DesiredState::unsafe_arena_set_allocated_velocity(
    ::osi3::Vector3d* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.MotionRequest.DesiredState.velocity)
}
inline ::osi3::Vector3d* MotionRequest_DesiredState::release_velocity() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::osi3::Vector3d* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::Vector3d* MotionRequest_DesiredState::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:osi3.MotionRequest.DesiredState.velocity)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::osi3::Vector3d* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* MotionRequest_DesiredState::_internal_mutable_velocity() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::osi3::Vector3d* MotionRequest_DesiredState::mutable_velocity() {
  ::osi3::Vector3d* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:osi3.MotionRequest.DesiredState.velocity)
  return _msg;
}
inline void MotionRequest_DesiredState::set_allocated_velocity(::osi3::Vector3d* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity));
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:osi3.MotionRequest.DesiredState.velocity)
}

// optional .osi3.Vector3d acceleration = 5;
inline bool MotionRequest_DesiredState::_internal_has_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.acceleration_ != nullptr);
  return value;
}
inline bool MotionRequest_DesiredState::has_acceleration() const {
  return _internal_has_acceleration();
}
inline const ::osi3::Vector3d& MotionRequest_DesiredState::_internal_acceleration() const {
  const ::osi3::Vector3d* p = _impl_.acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Vector3d&>(
      ::osi3::_Vector3d_default_instance_);
}
inline const ::osi3::Vector3d& MotionRequest_DesiredState::acceleration() const {
  // @@protoc_insertion_point(field_get:osi3.MotionRequest.DesiredState.acceleration)
  return _internal_acceleration();
}
inline void MotionRequest_DesiredState::unsafe_arena_set_allocated_acceleration(
    ::osi3::Vector3d* acceleration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.acceleration_);
  }
  _impl_.acceleration_ = acceleration;
  if (acceleration) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.MotionRequest.DesiredState.acceleration)
}
inline ::osi3::Vector3d* MotionRequest_DesiredState::release_acceleration() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::osi3::Vector3d* temp = _impl_.acceleration_;
  _impl_.acceleration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::Vector3d* MotionRequest_DesiredState::unsafe_arena_release_acceleration() {
  // @@protoc_insertion_point(field_release:osi3.MotionRequest.DesiredState.acceleration)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::osi3::Vector3d* temp = _impl_.acceleration_;
  _impl_.acceleration_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* MotionRequest_DesiredState::_internal_mutable_acceleration() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArenaForAllocation());
    _impl_.acceleration_ = p;
  }
  return _impl_.acceleration_;
}
inline ::osi3::Vector3d* MotionRequest_DesiredState::mutable_acceleration() {
  ::osi3::Vector3d* _msg = _internal_mutable_acceleration();
  // @@protoc_insertion_point(field_mutable:osi3.MotionRequest.DesiredState.acceleration)
  return _msg;
}
inline void MotionRequest_DesiredState::set_allocated_acceleration(::osi3::Vector3d* acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.acceleration_);
  }
  if (acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acceleration));
    if (message_arena != submessage_arena) {
      acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:osi3.MotionRequest.DesiredState.acceleration)
}

// -------------------------------------------------------------------

// MotionRequest_DesiredTrajectory

// repeated .osi3.StatePoint trajectory_point = 1;
inline int MotionRequest_DesiredTrajectory::_internal_trajectory_point_size() const {
  return _impl_.trajectory_point_.size();
}
inline int MotionRequest_DesiredTrajectory::trajectory_point_size() const {
  return _internal_trajectory_point_size();
}
inline ::osi3::StatePoint* MotionRequest_DesiredTrajectory::mutable_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.MotionRequest.DesiredTrajectory.trajectory_point)
  return _impl_.trajectory_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::StatePoint >*
MotionRequest_DesiredTrajectory::mutable_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:osi3.MotionRequest.DesiredTrajectory.trajectory_point)
  return &_impl_.trajectory_point_;
}
inline const ::osi3::StatePoint& MotionRequest_DesiredTrajectory::_internal_trajectory_point(int index) const {
  return _impl_.trajectory_point_.Get(index);
}
inline const ::osi3::StatePoint& MotionRequest_DesiredTrajectory::trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:osi3.MotionRequest.DesiredTrajectory.trajectory_point)
  return _internal_trajectory_point(index);
}
inline ::osi3::StatePoint* MotionRequest_DesiredTrajectory::_internal_add_trajectory_point() {
  return _impl_.trajectory_point_.Add();
}
inline ::osi3::StatePoint* MotionRequest_DesiredTrajectory::add_trajectory_point() {
  ::osi3::StatePoint* _add = _internal_add_trajectory_point();
  // @@protoc_insertion_point(field_add:osi3.MotionRequest.DesiredTrajectory.trajectory_point)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::StatePoint >&
MotionRequest_DesiredTrajectory::trajectory_point() const {
  // @@protoc_insertion_point(field_list:osi3.MotionRequest.DesiredTrajectory.trajectory_point)
  return _impl_.trajectory_point_;
}

// -------------------------------------------------------------------

// MotionRequest

// optional .osi3.InterfaceVersion version = 1;
inline bool MotionRequest::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.version_ != nullptr);
  return value;
}
inline bool MotionRequest::has_version() const {
  return _internal_has_version();
}
inline const ::osi3::InterfaceVersion& MotionRequest::_internal_version() const {
  const ::osi3::InterfaceVersion* p = _impl_.version_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::InterfaceVersion&>(
      ::osi3::_InterfaceVersion_default_instance_);
}
inline const ::osi3::InterfaceVersion& MotionRequest::version() const {
  // @@protoc_insertion_point(field_get:osi3.MotionRequest.version)
  return _internal_version();
}
inline void MotionRequest::unsafe_arena_set_allocated_version(
    ::osi3::InterfaceVersion* version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.version_);
  }
  _impl_.version_ = version;
  if (version) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.MotionRequest.version)
}
inline ::osi3::InterfaceVersion* MotionRequest::release_version() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osi3::InterfaceVersion* temp = _impl_.version_;
  _impl_.version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::InterfaceVersion* MotionRequest::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_release:osi3.MotionRequest.version)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osi3::InterfaceVersion* temp = _impl_.version_;
  _impl_.version_ = nullptr;
  return temp;
}
inline ::osi3::InterfaceVersion* MotionRequest::_internal_mutable_version() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.version_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::InterfaceVersion>(GetArenaForAllocation());
    _impl_.version_ = p;
  }
  return _impl_.version_;
}
inline ::osi3::InterfaceVersion* MotionRequest::mutable_version() {
  ::osi3::InterfaceVersion* _msg = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:osi3.MotionRequest.version)
  return _msg;
}
inline void MotionRequest::set_allocated_version(::osi3::InterfaceVersion* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.version_);
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(version));
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.version_ = version;
  // @@protoc_insertion_point(field_set_allocated:osi3.MotionRequest.version)
}

// optional .osi3.Timestamp timestamp = 2;
inline bool MotionRequest::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline bool MotionRequest::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::osi3::Timestamp& MotionRequest::_internal_timestamp() const {
  const ::osi3::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Timestamp&>(
      ::osi3::_Timestamp_default_instance_);
}
inline const ::osi3::Timestamp& MotionRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:osi3.MotionRequest.timestamp)
  return _internal_timestamp();
}
inline void MotionRequest::unsafe_arena_set_allocated_timestamp(
    ::osi3::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.MotionRequest.timestamp)
}
inline ::osi3::Timestamp* MotionRequest::release_timestamp() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::osi3::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::Timestamp* MotionRequest::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:osi3.MotionRequest.timestamp)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::osi3::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::osi3::Timestamp* MotionRequest::_internal_mutable_timestamp() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::osi3::Timestamp* MotionRequest::mutable_timestamp() {
  ::osi3::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:osi3.MotionRequest.timestamp)
  return _msg;
}
inline void MotionRequest::set_allocated_timestamp(::osi3::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:osi3.MotionRequest.timestamp)
}

// optional .osi3.MotionRequest.MotionRequestType motion_request_type = 3;
inline bool MotionRequest::_internal_has_motion_request_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MotionRequest::has_motion_request_type() const {
  return _internal_has_motion_request_type();
}
inline void MotionRequest::clear_motion_request_type() {
  _impl_.motion_request_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::osi3::MotionRequest_MotionRequestType MotionRequest::_internal_motion_request_type() const {
  return static_cast< ::osi3::MotionRequest_MotionRequestType >(_impl_.motion_request_type_);
}
inline ::osi3::MotionRequest_MotionRequestType MotionRequest::motion_request_type() const {
  // @@protoc_insertion_point(field_get:osi3.MotionRequest.motion_request_type)
  return _internal_motion_request_type();
}
inline void MotionRequest::_internal_set_motion_request_type(::osi3::MotionRequest_MotionRequestType value) {
  assert(::osi3::MotionRequest_MotionRequestType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.motion_request_type_ = value;
}
inline void MotionRequest::set_motion_request_type(::osi3::MotionRequest_MotionRequestType value) {
  _internal_set_motion_request_type(value);
  // @@protoc_insertion_point(field_set:osi3.MotionRequest.motion_request_type)
}

// optional .osi3.MotionRequest.DesiredState desired_state = 4;
inline bool MotionRequest::_internal_has_desired_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.desired_state_ != nullptr);
  return value;
}
inline bool MotionRequest::has_desired_state() const {
  return _internal_has_desired_state();
}
inline void MotionRequest::clear_desired_state() {
  if (_impl_.desired_state_ != nullptr) _impl_.desired_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::osi3::MotionRequest_DesiredState& MotionRequest::_internal_desired_state() const {
  const ::osi3::MotionRequest_DesiredState* p = _impl_.desired_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::MotionRequest_DesiredState&>(
      ::osi3::_MotionRequest_DesiredState_default_instance_);
}
inline const ::osi3::MotionRequest_DesiredState& MotionRequest::desired_state() const {
  // @@protoc_insertion_point(field_get:osi3.MotionRequest.desired_state)
  return _internal_desired_state();
}
inline void MotionRequest::unsafe_arena_set_allocated_desired_state(
    ::osi3::MotionRequest_DesiredState* desired_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.desired_state_);
  }
  _impl_.desired_state_ = desired_state;
  if (desired_state) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.MotionRequest.desired_state)
}
inline ::osi3::MotionRequest_DesiredState* MotionRequest::release_desired_state() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::osi3::MotionRequest_DesiredState* temp = _impl_.desired_state_;
  _impl_.desired_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::MotionRequest_DesiredState* MotionRequest::unsafe_arena_release_desired_state() {
  // @@protoc_insertion_point(field_release:osi3.MotionRequest.desired_state)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::osi3::MotionRequest_DesiredState* temp = _impl_.desired_state_;
  _impl_.desired_state_ = nullptr;
  return temp;
}
inline ::osi3::MotionRequest_DesiredState* MotionRequest::_internal_mutable_desired_state() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.desired_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::MotionRequest_DesiredState>(GetArenaForAllocation());
    _impl_.desired_state_ = p;
  }
  return _impl_.desired_state_;
}
inline ::osi3::MotionRequest_DesiredState* MotionRequest::mutable_desired_state() {
  ::osi3::MotionRequest_DesiredState* _msg = _internal_mutable_desired_state();
  // @@protoc_insertion_point(field_mutable:osi3.MotionRequest.desired_state)
  return _msg;
}
inline void MotionRequest::set_allocated_desired_state(::osi3::MotionRequest_DesiredState* desired_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.desired_state_;
  }
  if (desired_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(desired_state);
    if (message_arena != submessage_arena) {
      desired_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, desired_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.desired_state_ = desired_state;
  // @@protoc_insertion_point(field_set_allocated:osi3.MotionRequest.desired_state)
}

// optional .osi3.MotionRequest.DesiredTrajectory desired_trajectory = 5;
inline bool MotionRequest::_internal_has_desired_trajectory() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.desired_trajectory_ != nullptr);
  return value;
}
inline bool MotionRequest::has_desired_trajectory() const {
  return _internal_has_desired_trajectory();
}
inline void MotionRequest::clear_desired_trajectory() {
  if (_impl_.desired_trajectory_ != nullptr) _impl_.desired_trajectory_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::osi3::MotionRequest_DesiredTrajectory& MotionRequest::_internal_desired_trajectory() const {
  const ::osi3::MotionRequest_DesiredTrajectory* p = _impl_.desired_trajectory_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::MotionRequest_DesiredTrajectory&>(
      ::osi3::_MotionRequest_DesiredTrajectory_default_instance_);
}
inline const ::osi3::MotionRequest_DesiredTrajectory& MotionRequest::desired_trajectory() const {
  // @@protoc_insertion_point(field_get:osi3.MotionRequest.desired_trajectory)
  return _internal_desired_trajectory();
}
inline void MotionRequest::unsafe_arena_set_allocated_desired_trajectory(
    ::osi3::MotionRequest_DesiredTrajectory* desired_trajectory) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.desired_trajectory_);
  }
  _impl_.desired_trajectory_ = desired_trajectory;
  if (desired_trajectory) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.MotionRequest.desired_trajectory)
}
inline ::osi3::MotionRequest_DesiredTrajectory* MotionRequest::release_desired_trajectory() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::osi3::MotionRequest_DesiredTrajectory* temp = _impl_.desired_trajectory_;
  _impl_.desired_trajectory_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::MotionRequest_DesiredTrajectory* MotionRequest::unsafe_arena_release_desired_trajectory() {
  // @@protoc_insertion_point(field_release:osi3.MotionRequest.desired_trajectory)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::osi3::MotionRequest_DesiredTrajectory* temp = _impl_.desired_trajectory_;
  _impl_.desired_trajectory_ = nullptr;
  return temp;
}
inline ::osi3::MotionRequest_DesiredTrajectory* MotionRequest::_internal_mutable_desired_trajectory() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.desired_trajectory_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::MotionRequest_DesiredTrajectory>(GetArenaForAllocation());
    _impl_.desired_trajectory_ = p;
  }
  return _impl_.desired_trajectory_;
}
inline ::osi3::MotionRequest_DesiredTrajectory* MotionRequest::mutable_desired_trajectory() {
  ::osi3::MotionRequest_DesiredTrajectory* _msg = _internal_mutable_desired_trajectory();
  // @@protoc_insertion_point(field_mutable:osi3.MotionRequest.desired_trajectory)
  return _msg;
}
inline void MotionRequest::set_allocated_desired_trajectory(::osi3::MotionRequest_DesiredTrajectory* desired_trajectory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.desired_trajectory_;
  }
  if (desired_trajectory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(desired_trajectory);
    if (message_arena != submessage_arena) {
      desired_trajectory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, desired_trajectory, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.desired_trajectory_ = desired_trajectory;
  // @@protoc_insertion_point(field_set_allocated:osi3.MotionRequest.desired_trajectory)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::osi3::MotionRequest_MotionRequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::MotionRequest_MotionRequestType>() {
  return ::osi3::MotionRequest_MotionRequestType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_osi_5fmotionrequest_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_hostvehicledata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_osi_5fhostvehicledata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_osi_5fhostvehicledata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "osi_version.pb.h"
#include "osi_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_osi_5fhostvehicledata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_osi_5fhostvehicledata_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fhostvehicledata_2eproto;
namespace osi3 {
class HostVehicleData;
struct HostVehicleDataDefaultTypeInternal;
extern HostVehicleDataDefaultTypeInternal _HostVehicleData_default_instance_;
class HostVehicleData_VehicleAutomatedDrivingFunction;
struct HostVehicleData_VehicleAutomatedDrivingFunctionDefaultTypeInternal;
extern HostVehicleData_VehicleAutomatedDrivingFunctionDefaultTypeInternal _HostVehicleData_VehicleAutomatedDrivingFunction_default_instance_;
class HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride;
struct HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverrideDefaultTypeInternal;
extern HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverrideDefaultTypeInternal _HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_default_instance_;
class HostVehicleData_VehicleBasics;
struct HostVehicleData_VehicleBasicsDefaultTypeInternal;
extern HostVehicleData_VehicleBasicsDefaultTypeInternal _HostVehicleData_VehicleBasics_default_instance_;
class HostVehicleData_VehicleBrakeSystem;
struct HostVehicleData_VehicleBrakeSystemDefaultTypeInternal;
extern HostVehicleData_VehicleBrakeSystemDefaultTypeInternal _HostVehicleData_VehicleBrakeSystem_default_instance_;
class HostVehicleData_VehicleLocalization;
struct HostVehicleData_VehicleLocalizationDefaultTypeInternal;
extern HostVehicleData_VehicleLocalizationDefaultTypeInternal _HostVehicleData_VehicleLocalization_default_instance_;
class HostVehicleData_VehicleMotion;
struct HostVehicleData_VehicleMotionDefaultTypeInternal;
extern HostVehicleData_VehicleMotionDefaultTypeInternal _HostVehicleData_VehicleMotion_default_instance_;
class HostVehicleData_VehiclePowertrain;
struct HostVehicleData_VehiclePowertrainDefaultTypeInternal;
extern HostVehicleData_VehiclePowertrainDefaultTypeInternal _HostVehicleData_VehiclePowertrain_default_instance_;
class HostVehicleData_VehiclePowertrain_Motor;
struct HostVehicleData_VehiclePowertrain_MotorDefaultTypeInternal;
extern HostVehicleData_VehiclePowertrain_MotorDefaultTypeInternal _HostVehicleData_VehiclePowertrain_Motor_default_instance_;
class HostVehicleData_VehicleSteering;
struct HostVehicleData_VehicleSteeringDefaultTypeInternal;
extern HostVehicleData_VehicleSteeringDefaultTypeInternal _HostVehicleData_VehicleSteering_default_instance_;
class HostVehicleData_VehicleWheels;
struct HostVehicleData_VehicleWheelsDefaultTypeInternal;
extern HostVehicleData_VehicleWheelsDefaultTypeInternal _HostVehicleData_VehicleWheels_default_instance_;
class HostVehicleData_VehicleWheels_WheelData;
struct HostVehicleData_VehicleWheels_WheelDataDefaultTypeInternal;
extern HostVehicleData_VehicleWheels_WheelDataDefaultTypeInternal _HostVehicleData_VehicleWheels_WheelData_default_instance_;
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> ::osi3::HostVehicleData* Arena::CreateMaybeMessage<::osi3::HostVehicleData>(Arena*);
template<> ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction* Arena::CreateMaybeMessage<::osi3::HostVehicleData_VehicleAutomatedDrivingFunction>(Arena*);
template<> ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride* Arena::CreateMaybeMessage<::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride>(Arena*);
template<> ::osi3::HostVehicleData_VehicleBasics* Arena::CreateMaybeMessage<::osi3::HostVehicleData_VehicleBasics>(Arena*);
template<> ::osi3::HostVehicleData_VehicleBrakeSystem* Arena::CreateMaybeMessage<::osi3::HostVehicleData_VehicleBrakeSystem>(Arena*);
template<> ::osi3::HostVehicleData_VehicleLocalization* Arena::CreateMaybeMessage<::osi3::HostVehicleData_VehicleLocalization>(Arena*);
template<> ::osi3::HostVehicleData_VehicleMotion* Arena::CreateMaybeMessage<::osi3::HostVehicleData_VehicleMotion>(Arena*);
template<> ::osi3::HostVehicleData_VehiclePowertrain* Arena::CreateMaybeMessage<::osi3::HostVehicleData_VehiclePowertrain>(Arena*);
template<> ::osi3::HostVehicleData_VehiclePowertrain_Motor* Arena::CreateMaybeMessage<::osi3::HostVehicleData_VehiclePowertrain_Motor>(Arena*);
template<> ::osi3::HostVehicleData_VehicleSteering* Arena::CreateMaybeMessage<::osi3::HostVehicleData_VehicleSteering>(Arena*);
template<> ::osi3::HostVehicleData_VehicleWheels* Arena::CreateMaybeMessage<::osi3::HostVehicleData_VehicleWheels>(Arena*);
template<> ::osi3::HostVehicleData_VehicleWheels_WheelData* Arena::CreateMaybeMessage<::osi3::HostVehicleData_VehicleWheels_WheelData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace osi3 {

enum HostVehicleData_VehicleBasics_OperatingState : int {
  HostVehicleData_VehicleBasics_OperatingState_OPERATING_STATE_UNKNOWN = 0,
  HostVehicleData_VehicleBasics_OperatingState_OPERATING_STATE_OTHER = 1,
  HostVehicleData_VehicleBasics_OperatingState_OPERATING_STATE_SLEEP = 2,
  HostVehicleData_VehicleBasics_OperatingState_OPERATING_STATE_STANDBY = 3,
  HostVehicleData_VehicleBasics_OperatingState_OPERATING_STATE_BOARDING = 4,
  HostVehicleData_VehicleBasics_OperatingState_OPERATING_STATE_ENTERTAINMENT = 5,
  HostVehicleData_VehicleBasics_OperatingState_OPERATING_STATE_DRIVING = 6,
  HostVehicleData_VehicleBasics_OperatingState_OPERATING_STATE_DIAGNOSTIC = 7
};
bool HostVehicleData_VehicleBasics_OperatingState_IsValid(int value);
constexpr HostVehicleData_VehicleBasics_OperatingState HostVehicleData_VehicleBasics_OperatingState_OperatingState_MIN = HostVehicleData_VehicleBasics_OperatingState_OPERATING_STATE_UNKNOWN;
constexpr HostVehicleData_VehicleBasics_OperatingState HostVehicleData_VehicleBasics_OperatingState_OperatingState_MAX = HostVehicleData_VehicleBasics_OperatingState_OPERATING_STATE_DIAGNOSTIC;
constexpr int HostVehicleData_VehicleBasics_OperatingState_OperatingState_ARRAYSIZE = HostVehicleData_VehicleBasics_OperatingState_OperatingState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HostVehicleData_VehicleBasics_OperatingState_descriptor();
template<typename T>
inline const std::string& HostVehicleData_VehicleBasics_OperatingState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HostVehicleData_VehicleBasics_OperatingState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HostVehicleData_VehicleBasics_OperatingState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HostVehicleData_VehicleBasics_OperatingState_descriptor(), enum_t_value);
}
inline bool HostVehicleData_VehicleBasics_OperatingState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HostVehicleData_VehicleBasics_OperatingState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HostVehicleData_VehicleBasics_OperatingState>(
    HostVehicleData_VehicleBasics_OperatingState_descriptor(), name, value);
}
enum HostVehicleData_VehiclePowertrain_Motor_Type : int {
  HostVehicleData_VehiclePowertrain_Motor_Type_TYPE_UNKNOWN = 0,
  HostVehicleData_VehiclePowertrain_Motor_Type_TYPE_OTHER = 1,
  HostVehicleData_VehiclePowertrain_Motor_Type_TYPE_OTTO = 2,
  HostVehicleData_VehiclePowertrain_Motor_Type_TYPE_DIESEL = 3,
  HostVehicleData_VehiclePowertrain_Motor_Type_TYPE_ELECTRIC = 4
};
bool HostVehicleData_VehiclePowertrain_Motor_Type_IsValid(int value);
constexpr HostVehicleData_VehiclePowertrain_Motor_Type HostVehicleData_VehiclePowertrain_Motor_Type_Type_MIN = HostVehicleData_VehiclePowertrain_Motor_Type_TYPE_UNKNOWN;
constexpr HostVehicleData_VehiclePowertrain_Motor_Type HostVehicleData_VehiclePowertrain_Motor_Type_Type_MAX = HostVehicleData_VehiclePowertrain_Motor_Type_TYPE_ELECTRIC;
constexpr int HostVehicleData_VehiclePowertrain_Motor_Type_Type_ARRAYSIZE = HostVehicleData_VehiclePowertrain_Motor_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HostVehicleData_VehiclePowertrain_Motor_Type_descriptor();
template<typename T>
inline const std::string& HostVehicleData_VehiclePowertrain_Motor_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HostVehicleData_VehiclePowertrain_Motor_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HostVehicleData_VehiclePowertrain_Motor_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HostVehicleData_VehiclePowertrain_Motor_Type_descriptor(), enum_t_value);
}
inline bool HostVehicleData_VehiclePowertrain_Motor_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HostVehicleData_VehiclePowertrain_Motor_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HostVehicleData_VehiclePowertrain_Motor_Type>(
    HostVehicleData_VehiclePowertrain_Motor_Type_descriptor(), name, value);
}
enum HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason : int {
  HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_REASON_BRAKE_PEDAL = 0,
  HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_REASON_STEERING_INPUT = 1
};
bool HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_IsValid(int value);
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_Reason_MIN = HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_REASON_BRAKE_PEDAL;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_Reason_MAX = HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_REASON_STEERING_INPUT;
constexpr int HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_Reason_ARRAYSIZE = HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_Reason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_descriptor();
template<typename T>
inline const std::string& HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_descriptor(), enum_t_value);
}
inline bool HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason>(
    HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_descriptor(), name, value);
}
enum HostVehicleData_VehicleAutomatedDrivingFunction_Name : int {
  HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_UNKNOWN = 0,
  HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_OTHER = 1,
  HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_BLIND_SPOT_WARNING = 2,
  HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_FORWARD_COLLISION_WARNING = 3,
  HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_LANE_DEPARTURE_WARNING = 4,
  HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_PARKING_COLLISION_WARNING = 5,
  HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_REAR_CROSS_TRAFFIC_WARNING = 6,
  HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_AUTOMATIC_EMERGENCY_BRAKING = 7,
  HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_AUTOMATIC_EMERGENCY_STEERING = 8,
  HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_REVERSE_AUTOMATIC_EMERGENCY_BRAKING = 9,
  HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_ADAPTIVE_CRUISE_CONTROL = 10,
  HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_LANE_KEEPING_ASSIST = 11,
  HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_ACTIVE_DRIVING_ASSISTANCE = 12,
  HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_BACKUP_CAMERA = 13,
  HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_SURROUND_VIEW_CAMERA = 14,
  HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_ACTIVE_PARKING_ASSISTANCE = 15,
  HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_REMOTE_PARKING_ASSISTANCE = 16,
  HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_TRAILER_ASSISTANCE = 17,
  HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_AUTOMATIC_HIGH_BEAMS = 18,
  HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_DRIVER_MONITORING = 19,
  HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_HEAD_UP_DISPLAY = 20,
  HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_NIGHT_VISION = 21,
  HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_URBAN_DRIVING = 22,
  HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_HIGHWAY_AUTOPILOT = 23,
  HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_CRUISE_CONTROL = 24,
  HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_SPEED_LIMIT_CONTROL = 25
};
bool HostVehicleData_VehicleAutomatedDrivingFunction_Name_IsValid(int value);
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction_Name_Name_MIN = HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_UNKNOWN;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction_Name_Name_MAX = HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_SPEED_LIMIT_CONTROL;
constexpr int HostVehicleData_VehicleAutomatedDrivingFunction_Name_Name_ARRAYSIZE = HostVehicleData_VehicleAutomatedDrivingFunction_Name_Name_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HostVehicleData_VehicleAutomatedDrivingFunction_Name_descriptor();
template<typename T>
inline const std::string& HostVehicleData_VehicleAutomatedDrivingFunction_Name_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HostVehicleData_VehicleAutomatedDrivingFunction_Name>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HostVehicleData_VehicleAutomatedDrivingFunction_Name_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_descriptor(), enum_t_value);
}
inline bool HostVehicleData_VehicleAutomatedDrivingFunction_Name_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HostVehicleData_VehicleAutomatedDrivingFunction_Name* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HostVehicleData_VehicleAutomatedDrivingFunction_Name>(
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_descriptor(), name, value);
}
enum HostVehicleData_VehicleAutomatedDrivingFunction_State : int {
  HostVehicleData_VehicleAutomatedDrivingFunction_State_STATE_UNKNOWN = 0,
  HostVehicleData_VehicleAutomatedDrivingFunction_State_STATE_OTHER = 1,
  HostVehicleData_VehicleAutomatedDrivingFunction_State_STATE_ERRORED = 2,
  HostVehicleData_VehicleAutomatedDrivingFunction_State_STATE_UNAVAILABLE = 3,
  HostVehicleData_VehicleAutomatedDrivingFunction_State_STATE_AVAILABLE = 4,
  HostVehicleData_VehicleAutomatedDrivingFunction_State_STATE_STANDBY = 5,
  HostVehicleData_VehicleAutomatedDrivingFunction_State_STATE_ACTIVE = 6
};
bool HostVehicleData_VehicleAutomatedDrivingFunction_State_IsValid(int value);
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_State HostVehicleData_VehicleAutomatedDrivingFunction_State_State_MIN = HostVehicleData_VehicleAutomatedDrivingFunction_State_STATE_UNKNOWN;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_State HostVehicleData_VehicleAutomatedDrivingFunction_State_State_MAX = HostVehicleData_VehicleAutomatedDrivingFunction_State_STATE_ACTIVE;
constexpr int HostVehicleData_VehicleAutomatedDrivingFunction_State_State_ARRAYSIZE = HostVehicleData_VehicleAutomatedDrivingFunction_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HostVehicleData_VehicleAutomatedDrivingFunction_State_descriptor();
template<typename T>
inline const std::string& HostVehicleData_VehicleAutomatedDrivingFunction_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HostVehicleData_VehicleAutomatedDrivingFunction_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HostVehicleData_VehicleAutomatedDrivingFunction_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HostVehicleData_VehicleAutomatedDrivingFunction_State_descriptor(), enum_t_value);
}
inline bool HostVehicleData_VehicleAutomatedDrivingFunction_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HostVehicleData_VehicleAutomatedDrivingFunction_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HostVehicleData_VehicleAutomatedDrivingFunction_State>(
    HostVehicleData_VehicleAutomatedDrivingFunction_State_descriptor(), name, value);
}
// ===================================================================

class HostVehicleData_VehicleBasics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.HostVehicleData.VehicleBasics) */ {
 public:
  inline HostVehicleData_VehicleBasics() : HostVehicleData_VehicleBasics(nullptr) {}
  ~HostVehicleData_VehicleBasics() override;
  explicit PROTOBUF_CONSTEXPR HostVehicleData_VehicleBasics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HostVehicleData_VehicleBasics(const HostVehicleData_VehicleBasics& from);
  HostVehicleData_VehicleBasics(HostVehicleData_VehicleBasics&& from) noexcept
    : HostVehicleData_VehicleBasics() {
    *this = ::std::move(from);
  }

  inline HostVehicleData_VehicleBasics& operator=(const HostVehicleData_VehicleBasics& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostVehicleData_VehicleBasics& operator=(HostVehicleData_VehicleBasics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HostVehicleData_VehicleBasics& default_instance() {
    return *internal_default_instance();
  }
  static inline const HostVehicleData_VehicleBasics* internal_default_instance() {
    return reinterpret_cast<const HostVehicleData_VehicleBasics*>(
               &_HostVehicleData_VehicleBasics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HostVehicleData_VehicleBasics& a, HostVehicleData_VehicleBasics& b) {
    a.Swap(&b);
  }
  inline void Swap(HostVehicleData_VehicleBasics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostVehicleData_VehicleBasics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HostVehicleData_VehicleBasics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HostVehicleData_VehicleBasics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HostVehicleData_VehicleBasics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HostVehicleData_VehicleBasics& from) {
    HostVehicleData_VehicleBasics::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostVehicleData_VehicleBasics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.HostVehicleData.VehicleBasics";
  }
  protected:
  explicit HostVehicleData_VehicleBasics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HostVehicleData_VehicleBasics_OperatingState OperatingState;
  static constexpr OperatingState OPERATING_STATE_UNKNOWN =
    HostVehicleData_VehicleBasics_OperatingState_OPERATING_STATE_UNKNOWN;
  static constexpr OperatingState OPERATING_STATE_OTHER =
    HostVehicleData_VehicleBasics_OperatingState_OPERATING_STATE_OTHER;
  static constexpr OperatingState OPERATING_STATE_SLEEP =
    HostVehicleData_VehicleBasics_OperatingState_OPERATING_STATE_SLEEP;
  static constexpr OperatingState OPERATING_STATE_STANDBY =
    HostVehicleData_VehicleBasics_OperatingState_OPERATING_STATE_STANDBY;
  static constexpr OperatingState OPERATING_STATE_BOARDING =
    HostVehicleData_VehicleBasics_OperatingState_OPERATING_STATE_BOARDING;
  static constexpr OperatingState OPERATING_STATE_ENTERTAINMENT =
    HostVehicleData_VehicleBasics_OperatingState_OPERATING_STATE_ENTERTAINMENT;
  static constexpr OperatingState OPERATING_STATE_DRIVING =
    HostVehicleData_VehicleBasics_OperatingState_OPERATING_STATE_DRIVING;
  static constexpr OperatingState OPERATING_STATE_DIAGNOSTIC =
    HostVehicleData_VehicleBasics_OperatingState_OPERATING_STATE_DIAGNOSTIC;
  static inline bool OperatingState_IsValid(int value) {
    return HostVehicleData_VehicleBasics_OperatingState_IsValid(value);
  }
  static constexpr OperatingState OperatingState_MIN =
    HostVehicleData_VehicleBasics_OperatingState_OperatingState_MIN;
  static constexpr OperatingState OperatingState_MAX =
    HostVehicleData_VehicleBasics_OperatingState_OperatingState_MAX;
  static constexpr int OperatingState_ARRAYSIZE =
    HostVehicleData_VehicleBasics_OperatingState_OperatingState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OperatingState_descriptor() {
    return HostVehicleData_VehicleBasics_OperatingState_descriptor();
  }
  template<typename T>
  static inline const std::string& OperatingState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OperatingState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OperatingState_Name.");
    return HostVehicleData_VehicleBasics_OperatingState_Name(enum_t_value);
  }
  static inline bool OperatingState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OperatingState* value) {
    return HostVehicleData_VehicleBasics_OperatingState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCurbWeightFieldNumber = 1,
    kOperatingStateFieldNumber = 2,
  };
  // optional double curb_weight = 1;
  bool has_curb_weight() const;
  private:
  bool _internal_has_curb_weight() const;
  public:
  void clear_curb_weight();
  double curb_weight() const;
  void set_curb_weight(double value);
  private:
  double _internal_curb_weight() const;
  void _internal_set_curb_weight(double value);
  public:

  // optional .osi3.HostVehicleData.VehicleBasics.OperatingState operating_state = 2;
  bool has_operating_state() const;
  private:
  bool _internal_has_operating_state() const;
  public:
  void clear_operating_state();
  ::osi3::HostVehicleData_VehicleBasics_OperatingState operating_state() const;
  void set_operating_state(::osi3::HostVehicleData_VehicleBasics_OperatingState value);
  private:
  ::osi3::HostVehicleData_VehicleBasics_OperatingState _internal_operating_state() const;
  void _internal_set_operating_state(::osi3::HostVehicleData_VehicleBasics_OperatingState value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.HostVehicleData.VehicleBasics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double curb_weight_;
    int operating_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osi_5fhostvehicledata_2eproto;
};
// -------------------------------------------------------------------

class HostVehicleData_VehiclePowertrain_Motor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.HostVehicleData.VehiclePowertrain.Motor) */ {
 public:
  inline HostVehicleData_VehiclePowertrain_Motor() : HostVehicleData_VehiclePowertrain_Motor(nullptr) {}
  ~HostVehicleData_VehiclePowertrain_Motor() override;
  explicit PROTOBUF_CONSTEXPR HostVehicleData_VehiclePowertrain_Motor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HostVehicleData_VehiclePowertrain_Motor(const HostVehicleData_VehiclePowertrain_Motor& from);
  HostVehicleData_VehiclePowertrain_Motor(HostVehicleData_VehiclePowertrain_Motor&& from) noexcept
    : HostVehicleData_VehiclePowertrain_Motor() {
    *this = ::std::move(from);
  }

  inline HostVehicleData_VehiclePowertrain_Motor& operator=(const HostVehicleData_VehiclePowertrain_Motor& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostVehicleData_VehiclePowertrain_Motor& operator=(HostVehicleData_VehiclePowertrain_Motor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HostVehicleData_VehiclePowertrain_Motor& default_instance() {
    return *internal_default_instance();
  }
  static inline const HostVehicleData_VehiclePowertrain_Motor* internal_default_instance() {
    return reinterpret_cast<const HostVehicleData_VehiclePowertrain_Motor*>(
               &_HostVehicleData_VehiclePowertrain_Motor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HostVehicleData_VehiclePowertrain_Motor& a, HostVehicleData_VehiclePowertrain_Motor& b) {
    a.Swap(&b);
  }
  inline void Swap(HostVehicleData_VehiclePowertrain_Motor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostVehicleData_VehiclePowertrain_Motor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HostVehicleData_VehiclePowertrain_Motor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HostVehicleData_VehiclePowertrain_Motor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HostVehicleData_VehiclePowertrain_Motor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HostVehicleData_VehiclePowertrain_Motor& from) {
    HostVehicleData_VehiclePowertrain_Motor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostVehicleData_VehiclePowertrain_Motor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.HostVehicleData.VehiclePowertrain.Motor";
  }
  protected:
  explicit HostVehicleData_VehiclePowertrain_Motor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HostVehicleData_VehiclePowertrain_Motor_Type Type;
  static constexpr Type TYPE_UNKNOWN =
    HostVehicleData_VehiclePowertrain_Motor_Type_TYPE_UNKNOWN;
  static constexpr Type TYPE_OTHER =
    HostVehicleData_VehiclePowertrain_Motor_Type_TYPE_OTHER;
  static constexpr Type TYPE_OTTO =
    HostVehicleData_VehiclePowertrain_Motor_Type_TYPE_OTTO;
  static constexpr Type TYPE_DIESEL =
    HostVehicleData_VehiclePowertrain_Motor_Type_TYPE_DIESEL;
  static constexpr Type TYPE_ELECTRIC =
    HostVehicleData_VehiclePowertrain_Motor_Type_TYPE_ELECTRIC;
  static inline bool Type_IsValid(int value) {
    return HostVehicleData_VehiclePowertrain_Motor_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    HostVehicleData_VehiclePowertrain_Motor_Type_Type_MIN;
  static constexpr Type Type_MAX =
    HostVehicleData_VehiclePowertrain_Motor_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    HostVehicleData_VehiclePowertrain_Motor_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return HostVehicleData_VehiclePowertrain_Motor_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return HostVehicleData_VehiclePowertrain_Motor_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return HostVehicleData_VehiclePowertrain_Motor_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRpmFieldNumber = 2,
    kTorqueFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // optional double rpm = 2;
  bool has_rpm() const;
  private:
  bool _internal_has_rpm() const;
  public:
  void clear_rpm();
  double rpm() const;
  void set_rpm(double value);
  private:
  double _internal_rpm() const;
  void _internal_set_rpm(double value);
  public:

  // optional double torque = 3;
  bool has_torque() const;
  private:
  bool _internal_has_torque() const;
  public:
  void clear_torque();
  double torque() const;
  void set_torque(double value);
  private:
  double _internal_torque() const;
  void _internal_set_torque(double value);
  public:

  // optional .osi3.HostVehicleData.VehiclePowertrain.Motor.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::osi3::HostVehicleData_VehiclePowertrain_Motor_Type type() const;
  void set_type(::osi3::HostVehicleData_VehiclePowertrain_Motor_Type value);
  private:
  ::osi3::HostVehicleData_VehiclePowertrain_Motor_Type _internal_type() const;
  void _internal_set_type(::osi3::HostVehicleData_VehiclePowertrain_Motor_Type value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.HostVehicleData.VehiclePowertrain.Motor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double rpm_;
    double torque_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osi_5fhostvehicledata_2eproto;
};
// -------------------------------------------------------------------

class HostVehicleData_VehiclePowertrain final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.HostVehicleData.VehiclePowertrain) */ {
 public:
  inline HostVehicleData_VehiclePowertrain() : HostVehicleData_VehiclePowertrain(nullptr) {}
  ~HostVehicleData_VehiclePowertrain() override;
  explicit PROTOBUF_CONSTEXPR HostVehicleData_VehiclePowertrain(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HostVehicleData_VehiclePowertrain(const HostVehicleData_VehiclePowertrain& from);
  HostVehicleData_VehiclePowertrain(HostVehicleData_VehiclePowertrain&& from) noexcept
    : HostVehicleData_VehiclePowertrain() {
    *this = ::std::move(from);
  }

  inline HostVehicleData_VehiclePowertrain& operator=(const HostVehicleData_VehiclePowertrain& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostVehicleData_VehiclePowertrain& operator=(HostVehicleData_VehiclePowertrain&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HostVehicleData_VehiclePowertrain& default_instance() {
    return *internal_default_instance();
  }
  static inline const HostVehicleData_VehiclePowertrain* internal_default_instance() {
    return reinterpret_cast<const HostVehicleData_VehiclePowertrain*>(
               &_HostVehicleData_VehiclePowertrain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HostVehicleData_VehiclePowertrain& a, HostVehicleData_VehiclePowertrain& b) {
    a.Swap(&b);
  }
  inline void Swap(HostVehicleData_VehiclePowertrain* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostVehicleData_VehiclePowertrain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HostVehicleData_VehiclePowertrain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HostVehicleData_VehiclePowertrain>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HostVehicleData_VehiclePowertrain& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HostVehicleData_VehiclePowertrain& from) {
    HostVehicleData_VehiclePowertrain::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostVehicleData_VehiclePowertrain* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.HostVehicleData.VehiclePowertrain";
  }
  protected:
  explicit HostVehicleData_VehiclePowertrain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HostVehicleData_VehiclePowertrain_Motor Motor;

  // accessors -------------------------------------------------------

  enum : int {
    kMotorFieldNumber = 4,
    kPedalPositionAccelerationFieldNumber = 1,
    kPedalPositionClutchFieldNumber = 2,
    kGearTransmissionFieldNumber = 3,
  };
  // repeated .osi3.HostVehicleData.VehiclePowertrain.Motor motor = 4;
  int motor_size() const;
  private:
  int _internal_motor_size() const;
  public:
  void clear_motor();
  ::osi3::HostVehicleData_VehiclePowertrain_Motor* mutable_motor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::HostVehicleData_VehiclePowertrain_Motor >*
      mutable_motor();
  private:
  const ::osi3::HostVehicleData_VehiclePowertrain_Motor& _internal_motor(int index) const;
  ::osi3::HostVehicleData_VehiclePowertrain_Motor* _internal_add_motor();
  public:
  const ::osi3::HostVehicleData_VehiclePowertrain_Motor& motor(int index) const;
  ::osi3::HostVehicleData_VehiclePowertrain_Motor* add_motor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::HostVehicleData_VehiclePowertrain_Motor >&
      motor() const;

  // optional double pedal_position_acceleration = 1;
  bool has_pedal_position_acceleration() const;
  private:
  bool _internal_has_pedal_position_acceleration() const;
  public:
  void clear_pedal_position_acceleration();
  double pedal_position_acceleration() const;
  void set_pedal_position_acceleration(double value);
  private:
  double _internal_pedal_position_acceleration() const;
  void _internal_set_pedal_position_acceleration(double value);
  public:

  // optional double pedal_position_clutch = 2;
  bool has_pedal_position_clutch() const;
  private:
  bool _internal_has_pedal_position_clutch() const;
  public:
  void clear_pedal_position_clutch();
  double pedal_position_clutch() const;
  void set_pedal_position_clutch(double value);
  private:
  double _internal_pedal_position_clutch() const;
  void _internal_set_pedal_position_clutch(double value);
  public:

  // optional int32 gear_transmission = 3;
  bool has_gear_transmission() const;
  private:
  bool _internal_has_gear_transmission() const;
  public:
  void clear_gear_transmission();
  int32_t gear_transmission() const;
  void set_gear_transmission(int32_t value);
  private:
  int32_t _internal_gear_transmission() const;
  void _internal_set_gear_transmission(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.HostVehicleData.VehiclePowertrain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::HostVehicleData_VehiclePowertrain_Motor > motor_;
    double pedal_position_acceleration_;
    double pedal_position_clutch_;
    int32_t gear_transmission_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osi_5fhostvehicledata_2eproto;
};
// -------------------------------------------------------------------

class HostVehicleData_VehicleBrakeSystem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.HostVehicleData.VehicleBrakeSystem) */ {
 public:
  inline HostVehicleData_VehicleBrakeSystem() : HostVehicleData_VehicleBrakeSystem(nullptr) {}
  ~HostVehicleData_VehicleBrakeSystem() override;
  explicit PROTOBUF_CONSTEXPR HostVehicleData_VehicleBrakeSystem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HostVehicleData_VehicleBrakeSystem(const HostVehicleData_VehicleBrakeSystem& from);
  HostVehicleData_VehicleBrakeSystem(HostVehicleData_VehicleBrakeSystem&& from) noexcept
    : HostVehicleData_VehicleBrakeSystem() {
    *this = ::std::move(from);
  }

  inline HostVehicleData_VehicleBrakeSystem& operator=(const HostVehicleData_VehicleBrakeSystem& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostVehicleData_VehicleBrakeSystem& operator=(HostVehicleData_VehicleBrakeSystem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HostVehicleData_VehicleBrakeSystem& default_instance() {
    return *internal_default_instance();
  }
  static inline const HostVehicleData_VehicleBrakeSystem* internal_default_instance() {
    return reinterpret_cast<const HostVehicleData_VehicleBrakeSystem*>(
               &_HostVehicleData_VehicleBrakeSystem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HostVehicleData_VehicleBrakeSystem& a, HostVehicleData_VehicleBrakeSystem& b) {
    a.Swap(&b);
  }
  inline void Swap(HostVehicleData_VehicleBrakeSystem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostVehicleData_VehicleBrakeSystem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HostVehicleData_VehicleBrakeSystem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HostVehicleData_VehicleBrakeSystem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HostVehicleData_VehicleBrakeSystem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HostVehicleData_VehicleBrakeSystem& from) {
    HostVehicleData_VehicleBrakeSystem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostVehicleData_VehicleBrakeSystem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.HostVehicleData.VehicleBrakeSystem";
  }
  protected:
  explicit HostVehicleData_VehicleBrakeSystem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPedalPositionBrakeFieldNumber = 1,
  };
  // optional double pedal_position_brake = 1;
  bool has_pedal_position_brake() const;
  private:
  bool _internal_has_pedal_position_brake() const;
  public:
  void clear_pedal_position_brake();
  double pedal_position_brake() const;
  void set_pedal_position_brake(double value);
  private:
  double _internal_pedal_position_brake() const;
  void _internal_set_pedal_position_brake(double value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.HostVehicleData.VehicleBrakeSystem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double pedal_position_brake_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osi_5fhostvehicledata_2eproto;
};
// -------------------------------------------------------------------

class HostVehicleData_VehicleSteering final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.HostVehicleData.VehicleSteering) */ {
 public:
  inline HostVehicleData_VehicleSteering() : HostVehicleData_VehicleSteering(nullptr) {}
  ~HostVehicleData_VehicleSteering() override;
  explicit PROTOBUF_CONSTEXPR HostVehicleData_VehicleSteering(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HostVehicleData_VehicleSteering(const HostVehicleData_VehicleSteering& from);
  HostVehicleData_VehicleSteering(HostVehicleData_VehicleSteering&& from) noexcept
    : HostVehicleData_VehicleSteering() {
    *this = ::std::move(from);
  }

  inline HostVehicleData_VehicleSteering& operator=(const HostVehicleData_VehicleSteering& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostVehicleData_VehicleSteering& operator=(HostVehicleData_VehicleSteering&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HostVehicleData_VehicleSteering& default_instance() {
    return *internal_default_instance();
  }
  static inline const HostVehicleData_VehicleSteering* internal_default_instance() {
    return reinterpret_cast<const HostVehicleData_VehicleSteering*>(
               &_HostVehicleData_VehicleSteering_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HostVehicleData_VehicleSteering& a, HostVehicleData_VehicleSteering& b) {
    a.Swap(&b);
  }
  inline void Swap(HostVehicleData_VehicleSteering* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostVehicleData_VehicleSteering* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HostVehicleData_VehicleSteering* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HostVehicleData_VehicleSteering>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HostVehicleData_VehicleSteering& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HostVehicleData_VehicleSteering& from) {
    HostVehicleData_VehicleSteering::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostVehicleData_VehicleSteering* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.HostVehicleData.VehicleSteering";
  }
  protected:
  explicit HostVehicleData_VehicleSteering(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleSteeringWheelFieldNumber = 1,
  };
  // optional .osi3.VehicleSteeringWheel vehicle_steering_wheel = 1;
  bool has_vehicle_steering_wheel() const;
  private:
  bool _internal_has_vehicle_steering_wheel() const;
  public:
  void clear_vehicle_steering_wheel();
  const ::osi3::VehicleSteeringWheel& vehicle_steering_wheel() const;
  PROTOBUF_NODISCARD ::osi3::VehicleSteeringWheel* release_vehicle_steering_wheel();
  ::osi3::VehicleSteeringWheel* mutable_vehicle_steering_wheel();
  void set_allocated_vehicle_steering_wheel(::osi3::VehicleSteeringWheel* vehicle_steering_wheel);
  private:
  const ::osi3::VehicleSteeringWheel& _internal_vehicle_steering_wheel() const;
  ::osi3::VehicleSteeringWheel* _internal_mutable_vehicle_steering_wheel();
  public:
  void unsafe_arena_set_allocated_vehicle_steering_wheel(
      ::osi3::VehicleSteeringWheel* vehicle_steering_wheel);
  ::osi3::VehicleSteeringWheel* unsafe_arena_release_vehicle_steering_wheel();

  // @@protoc_insertion_point(class_scope:osi3.HostVehicleData.VehicleSteering)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::osi3::VehicleSteeringWheel* vehicle_steering_wheel_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osi_5fhostvehicledata_2eproto;
};
// -------------------------------------------------------------------

class HostVehicleData_VehicleWheels_WheelData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.HostVehicleData.VehicleWheels.WheelData) */ {
 public:
  inline HostVehicleData_VehicleWheels_WheelData() : HostVehicleData_VehicleWheels_WheelData(nullptr) {}
  ~HostVehicleData_VehicleWheels_WheelData() override;
  explicit PROTOBUF_CONSTEXPR HostVehicleData_VehicleWheels_WheelData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HostVehicleData_VehicleWheels_WheelData(const HostVehicleData_VehicleWheels_WheelData& from);
  HostVehicleData_VehicleWheels_WheelData(HostVehicleData_VehicleWheels_WheelData&& from) noexcept
    : HostVehicleData_VehicleWheels_WheelData() {
    *this = ::std::move(from);
  }

  inline HostVehicleData_VehicleWheels_WheelData& operator=(const HostVehicleData_VehicleWheels_WheelData& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostVehicleData_VehicleWheels_WheelData& operator=(HostVehicleData_VehicleWheels_WheelData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HostVehicleData_VehicleWheels_WheelData& default_instance() {
    return *internal_default_instance();
  }
  static inline const HostVehicleData_VehicleWheels_WheelData* internal_default_instance() {
    return reinterpret_cast<const HostVehicleData_VehicleWheels_WheelData*>(
               &_HostVehicleData_VehicleWheels_WheelData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(HostVehicleData_VehicleWheels_WheelData& a, HostVehicleData_VehicleWheels_WheelData& b) {
    a.Swap(&b);
  }
  inline void Swap(HostVehicleData_VehicleWheels_WheelData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostVehicleData_VehicleWheels_WheelData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HostVehicleData_VehicleWheels_WheelData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HostVehicleData_VehicleWheels_WheelData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HostVehicleData_VehicleWheels_WheelData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HostVehicleData_VehicleWheels_WheelData& from) {
    HostVehicleData_VehicleWheels_WheelData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostVehicleData_VehicleWheels_WheelData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.HostVehicleData.VehicleWheels.WheelData";
  }
  protected:
  explicit HostVehicleData_VehicleWheels_WheelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxleFieldNumber = 1,
    kIndexFieldNumber = 2,
    kRotationRateFieldNumber = 3,
    kSlipFieldNumber = 4,
  };
  // optional uint32 axle = 1;
  bool has_axle() const;
  private:
  bool _internal_has_axle() const;
  public:
  void clear_axle();
  uint32_t axle() const;
  void set_axle(uint32_t value);
  private:
  uint32_t _internal_axle() const;
  void _internal_set_axle(uint32_t value);
  public:

  // optional uint32 index = 2;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // optional double rotation_rate = 3;
  bool has_rotation_rate() const;
  private:
  bool _internal_has_rotation_rate() const;
  public:
  void clear_rotation_rate();
  double rotation_rate() const;
  void set_rotation_rate(double value);
  private:
  double _internal_rotation_rate() const;
  void _internal_set_rotation_rate(double value);
  public:

  // optional double slip = 4;
  bool has_slip() const;
  private:
  bool _internal_has_slip() const;
  public:
  void clear_slip();
  double slip() const;
  void set_slip(double value);
  private:
  double _internal_slip() const;
  void _internal_set_slip(double value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.HostVehicleData.VehicleWheels.WheelData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t axle_;
    uint32_t index_;
    double rotation_rate_;
    double slip_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osi_5fhostvehicledata_2eproto;
};
// -------------------------------------------------------------------

class HostVehicleData_VehicleWheels final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.HostVehicleData.VehicleWheels) */ {
 public:
  inline HostVehicleData_VehicleWheels() : HostVehicleData_VehicleWheels(nullptr) {}
  ~HostVehicleData_VehicleWheels() override;
  explicit PROTOBUF_CONSTEXPR HostVehicleData_VehicleWheels(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HostVehicleData_VehicleWheels(const HostVehicleData_VehicleWheels& from);
  HostVehicleData_VehicleWheels(HostVehicleData_VehicleWheels&& from) noexcept
    : HostVehicleData_VehicleWheels() {
    *this = ::std::move(from);
  }

  inline HostVehicleData_VehicleWheels& operator=(const HostVehicleData_VehicleWheels& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostVehicleData_VehicleWheels& operator=(HostVehicleData_VehicleWheels&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HostVehicleData_VehicleWheels& default_instance() {
    return *internal_default_instance();
  }
  static inline const HostVehicleData_VehicleWheels* internal_default_instance() {
    return reinterpret_cast<const HostVehicleData_VehicleWheels*>(
               &_HostVehicleData_VehicleWheels_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(HostVehicleData_VehicleWheels& a, HostVehicleData_VehicleWheels& b) {
    a.Swap(&b);
  }
  inline void Swap(HostVehicleData_VehicleWheels* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostVehicleData_VehicleWheels* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HostVehicleData_VehicleWheels* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HostVehicleData_VehicleWheels>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HostVehicleData_VehicleWheels& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HostVehicleData_VehicleWheels& from) {
    HostVehicleData_VehicleWheels::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostVehicleData_VehicleWheels* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.HostVehicleData.VehicleWheels";
  }
  protected:
  explicit HostVehicleData_VehicleWheels(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HostVehicleData_VehicleWheels_WheelData WheelData;

  // accessors -------------------------------------------------------

  enum : int {
    kWheelDataFieldNumber = 1,
  };
  // repeated .osi3.HostVehicleData.VehicleWheels.WheelData wheel_data = 1;
  int wheel_data_size() const;
  private:
  int _internal_wheel_data_size() const;
  public:
  void clear_wheel_data();
  ::osi3::HostVehicleData_VehicleWheels_WheelData* mutable_wheel_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::HostVehicleData_VehicleWheels_WheelData >*
      mutable_wheel_data();
  private:
  const ::osi3::HostVehicleData_VehicleWheels_WheelData& _internal_wheel_data(int index) const;
  ::osi3::HostVehicleData_VehicleWheels_WheelData* _internal_add_wheel_data();
  public:
  const ::osi3::HostVehicleData_VehicleWheels_WheelData& wheel_data(int index) const;
  ::osi3::HostVehicleData_VehicleWheels_WheelData* add_wheel_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::HostVehicleData_VehicleWheels_WheelData >&
      wheel_data() const;

  // @@protoc_insertion_point(class_scope:osi3.HostVehicleData.VehicleWheels)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::HostVehicleData_VehicleWheels_WheelData > wheel_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osi_5fhostvehicledata_2eproto;
};
// -------------------------------------------------------------------

class HostVehicleData_VehicleLocalization final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.HostVehicleData.VehicleLocalization) */ {
 public:
  inline HostVehicleData_VehicleLocalization() : HostVehicleData_VehicleLocalization(nullptr) {}
  ~HostVehicleData_VehicleLocalization() override;
  explicit PROTOBUF_CONSTEXPR HostVehicleData_VehicleLocalization(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HostVehicleData_VehicleLocalization(const HostVehicleData_VehicleLocalization& from);
  HostVehicleData_VehicleLocalization(HostVehicleData_VehicleLocalization&& from) noexcept
    : HostVehicleData_VehicleLocalization() {
    *this = ::std::move(from);
  }

  inline HostVehicleData_VehicleLocalization& operator=(const HostVehicleData_VehicleLocalization& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostVehicleData_VehicleLocalization& operator=(HostVehicleData_VehicleLocalization&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HostVehicleData_VehicleLocalization& default_instance() {
    return *internal_default_instance();
  }
  static inline const HostVehicleData_VehicleLocalization* internal_default_instance() {
    return reinterpret_cast<const HostVehicleData_VehicleLocalization*>(
               &_HostVehicleData_VehicleLocalization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(HostVehicleData_VehicleLocalization& a, HostVehicleData_VehicleLocalization& b) {
    a.Swap(&b);
  }
  inline void Swap(HostVehicleData_VehicleLocalization* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostVehicleData_VehicleLocalization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HostVehicleData_VehicleLocalization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HostVehicleData_VehicleLocalization>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HostVehicleData_VehicleLocalization& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HostVehicleData_VehicleLocalization& from) {
    HostVehicleData_VehicleLocalization::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostVehicleData_VehicleLocalization* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.HostVehicleData.VehicleLocalization";
  }
  protected:
  explicit HostVehicleData_VehicleLocalization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kOrientationFieldNumber = 2,
    kGeodeticPositionFieldNumber = 3,
  };
  // optional .osi3.Vector3d position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::osi3::Vector3d& position() const;
  PROTOBUF_NODISCARD ::osi3::Vector3d* release_position();
  ::osi3::Vector3d* mutable_position();
  void set_allocated_position(::osi3::Vector3d* position);
  private:
  const ::osi3::Vector3d& _internal_position() const;
  ::osi3::Vector3d* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::osi3::Vector3d* position);
  ::osi3::Vector3d* unsafe_arena_release_position();

  // optional .osi3.Orientation3d orientation = 2;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::osi3::Orientation3d& orientation() const;
  PROTOBUF_NODISCARD ::osi3::Orientation3d* release_orientation();
  ::osi3::Orientation3d* mutable_orientation();
  void set_allocated_orientation(::osi3::Orientation3d* orientation);
  private:
  const ::osi3::Orientation3d& _internal_orientation() const;
  ::osi3::Orientation3d* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::osi3::Orientation3d* orientation);
  ::osi3::Orientation3d* unsafe_arena_release_orientation();

  // optional .osi3.GeodeticPosition geodetic_position = 3;
  bool has_geodetic_position() const;
  private:
  bool _internal_has_geodetic_position() const;
  public:
  void clear_geodetic_position();
  const ::osi3::GeodeticPosition& geodetic_position() const;
  PROTOBUF_NODISCARD ::osi3::GeodeticPosition* release_geodetic_position();
  ::osi3::GeodeticPosition* mutable_geodetic_position();
  void set_allocated_geodetic_position(::osi3::GeodeticPosition* geodetic_position);
  private:
  const ::osi3::GeodeticPosition& _internal_geodetic_position() const;
  ::osi3::GeodeticPosition* _internal_mutable_geodetic_position();
  public:
  void unsafe_arena_set_allocated_geodetic_position(
      ::osi3::GeodeticPosition* geodetic_position);
  ::osi3::GeodeticPosition* unsafe_arena_release_geodetic_position();

  // @@protoc_insertion_point(class_scope:osi3.HostVehicleData.VehicleLocalization)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::osi3::Vector3d* position_;
    ::osi3::Orientation3d* orientation_;
    ::osi3::GeodeticPosition* geodetic_position_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osi_5fhostvehicledata_2eproto;
};
// -------------------------------------------------------------------

class HostVehicleData_VehicleMotion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.HostVehicleData.VehicleMotion) */ {
 public:
  inline HostVehicleData_VehicleMotion() : HostVehicleData_VehicleMotion(nullptr) {}
  ~HostVehicleData_VehicleMotion() override;
  explicit PROTOBUF_CONSTEXPR HostVehicleData_VehicleMotion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HostVehicleData_VehicleMotion(const HostVehicleData_VehicleMotion& from);
  HostVehicleData_VehicleMotion(HostVehicleData_VehicleMotion&& from) noexcept
    : HostVehicleData_VehicleMotion() {
    *this = ::std::move(from);
  }

  inline HostVehicleData_VehicleMotion& operator=(const HostVehicleData_VehicleMotion& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostVehicleData_VehicleMotion& operator=(HostVehicleData_VehicleMotion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HostVehicleData_VehicleMotion& default_instance() {
    return *internal_default_instance();
  }
  static inline const HostVehicleData_VehicleMotion* internal_default_instance() {
    return reinterpret_cast<const HostVehicleData_VehicleMotion*>(
               &_HostVehicleData_VehicleMotion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(HostVehicleData_VehicleMotion& a, HostVehicleData_VehicleMotion& b) {
    a.Swap(&b);
  }
  inline void Swap(HostVehicleData_VehicleMotion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostVehicleData_VehicleMotion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HostVehicleData_VehicleMotion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HostVehicleData_VehicleMotion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HostVehicleData_VehicleMotion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HostVehicleData_VehicleMotion& from) {
    HostVehicleData_VehicleMotion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostVehicleData_VehicleMotion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.HostVehicleData.VehicleMotion";
  }
  protected:
  explicit HostVehicleData_VehicleMotion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kOrientationFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kOrientationRateFieldNumber = 4,
    kAccelerationFieldNumber = 5,
    kCurrentCurvatureFieldNumber = 6,
  };
  // optional .osi3.Vector3d position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::osi3::Vector3d& position() const;
  PROTOBUF_NODISCARD ::osi3::Vector3d* release_position();
  ::osi3::Vector3d* mutable_position();
  void set_allocated_position(::osi3::Vector3d* position);
  private:
  const ::osi3::Vector3d& _internal_position() const;
  ::osi3::Vector3d* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::osi3::Vector3d* position);
  ::osi3::Vector3d* unsafe_arena_release_position();

  // optional .osi3.Orientation3d orientation = 2;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::osi3::Orientation3d& orientation() const;
  PROTOBUF_NODISCARD ::osi3::Orientation3d* release_orientation();
  ::osi3::Orientation3d* mutable_orientation();
  void set_allocated_orientation(::osi3::Orientation3d* orientation);
  private:
  const ::osi3::Orientation3d& _internal_orientation() const;
  ::osi3::Orientation3d* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::osi3::Orientation3d* orientation);
  ::osi3::Orientation3d* unsafe_arena_release_orientation();

  // optional .osi3.Vector3d velocity = 3;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::osi3::Vector3d& velocity() const;
  PROTOBUF_NODISCARD ::osi3::Vector3d* release_velocity();
  ::osi3::Vector3d* mutable_velocity();
  void set_allocated_velocity(::osi3::Vector3d* velocity);
  private:
  const ::osi3::Vector3d& _internal_velocity() const;
  ::osi3::Vector3d* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::osi3::Vector3d* velocity);
  ::osi3::Vector3d* unsafe_arena_release_velocity();

  // optional .osi3.Orientation3d orientation_rate = 4;
  bool has_orientation_rate() const;
  private:
  bool _internal_has_orientation_rate() const;
  public:
  void clear_orientation_rate();
  const ::osi3::Orientation3d& orientation_rate() const;
  PROTOBUF_NODISCARD ::osi3::Orientation3d* release_orientation_rate();
  ::osi3::Orientation3d* mutable_orientation_rate();
  void set_allocated_orientation_rate(::osi3::Orientation3d* orientation_rate);
  private:
  const ::osi3::Orientation3d& _internal_orientation_rate() const;
  ::osi3::Orientation3d* _internal_mutable_orientation_rate();
  public:
  void unsafe_arena_set_allocated_orientation_rate(
      ::osi3::Orientation3d* orientation_rate);
  ::osi3::Orientation3d* unsafe_arena_release_orientation_rate();

  // optional .osi3.Vector3d acceleration = 5;
  bool has_acceleration() const;
  private:
  bool _internal_has_acceleration() const;
  public:
  void clear_acceleration();
  const ::osi3::Vector3d& acceleration() const;
  PROTOBUF_NODISCARD ::osi3::Vector3d* release_acceleration();
  ::osi3::Vector3d* mutable_acceleration();
  void set_allocated_acceleration(::osi3::Vector3d* acceleration);
  private:
  const ::osi3::Vector3d& _internal_acceleration() const;
  ::osi3::Vector3d* _internal_mutable_acceleration();
  public:
  void unsafe_arena_set_allocated_acceleration(
      ::osi3::Vector3d* acceleration);
  ::osi3::Vector3d* unsafe_arena_release_acceleration();

  // optional double current_curvature = 6;
  bool has_current_curvature() const;
  private:
  bool _internal_has_current_curvature() const;
  public:
  void clear_current_curvature();
  double current_curvature() const;
  void set_current_curvature(double value);
  private:
  double _internal_current_curvature() const;
  void _internal_set_current_curvature(double value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.HostVehicleData.VehicleMotion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::osi3::Vector3d* position_;
    ::osi3::Orientation3d* orientation_;
    ::osi3::Vector3d* velocity_;
    ::osi3::Orientation3d* orientation_rate_;
    ::osi3::Vector3d* acceleration_;
    double current_curvature_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osi_5fhostvehicledata_2eproto;
};
// -------------------------------------------------------------------

class HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride) */ {
 public:
  inline HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride() : HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride(nullptr) {}
  ~HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride() override;
  explicit PROTOBUF_CONSTEXPR HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride(const HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride& from);
  HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride(HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride&& from) noexcept
    : HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride() {
    *this = ::std::move(from);
  }

  inline HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride& operator=(const HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride& operator=(HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride& default_instance() {
    return *internal_default_instance();
  }
  static inline const HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride* internal_default_instance() {
    return reinterpret_cast<const HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride*>(
               &_HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride& a, HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride& b) {
    a.Swap(&b);
  }
  inline void Swap(HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride& from) {
    HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride";
  }
  protected:
  explicit HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason Reason;
  static constexpr Reason REASON_BRAKE_PEDAL =
    HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_REASON_BRAKE_PEDAL;
  static constexpr Reason REASON_STEERING_INPUT =
    HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_REASON_STEERING_INPUT;
  static inline bool Reason_IsValid(int value) {
    return HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_IsValid(value);
  }
  static constexpr Reason Reason_MIN =
    HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_Reason_MIN;
  static constexpr Reason Reason_MAX =
    HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_Reason_MAX;
  static constexpr int Reason_ARRAYSIZE =
    HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_Reason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Reason_descriptor() {
    return HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_descriptor();
  }
  template<typename T>
  static inline const std::string& Reason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Reason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Reason_Name.");
    return HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_Name(enum_t_value);
  }
  static inline bool Reason_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Reason* value) {
    return HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOverrideReasonFieldNumber = 2,
    kActiveFieldNumber = 1,
  };
  // repeated .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride.Reason override_reason = 2;
  int override_reason_size() const;
  private:
  int _internal_override_reason_size() const;
  public:
  void clear_override_reason();
  private:
  ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason _internal_override_reason(int index) const;
  void _internal_add_override_reason(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_override_reason();
  public:
  ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason override_reason(int index) const;
  void set_override_reason(int index, ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason value);
  void add_override_reason(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& override_reason() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_override_reason();

  // optional bool active = 1;
  bool has_active() const;
  private:
  bool _internal_has_active() const;
  public:
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> override_reason_;
    bool active_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osi_5fhostvehicledata_2eproto;
};
// -------------------------------------------------------------------

class HostVehicleData_VehicleAutomatedDrivingFunction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.HostVehicleData.VehicleAutomatedDrivingFunction) */ {
 public:
  inline HostVehicleData_VehicleAutomatedDrivingFunction() : HostVehicleData_VehicleAutomatedDrivingFunction(nullptr) {}
  ~HostVehicleData_VehicleAutomatedDrivingFunction() override;
  explicit PROTOBUF_CONSTEXPR HostVehicleData_VehicleAutomatedDrivingFunction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HostVehicleData_VehicleAutomatedDrivingFunction(const HostVehicleData_VehicleAutomatedDrivingFunction& from);
  HostVehicleData_VehicleAutomatedDrivingFunction(HostVehicleData_VehicleAutomatedDrivingFunction&& from) noexcept
    : HostVehicleData_VehicleAutomatedDrivingFunction() {
    *this = ::std::move(from);
  }

  inline HostVehicleData_VehicleAutomatedDrivingFunction& operator=(const HostVehicleData_VehicleAutomatedDrivingFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostVehicleData_VehicleAutomatedDrivingFunction& operator=(HostVehicleData_VehicleAutomatedDrivingFunction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HostVehicleData_VehicleAutomatedDrivingFunction& default_instance() {
    return *internal_default_instance();
  }
  static inline const HostVehicleData_VehicleAutomatedDrivingFunction* internal_default_instance() {
    return reinterpret_cast<const HostVehicleData_VehicleAutomatedDrivingFunction*>(
               &_HostVehicleData_VehicleAutomatedDrivingFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(HostVehicleData_VehicleAutomatedDrivingFunction& a, HostVehicleData_VehicleAutomatedDrivingFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(HostVehicleData_VehicleAutomatedDrivingFunction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostVehicleData_VehicleAutomatedDrivingFunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HostVehicleData_VehicleAutomatedDrivingFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HostVehicleData_VehicleAutomatedDrivingFunction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HostVehicleData_VehicleAutomatedDrivingFunction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HostVehicleData_VehicleAutomatedDrivingFunction& from) {
    HostVehicleData_VehicleAutomatedDrivingFunction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostVehicleData_VehicleAutomatedDrivingFunction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.HostVehicleData.VehicleAutomatedDrivingFunction";
  }
  protected:
  explicit HostVehicleData_VehicleAutomatedDrivingFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride DriverOverride;

  typedef HostVehicleData_VehicleAutomatedDrivingFunction_Name Name;
  static constexpr Name NAME_UNKNOWN =
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_UNKNOWN;
  static constexpr Name NAME_OTHER =
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_OTHER;
  static constexpr Name NAME_BLIND_SPOT_WARNING =
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_BLIND_SPOT_WARNING;
  static constexpr Name NAME_FORWARD_COLLISION_WARNING =
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_FORWARD_COLLISION_WARNING;
  static constexpr Name NAME_LANE_DEPARTURE_WARNING =
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_LANE_DEPARTURE_WARNING;
  static constexpr Name NAME_PARKING_COLLISION_WARNING =
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_PARKING_COLLISION_WARNING;
  static constexpr Name NAME_REAR_CROSS_TRAFFIC_WARNING =
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_REAR_CROSS_TRAFFIC_WARNING;
  static constexpr Name NAME_AUTOMATIC_EMERGENCY_BRAKING =
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_AUTOMATIC_EMERGENCY_BRAKING;
  static constexpr Name NAME_AUTOMATIC_EMERGENCY_STEERING =
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_AUTOMATIC_EMERGENCY_STEERING;
  static constexpr Name NAME_REVERSE_AUTOMATIC_EMERGENCY_BRAKING =
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_REVERSE_AUTOMATIC_EMERGENCY_BRAKING;
  static constexpr Name NAME_ADAPTIVE_CRUISE_CONTROL =
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_ADAPTIVE_CRUISE_CONTROL;
  static constexpr Name NAME_LANE_KEEPING_ASSIST =
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_LANE_KEEPING_ASSIST;
  static constexpr Name NAME_ACTIVE_DRIVING_ASSISTANCE =
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_ACTIVE_DRIVING_ASSISTANCE;
  static constexpr Name NAME_BACKUP_CAMERA =
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_BACKUP_CAMERA;
  static constexpr Name NAME_SURROUND_VIEW_CAMERA =
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_SURROUND_VIEW_CAMERA;
  static constexpr Name NAME_ACTIVE_PARKING_ASSISTANCE =
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_ACTIVE_PARKING_ASSISTANCE;
  static constexpr Name NAME_REMOTE_PARKING_ASSISTANCE =
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_REMOTE_PARKING_ASSISTANCE;
  static constexpr Name NAME_TRAILER_ASSISTANCE =
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_TRAILER_ASSISTANCE;
  static constexpr Name NAME_AUTOMATIC_HIGH_BEAMS =
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_AUTOMATIC_HIGH_BEAMS;
  static constexpr Name NAME_DRIVER_MONITORING =
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_DRIVER_MONITORING;
  static constexpr Name NAME_HEAD_UP_DISPLAY =
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_HEAD_UP_DISPLAY;
  static constexpr Name NAME_NIGHT_VISION =
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_NIGHT_VISION;
  static constexpr Name NAME_URBAN_DRIVING =
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_URBAN_DRIVING;
  static constexpr Name NAME_HIGHWAY_AUTOPILOT =
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_HIGHWAY_AUTOPILOT;
  static constexpr Name NAME_CRUISE_CONTROL =
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_CRUISE_CONTROL;
  static constexpr Name NAME_SPEED_LIMIT_CONTROL =
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_NAME_SPEED_LIMIT_CONTROL;
  static inline bool Name_IsValid(int value) {
    return HostVehicleData_VehicleAutomatedDrivingFunction_Name_IsValid(value);
  }
  static constexpr Name Name_MIN =
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_Name_MIN;
  static constexpr Name Name_MAX =
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_Name_MAX;
  static constexpr int Name_ARRAYSIZE =
    HostVehicleData_VehicleAutomatedDrivingFunction_Name_Name_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Name_descriptor() {
    return HostVehicleData_VehicleAutomatedDrivingFunction_Name_descriptor();
  }
  template<typename T>
  static inline const std::string& Name_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Name>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Name_Name.");
    return HostVehicleData_VehicleAutomatedDrivingFunction_Name_Name(enum_t_value);
  }
  static inline bool Name_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Name* value) {
    return HostVehicleData_VehicleAutomatedDrivingFunction_Name_Parse(name, value);
  }

  typedef HostVehicleData_VehicleAutomatedDrivingFunction_State State;
  static constexpr State STATE_UNKNOWN =
    HostVehicleData_VehicleAutomatedDrivingFunction_State_STATE_UNKNOWN;
  static constexpr State STATE_OTHER =
    HostVehicleData_VehicleAutomatedDrivingFunction_State_STATE_OTHER;
  static constexpr State STATE_ERRORED =
    HostVehicleData_VehicleAutomatedDrivingFunction_State_STATE_ERRORED;
  static constexpr State STATE_UNAVAILABLE =
    HostVehicleData_VehicleAutomatedDrivingFunction_State_STATE_UNAVAILABLE;
  static constexpr State STATE_AVAILABLE =
    HostVehicleData_VehicleAutomatedDrivingFunction_State_STATE_AVAILABLE;
  static constexpr State STATE_STANDBY =
    HostVehicleData_VehicleAutomatedDrivingFunction_State_STATE_STANDBY;
  static constexpr State STATE_ACTIVE =
    HostVehicleData_VehicleAutomatedDrivingFunction_State_STATE_ACTIVE;
  static inline bool State_IsValid(int value) {
    return HostVehicleData_VehicleAutomatedDrivingFunction_State_IsValid(value);
  }
  static constexpr State State_MIN =
    HostVehicleData_VehicleAutomatedDrivingFunction_State_State_MIN;
  static constexpr State State_MAX =
    HostVehicleData_VehicleAutomatedDrivingFunction_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    HostVehicleData_VehicleAutomatedDrivingFunction_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return HostVehicleData_VehicleAutomatedDrivingFunction_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return HostVehicleData_VehicleAutomatedDrivingFunction_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return HostVehicleData_VehicleAutomatedDrivingFunction_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCustomDetailFieldNumber = 6,
    kCustomNameFieldNumber = 2,
    kCustomStateFieldNumber = 4,
    kDriverOverrideFieldNumber = 5,
    kNameFieldNumber = 1,
    kStateFieldNumber = 3,
  };
  // repeated .osi3.KeyValuePair custom_detail = 6;
  int custom_detail_size() const;
  private:
  int _internal_custom_detail_size() const;
  public:
  void clear_custom_detail();
  ::osi3::KeyValuePair* mutable_custom_detail(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::KeyValuePair >*
      mutable_custom_detail();
  private:
  const ::osi3::KeyValuePair& _internal_custom_detail(int index) const;
  ::osi3::KeyValuePair* _internal_add_custom_detail();
  public:
  const ::osi3::KeyValuePair& custom_detail(int index) const;
  ::osi3::KeyValuePair* add_custom_detail();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::KeyValuePair >&
      custom_detail() const;

  // optional string custom_name = 2;
  bool has_custom_name() const;
  private:
  bool _internal_has_custom_name() const;
  public:
  void clear_custom_name();
  const std::string& custom_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_custom_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_custom_name();
  PROTOBUF_NODISCARD std::string* release_custom_name();
  void set_allocated_custom_name(std::string* custom_name);
  private:
  const std::string& _internal_custom_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom_name(const std::string& value);
  std::string* _internal_mutable_custom_name();
  public:

  // optional string custom_state = 4;
  bool has_custom_state() const;
  private:
  bool _internal_has_custom_state() const;
  public:
  void clear_custom_state();
  const std::string& custom_state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_custom_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_custom_state();
  PROTOBUF_NODISCARD std::string* release_custom_state();
  void set_allocated_custom_state(std::string* custom_state);
  private:
  const std::string& _internal_custom_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom_state(const std::string& value);
  std::string* _internal_mutable_custom_state();
  public:

  // optional .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride driver_override = 5;
  bool has_driver_override() const;
  private:
  bool _internal_has_driver_override() const;
  public:
  void clear_driver_override();
  const ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride& driver_override() const;
  PROTOBUF_NODISCARD ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride* release_driver_override();
  ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride* mutable_driver_override();
  void set_allocated_driver_override(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride* driver_override);
  private:
  const ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride& _internal_driver_override() const;
  ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride* _internal_mutable_driver_override();
  public:
  void unsafe_arena_set_allocated_driver_override(
      ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride* driver_override);
  ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride* unsafe_arena_release_driver_override();

  // optional .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.Name name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_Name name() const;
  void set_name(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_Name value);
  private:
  ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_Name _internal_name() const;
  void _internal_set_name(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_Name value);
  public:

  // optional .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.State state = 3;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_State state() const;
  void set_state(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_State value);
  private:
  ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_State _internal_state() const;
  void _internal_set_state(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_State value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.HostVehicleData.VehicleAutomatedDrivingFunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::KeyValuePair > custom_detail_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_state_;
    ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride* driver_override_;
    int name_;
    int state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osi_5fhostvehicledata_2eproto;
};
// -------------------------------------------------------------------

class HostVehicleData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.HostVehicleData) */ {
 public:
  inline HostVehicleData() : HostVehicleData(nullptr) {}
  ~HostVehicleData() override;
  explicit PROTOBUF_CONSTEXPR HostVehicleData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HostVehicleData(const HostVehicleData& from);
  HostVehicleData(HostVehicleData&& from) noexcept
    : HostVehicleData() {
    *this = ::std::move(from);
  }

  inline HostVehicleData& operator=(const HostVehicleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostVehicleData& operator=(HostVehicleData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HostVehicleData& default_instance() {
    return *internal_default_instance();
  }
  static inline const HostVehicleData* internal_default_instance() {
    return reinterpret_cast<const HostVehicleData*>(
               &_HostVehicleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(HostVehicleData& a, HostVehicleData& b) {
    a.Swap(&b);
  }
  inline void Swap(HostVehicleData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostVehicleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HostVehicleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HostVehicleData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HostVehicleData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HostVehicleData& from) {
    HostVehicleData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostVehicleData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.HostVehicleData";
  }
  protected:
  explicit HostVehicleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HostVehicleData_VehicleBasics VehicleBasics;
  typedef HostVehicleData_VehiclePowertrain VehiclePowertrain;
  typedef HostVehicleData_VehicleBrakeSystem VehicleBrakeSystem;
  typedef HostVehicleData_VehicleSteering VehicleSteering;
  typedef HostVehicleData_VehicleWheels VehicleWheels;
  typedef HostVehicleData_VehicleLocalization VehicleLocalization;
  typedef HostVehicleData_VehicleMotion VehicleMotion;
  typedef HostVehicleData_VehicleAutomatedDrivingFunction VehicleAutomatedDrivingFunction;

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleAutomatedDrivingFunctionFieldNumber = 12,
    kLocationFieldNumber = 1,
    kLocationRmseFieldNumber = 2,
    kVehicleBasicsFieldNumber = 3,
    kVehiclePowertrainFieldNumber = 4,
    kVehicleBrakeSystemFieldNumber = 5,
    kVehicleSteeringFieldNumber = 6,
    kVehicleWheelsFieldNumber = 7,
    kVehicleLocalizationFieldNumber = 8,
    kVersionFieldNumber = 9,
    kTimestampFieldNumber = 10,
    kHostVehicleIdFieldNumber = 11,
    kVehicleMotionFieldNumber = 13,
  };
  // repeated .osi3.HostVehicleData.VehicleAutomatedDrivingFunction vehicle_automated_driving_function = 12;
  int vehicle_automated_driving_function_size() const;
  private:
  int _internal_vehicle_automated_driving_function_size() const;
  public:
  void clear_vehicle_automated_driving_function();
  ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction* mutable_vehicle_automated_driving_function(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction >*
      mutable_vehicle_automated_driving_function();
  private:
  const ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction& _internal_vehicle_automated_driving_function(int index) const;
  ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction* _internal_add_vehicle_automated_driving_function();
  public:
  const ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction& vehicle_automated_driving_function(int index) const;
  ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction* add_vehicle_automated_driving_function();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction >&
      vehicle_automated_driving_function() const;

  // optional .osi3.BaseMoving location = 1;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::osi3::BaseMoving& location() const;
  PROTOBUF_NODISCARD ::osi3::BaseMoving* release_location();
  ::osi3::BaseMoving* mutable_location();
  void set_allocated_location(::osi3::BaseMoving* location);
  private:
  const ::osi3::BaseMoving& _internal_location() const;
  ::osi3::BaseMoving* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::osi3::BaseMoving* location);
  ::osi3::BaseMoving* unsafe_arena_release_location();

  // optional .osi3.BaseMoving location_rmse = 2;
  bool has_location_rmse() const;
  private:
  bool _internal_has_location_rmse() const;
  public:
  void clear_location_rmse();
  const ::osi3::BaseMoving& location_rmse() const;
  PROTOBUF_NODISCARD ::osi3::BaseMoving* release_location_rmse();
  ::osi3::BaseMoving* mutable_location_rmse();
  void set_allocated_location_rmse(::osi3::BaseMoving* location_rmse);
  private:
  const ::osi3::BaseMoving& _internal_location_rmse() const;
  ::osi3::BaseMoving* _internal_mutable_location_rmse();
  public:
  void unsafe_arena_set_allocated_location_rmse(
      ::osi3::BaseMoving* location_rmse);
  ::osi3::BaseMoving* unsafe_arena_release_location_rmse();

  // optional .osi3.HostVehicleData.VehicleBasics vehicle_basics = 3;
  bool has_vehicle_basics() const;
  private:
  bool _internal_has_vehicle_basics() const;
  public:
  void clear_vehicle_basics();
  const ::osi3::HostVehicleData_VehicleBasics& vehicle_basics() const;
  PROTOBUF_NODISCARD ::osi3::HostVehicleData_VehicleBasics* release_vehicle_basics();
  ::osi3::HostVehicleData_VehicleBasics* mutable_vehicle_basics();
  void set_allocated_vehicle_basics(::osi3::HostVehicleData_VehicleBasics* vehicle_basics);
  private:
  const ::osi3::HostVehicleData_VehicleBasics& _internal_vehicle_basics() const;
  ::osi3::HostVehicleData_VehicleBasics* _internal_mutable_vehicle_basics();
  public:
  void unsafe_arena_set_allocated_vehicle_basics(
      ::osi3::HostVehicleData_VehicleBasics* vehicle_basics);
  ::osi3::HostVehicleData_VehicleBasics* unsafe_arena_release_vehicle_basics();

  // optional .osi3.HostVehicleData.VehiclePowertrain vehicle_powertrain = 4;
  bool has_vehicle_powertrain() const;
  private:
  bool _internal_has_vehicle_powertrain() const;
  public:
  void clear_vehicle_powertrain();
  const ::osi3::HostVehicleData_VehiclePowertrain& vehicle_powertrain() const;
  PROTOBUF_NODISCARD ::osi3::HostVehicleData_VehiclePowertrain* release_vehicle_powertrain();
  ::osi3::HostVehicleData_VehiclePowertrain* mutable_vehicle_powertrain();
  void set_allocated_vehicle_powertrain(::osi3::HostVehicleData_VehiclePowertrain* vehicle_powertrain);
  private:
  const ::osi3::HostVehicleData_VehiclePowertrain& _internal_vehicle_powertrain() const;
  ::osi3::HostVehicleData_VehiclePowertrain* _internal_mutable_vehicle_powertrain();
  public:
  void unsafe_arena_set_allocated_vehicle_powertrain(
      ::osi3::HostVehicleData_VehiclePowertrain* vehicle_powertrain);
  ::osi3::HostVehicleData_VehiclePowertrain* unsafe_arena_release_vehicle_powertrain();

  // optional .osi3.HostVehicleData.VehicleBrakeSystem vehicle_brake_system = 5;
  bool has_vehicle_brake_system() const;
  private:
  bool _internal_has_vehicle_brake_system() const;
  public:
  void clear_vehicle_brake_system();
  const ::osi3::HostVehicleData_VehicleBrakeSystem& vehicle_brake_system() const;
  PROTOBUF_NODISCARD ::osi3::HostVehicleData_VehicleBrakeSystem* release_vehicle_brake_system();
  ::osi3::HostVehicleData_VehicleBrakeSystem* mutable_vehicle_brake_system();
  void set_allocated_vehicle_brake_system(::osi3::HostVehicleData_VehicleBrakeSystem* vehicle_brake_system);
  private:
  const ::osi3::HostVehicleData_VehicleBrakeSystem& _internal_vehicle_brake_system() const;
  ::osi3::HostVehicleData_VehicleBrakeSystem* _internal_mutable_vehicle_brake_system();
  public:
  void unsafe_arena_set_allocated_vehicle_brake_system(
      ::osi3::HostVehicleData_VehicleBrakeSystem* vehicle_brake_system);
  ::osi3::HostVehicleData_VehicleBrakeSystem* unsafe_arena_release_vehicle_brake_system();

  // optional .osi3.HostVehicleData.VehicleSteering vehicle_steering = 6;
  bool has_vehicle_steering() const;
  private:
  bool _internal_has_vehicle_steering() const;
  public:
  void clear_vehicle_steering();
  const ::osi3::HostVehicleData_VehicleSteering& vehicle_steering() const;
  PROTOBUF_NODISCARD ::osi3::HostVehicleData_VehicleSteering* release_vehicle_steering();
  ::osi3::HostVehicleData_VehicleSteering* mutable_vehicle_steering();
  void set_allocated_vehicle_steering(::osi3::HostVehicleData_VehicleSteering* vehicle_steering);
  private:
  const ::osi3::HostVehicleData_VehicleSteering& _internal_vehicle_steering() const;
  ::osi3::HostVehicleData_VehicleSteering* _internal_mutable_vehicle_steering();
  public:
  void unsafe_arena_set_allocated_vehicle_steering(
      ::osi3::HostVehicleData_VehicleSteering* vehicle_steering);
  ::osi3::HostVehicleData_VehicleSteering* unsafe_arena_release_vehicle_steering();

  // optional .osi3.HostVehicleData.VehicleWheels vehicle_wheels = 7;
  bool has_vehicle_wheels() const;
  private:
  bool _internal_has_vehicle_wheels() const;
  public:
  void clear_vehicle_wheels();
  const ::osi3::HostVehicleData_VehicleWheels& vehicle_wheels() const;
  PROTOBUF_NODISCARD ::osi3::HostVehicleData_VehicleWheels* release_vehicle_wheels();
  ::osi3::HostVehicleData_VehicleWheels* mutable_vehicle_wheels();
  void set_allocated_vehicle_wheels(::osi3::HostVehicleData_VehicleWheels* vehicle_wheels);
  private:
  const ::osi3::HostVehicleData_VehicleWheels& _internal_vehicle_wheels() const;
  ::osi3::HostVehicleData_VehicleWheels* _internal_mutable_vehicle_wheels();
  public:
  void unsafe_arena_set_allocated_vehicle_wheels(
      ::osi3::HostVehicleData_VehicleWheels* vehicle_wheels);
  ::osi3::HostVehicleData_VehicleWheels* unsafe_arena_release_vehicle_wheels();

  // optional .osi3.HostVehicleData.VehicleLocalization vehicle_localization = 8;
  bool has_vehicle_localization() const;
  private:
  bool _internal_has_vehicle_localization() const;
  public:
  void clear_vehicle_localization();
  const ::osi3::HostVehicleData_VehicleLocalization& vehicle_localization() const;
  PROTOBUF_NODISCARD ::osi3::HostVehicleData_VehicleLocalization* release_vehicle_localization();
  ::osi3::HostVehicleData_VehicleLocalization* mutable_vehicle_localization();
  void set_allocated_vehicle_localization(::osi3::HostVehicleData_VehicleLocalization* vehicle_localization);
  private:
  const ::osi3::HostVehicleData_VehicleLocalization& _internal_vehicle_localization() const;
  ::osi3::HostVehicleData_VehicleLocalization* _internal_mutable_vehicle_localization();
  public:
  void unsafe_arena_set_allocated_vehicle_localization(
      ::osi3::HostVehicleData_VehicleLocalization* vehicle_localization);
  ::osi3::HostVehicleData_VehicleLocalization* unsafe_arena_release_vehicle_localization();

  // optional .osi3.InterfaceVersion version = 9;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const ::osi3::InterfaceVersion& version() const;
  PROTOBUF_NODISCARD ::osi3::InterfaceVersion* release_version();
  ::osi3::InterfaceVersion* mutable_version();
  void set_allocated_version(::osi3::InterfaceVersion* version);
  private:
  const ::osi3::InterfaceVersion& _internal_version() const;
  ::osi3::InterfaceVersion* _internal_mutable_version();
  public:
  void unsafe_arena_set_allocated_version(
      ::osi3::InterfaceVersion* version);
  ::osi3::InterfaceVersion* unsafe_arena_release_version();

  // optional .osi3.Timestamp timestamp = 10;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::osi3::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::osi3::Timestamp* release_timestamp();
  ::osi3::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::osi3::Timestamp* timestamp);
  private:
  const ::osi3::Timestamp& _internal_timestamp() const;
  ::osi3::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::osi3::Timestamp* timestamp);
  ::osi3::Timestamp* unsafe_arena_release_timestamp();

  // optional .osi3.Identifier host_vehicle_id = 11;
  bool has_host_vehicle_id() const;
  private:
  bool _internal_has_host_vehicle_id() const;
  public:
  void clear_host_vehicle_id();
  const ::osi3::Identifier& host_vehicle_id() const;
  PROTOBUF_NODISCARD ::osi3::Identifier* release_host_vehicle_id();
  ::osi3::Identifier* mutable_host_vehicle_id();
  void set_allocated_host_vehicle_id(::osi3::Identifier* host_vehicle_id);
  private:
  const ::osi3::Identifier& _internal_host_vehicle_id() const;
  ::osi3::Identifier* _internal_mutable_host_vehicle_id();
  public:
  void unsafe_arena_set_allocated_host_vehicle_id(
      ::osi3::Identifier* host_vehicle_id);
  ::osi3::Identifier* unsafe_arena_release_host_vehicle_id();

  // optional .osi3.HostVehicleData.VehicleMotion vehicle_motion = 13;
  bool has_vehicle_motion() const;
  private:
  bool _internal_has_vehicle_motion() const;
  public:
  void clear_vehicle_motion();
  const ::osi3::HostVehicleData_VehicleMotion& vehicle_motion() const;
  PROTOBUF_NODISCARD ::osi3::HostVehicleData_VehicleMotion* release_vehicle_motion();
  ::osi3::HostVehicleData_VehicleMotion* mutable_vehicle_motion();
  void set_allocated_vehicle_motion(::osi3::HostVehicleData_VehicleMotion* vehicle_motion);
  private:
  const ::osi3::HostVehicleData_VehicleMotion& _internal_vehicle_motion() const;
  ::osi3::HostVehicleData_VehicleMotion* _internal_mutable_vehicle_motion();
  public:
  void unsafe_arena_set_allocated_vehicle_motion(
      ::osi3::HostVehicleData_VehicleMotion* vehicle_motion);
  ::osi3::HostVehicleData_VehicleMotion* unsafe_arena_release_vehicle_motion();

  // @@protoc_insertion_point(class_scope:osi3.HostVehicleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction > vehicle_automated_driving_function_;
    ::osi3::BaseMoving* location_;
    ::osi3::BaseMoving* location_rmse_;
    ::osi3::HostVehicleData_VehicleBasics* vehicle_basics_;
    ::osi3::HostVehicleData_VehiclePowertrain* vehicle_powertrain_;
    ::osi3::HostVehicleData_VehicleBrakeSystem* vehicle_brake_system_;
    ::osi3::HostVehicleData_VehicleSteering* vehicle_steering_;
    ::osi3::HostVehicleData_VehicleWheels* vehicle_wheels_;
    ::osi3::HostVehicleData_VehicleLocalization* vehicle_localization_;
    ::osi3::InterfaceVersion* version_;
    ::osi3::Timestamp* timestamp_;
    ::osi3::Identifier* host_vehicle_id_;
    ::osi3::HostVehicleData_VehicleMotion* vehicle_motion_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osi_5fhostvehicledata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HostVehicleData_VehicleBasics

// optional double curb_weight = 1;
inline bool HostVehicleData_VehicleBasics::_internal_has_curb_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HostVehicleData_VehicleBasics::has_curb_weight() const {
  return _internal_has_curb_weight();
}
inline void HostVehicleData_VehicleBasics::clear_curb_weight() {
  _impl_.curb_weight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double HostVehicleData_VehicleBasics::_internal_curb_weight() const {
  return _impl_.curb_weight_;
}
inline double HostVehicleData_VehicleBasics::curb_weight() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleBasics.curb_weight)
  return _internal_curb_weight();
}
inline void HostVehicleData_VehicleBasics::_internal_set_curb_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.curb_weight_ = value;
}
inline void HostVehicleData_VehicleBasics::set_curb_weight(double value) {
  _internal_set_curb_weight(value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehicleBasics.curb_weight)
}

// optional .osi3.HostVehicleData.VehicleBasics.OperatingState operating_state = 2;
inline bool HostVehicleData_VehicleBasics::_internal_has_operating_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HostVehicleData_VehicleBasics::has_operating_state() const {
  return _internal_has_operating_state();
}
inline void HostVehicleData_VehicleBasics::clear_operating_state() {
  _impl_.operating_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::osi3::HostVehicleData_VehicleBasics_OperatingState HostVehicleData_VehicleBasics::_internal_operating_state() const {
  return static_cast< ::osi3::HostVehicleData_VehicleBasics_OperatingState >(_impl_.operating_state_);
}
inline ::osi3::HostVehicleData_VehicleBasics_OperatingState HostVehicleData_VehicleBasics::operating_state() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleBasics.operating_state)
  return _internal_operating_state();
}
inline void HostVehicleData_VehicleBasics::_internal_set_operating_state(::osi3::HostVehicleData_VehicleBasics_OperatingState value) {
  assert(::osi3::HostVehicleData_VehicleBasics_OperatingState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.operating_state_ = value;
}
inline void HostVehicleData_VehicleBasics::set_operating_state(::osi3::HostVehicleData_VehicleBasics_OperatingState value) {
  _internal_set_operating_state(value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehicleBasics.operating_state)
}

// -------------------------------------------------------------------

// HostVehicleData_VehiclePowertrain_Motor

// optional .osi3.HostVehicleData.VehiclePowertrain.Motor.Type type = 1;
inline bool HostVehicleData_VehiclePowertrain_Motor::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HostVehicleData_VehiclePowertrain_Motor::has_type() const {
  return _internal_has_type();
}
inline void HostVehicleData_VehiclePowertrain_Motor::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::osi3::HostVehicleData_VehiclePowertrain_Motor_Type HostVehicleData_VehiclePowertrain_Motor::_internal_type() const {
  return static_cast< ::osi3::HostVehicleData_VehiclePowertrain_Motor_Type >(_impl_.type_);
}
inline ::osi3::HostVehicleData_VehiclePowertrain_Motor_Type HostVehicleData_VehiclePowertrain_Motor::type() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehiclePowertrain.Motor.type)
  return _internal_type();
}
inline void HostVehicleData_VehiclePowertrain_Motor::_internal_set_type(::osi3::HostVehicleData_VehiclePowertrain_Motor_Type value) {
  assert(::osi3::HostVehicleData_VehiclePowertrain_Motor_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.type_ = value;
}
inline void HostVehicleData_VehiclePowertrain_Motor::set_type(::osi3::HostVehicleData_VehiclePowertrain_Motor_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehiclePowertrain.Motor.type)
}

// optional double rpm = 2;
inline bool HostVehicleData_VehiclePowertrain_Motor::_internal_has_rpm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HostVehicleData_VehiclePowertrain_Motor::has_rpm() const {
  return _internal_has_rpm();
}
inline void HostVehicleData_VehiclePowertrain_Motor::clear_rpm() {
  _impl_.rpm_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double HostVehicleData_VehiclePowertrain_Motor::_internal_rpm() const {
  return _impl_.rpm_;
}
inline double HostVehicleData_VehiclePowertrain_Motor::rpm() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehiclePowertrain.Motor.rpm)
  return _internal_rpm();
}
inline void HostVehicleData_VehiclePowertrain_Motor::_internal_set_rpm(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.rpm_ = value;
}
inline void HostVehicleData_VehiclePowertrain_Motor::set_rpm(double value) {
  _internal_set_rpm(value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehiclePowertrain.Motor.rpm)
}

// optional double torque = 3;
inline bool HostVehicleData_VehiclePowertrain_Motor::_internal_has_torque() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HostVehicleData_VehiclePowertrain_Motor::has_torque() const {
  return _internal_has_torque();
}
inline void HostVehicleData_VehiclePowertrain_Motor::clear_torque() {
  _impl_.torque_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double HostVehicleData_VehiclePowertrain_Motor::_internal_torque() const {
  return _impl_.torque_;
}
inline double HostVehicleData_VehiclePowertrain_Motor::torque() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehiclePowertrain.Motor.torque)
  return _internal_torque();
}
inline void HostVehicleData_VehiclePowertrain_Motor::_internal_set_torque(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.torque_ = value;
}
inline void HostVehicleData_VehiclePowertrain_Motor::set_torque(double value) {
  _internal_set_torque(value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehiclePowertrain.Motor.torque)
}

// -------------------------------------------------------------------

// HostVehicleData_VehiclePowertrain

// optional double pedal_position_acceleration = 1;
inline bool HostVehicleData_VehiclePowertrain::_internal_has_pedal_position_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HostVehicleData_VehiclePowertrain::has_pedal_position_acceleration() const {
  return _internal_has_pedal_position_acceleration();
}
inline void HostVehicleData_VehiclePowertrain::clear_pedal_position_acceleration() {
  _impl_.pedal_position_acceleration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double HostVehicleData_VehiclePowertrain::_internal_pedal_position_acceleration() const {
  return _impl_.pedal_position_acceleration_;
}
inline double HostVehicleData_VehiclePowertrain::pedal_position_acceleration() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehiclePowertrain.pedal_position_acceleration)
  return _internal_pedal_position_acceleration();
}
inline void HostVehicleData_VehiclePowertrain::_internal_set_pedal_position_acceleration(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pedal_position_acceleration_ = value;
}
inline void HostVehicleData_VehiclePowertrain::set_pedal_position_acceleration(double value) {
  _internal_set_pedal_position_acceleration(value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehiclePowertrain.pedal_position_acceleration)
}

// optional double pedal_position_clutch = 2;
inline bool HostVehicleData_VehiclePowertrain::_internal_has_pedal_position_clutch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HostVehicleData_VehiclePowertrain::has_pedal_position_clutch() const {
  return _internal_has_pedal_position_clutch();
}
inline void HostVehicleData_VehiclePowertrain::clear_pedal_position_clutch() {
  _impl_.pedal_position_clutch_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double HostVehicleData_VehiclePowertrain::_internal_pedal_position_clutch() const {
  return _impl_.pedal_position_clutch_;
}
inline double HostVehicleData_VehiclePowertrain::pedal_position_clutch() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehiclePowertrain.pedal_position_clutch)
  return _internal_pedal_position_clutch();
}
inline void HostVehicleData_VehiclePowertrain::_internal_set_pedal_position_clutch(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pedal_position_clutch_ = value;
}
inline void HostVehicleData_VehiclePowertrain::set_pedal_position_clutch(double value) {
  _internal_set_pedal_position_clutch(value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehiclePowertrain.pedal_position_clutch)
}

// optional int32 gear_transmission = 3;
inline bool HostVehicleData_VehiclePowertrain::_internal_has_gear_transmission() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HostVehicleData_VehiclePowertrain::has_gear_transmission() const {
  return _internal_has_gear_transmission();
}
inline void HostVehicleData_VehiclePowertrain::clear_gear_transmission() {
  _impl_.gear_transmission_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t HostVehicleData_VehiclePowertrain::_internal_gear_transmission() const {
  return _impl_.gear_transmission_;
}
inline int32_t HostVehicleData_VehiclePowertrain::gear_transmission() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehiclePowertrain.gear_transmission)
  return _internal_gear_transmission();
}
inline void HostVehicleData_VehiclePowertrain::_internal_set_gear_transmission(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.gear_transmission_ = value;
}
inline void HostVehicleData_VehiclePowertrain::set_gear_transmission(int32_t value) {
  _internal_set_gear_transmission(value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehiclePowertrain.gear_transmission)
}

// repeated .osi3.HostVehicleData.VehiclePowertrain.Motor motor = 4;
inline int HostVehicleData_VehiclePowertrain::_internal_motor_size() const {
  return _impl_.motor_.size();
}
inline int HostVehicleData_VehiclePowertrain::motor_size() const {
  return _internal_motor_size();
}
inline void HostVehicleData_VehiclePowertrain::clear_motor() {
  _impl_.motor_.Clear();
}
inline ::osi3::HostVehicleData_VehiclePowertrain_Motor* HostVehicleData_VehiclePowertrain::mutable_motor(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.VehiclePowertrain.motor)
  return _impl_.motor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::HostVehicleData_VehiclePowertrain_Motor >*
HostVehicleData_VehiclePowertrain::mutable_motor() {
  // @@protoc_insertion_point(field_mutable_list:osi3.HostVehicleData.VehiclePowertrain.motor)
  return &_impl_.motor_;
}
inline const ::osi3::HostVehicleData_VehiclePowertrain_Motor& HostVehicleData_VehiclePowertrain::_internal_motor(int index) const {
  return _impl_.motor_.Get(index);
}
inline const ::osi3::HostVehicleData_VehiclePowertrain_Motor& HostVehicleData_VehiclePowertrain::motor(int index) const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehiclePowertrain.motor)
  return _internal_motor(index);
}
inline ::osi3::HostVehicleData_VehiclePowertrain_Motor* HostVehicleData_VehiclePowertrain::_internal_add_motor() {
  return _impl_.motor_.Add();
}
inline ::osi3::HostVehicleData_VehiclePowertrain_Motor* HostVehicleData_VehiclePowertrain::add_motor() {
  ::osi3::HostVehicleData_VehiclePowertrain_Motor* _add = _internal_add_motor();
  // @@protoc_insertion_point(field_add:osi3.HostVehicleData.VehiclePowertrain.motor)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::HostVehicleData_VehiclePowertrain_Motor >&
HostVehicleData_VehiclePowertrain::motor() const {
  // @@protoc_insertion_point(field_list:osi3.HostVehicleData.VehiclePowertrain.motor)
  return _impl_.motor_;
}

// -------------------------------------------------------------------

// HostVehicleData_VehicleBrakeSystem

// optional double pedal_position_brake = 1;
inline bool HostVehicleData_VehicleBrakeSystem::_internal_has_pedal_position_brake() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HostVehicleData_VehicleBrakeSystem::has_pedal_position_brake() const {
  return _internal_has_pedal_position_brake();
}
inline void HostVehicleData_VehicleBrakeSystem::clear_pedal_position_brake() {
  _impl_.pedal_position_brake_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double HostVehicleData_VehicleBrakeSystem::_internal_pedal_position_brake() const {
  return _impl_.pedal_position_brake_;
}
inline double HostVehicleData_VehicleBrakeSystem::pedal_position_brake() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleBrakeSystem.pedal_position_brake)
  return _internal_pedal_position_brake();
}
inline void HostVehicleData_VehicleBrakeSystem::_internal_set_pedal_position_brake(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pedal_position_brake_ = value;
}
inline void HostVehicleData_VehicleBrakeSystem::set_pedal_position_brake(double value) {
  _internal_set_pedal_position_brake(value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehicleBrakeSystem.pedal_position_brake)
}

// -------------------------------------------------------------------

// HostVehicleData_VehicleSteering

// optional .osi3.VehicleSteeringWheel vehicle_steering_wheel = 1;
inline bool HostVehicleData_VehicleSteering::_internal_has_vehicle_steering_wheel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vehicle_steering_wheel_ != nullptr);
  return value;
}
inline bool HostVehicleData_VehicleSteering::has_vehicle_steering_wheel() const {
  return _internal_has_vehicle_steering_wheel();
}
inline const ::osi3::VehicleSteeringWheel& HostVehicleData_VehicleSteering::_internal_vehicle_steering_wheel() const {
  const ::osi3::VehicleSteeringWheel* p = _impl_.vehicle_steering_wheel_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::VehicleSteeringWheel&>(
      ::osi3::_VehicleSteeringWheel_default_instance_);
}
inline const ::osi3::VehicleSteeringWheel& HostVehicleData_VehicleSteering::vehicle_steering_wheel() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleSteering.vehicle_steering_wheel)
  return _internal_vehicle_steering_wheel();
}
inline void HostVehicleData_VehicleSteering::unsafe_arena_set_allocated_vehicle_steering_wheel(
    ::osi3::VehicleSteeringWheel* vehicle_steering_wheel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vehicle_steering_wheel_);
  }
  _impl_.vehicle_steering_wheel_ = vehicle_steering_wheel;
  if (vehicle_steering_wheel) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.HostVehicleData.VehicleSteering.vehicle_steering_wheel)
}
inline ::osi3::VehicleSteeringWheel* HostVehicleData_VehicleSteering::release_vehicle_steering_wheel() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osi3::VehicleSteeringWheel* temp = _impl_.vehicle_steering_wheel_;
  _impl_.vehicle_steering_wheel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::VehicleSteeringWheel* HostVehicleData_VehicleSteering::unsafe_arena_release_vehicle_steering_wheel() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.VehicleSteering.vehicle_steering_wheel)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osi3::VehicleSteeringWheel* temp = _impl_.vehicle_steering_wheel_;
  _impl_.vehicle_steering_wheel_ = nullptr;
  return temp;
}
inline ::osi3::VehicleSteeringWheel* HostVehicleData_VehicleSteering::_internal_mutable_vehicle_steering_wheel() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.vehicle_steering_wheel_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::VehicleSteeringWheel>(GetArenaForAllocation());
    _impl_.vehicle_steering_wheel_ = p;
  }
  return _impl_.vehicle_steering_wheel_;
}
inline ::osi3::VehicleSteeringWheel* HostVehicleData_VehicleSteering::mutable_vehicle_steering_wheel() {
  ::osi3::VehicleSteeringWheel* _msg = _internal_mutable_vehicle_steering_wheel();
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.VehicleSteering.vehicle_steering_wheel)
  return _msg;
}
inline void HostVehicleData_VehicleSteering::set_allocated_vehicle_steering_wheel(::osi3::VehicleSteeringWheel* vehicle_steering_wheel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vehicle_steering_wheel_);
  }
  if (vehicle_steering_wheel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vehicle_steering_wheel));
    if (message_arena != submessage_arena) {
      vehicle_steering_wheel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_steering_wheel, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.vehicle_steering_wheel_ = vehicle_steering_wheel;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.VehicleSteering.vehicle_steering_wheel)
}

// -------------------------------------------------------------------

// HostVehicleData_VehicleWheels_WheelData

// optional uint32 axle = 1;
inline bool HostVehicleData_VehicleWheels_WheelData::_internal_has_axle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HostVehicleData_VehicleWheels_WheelData::has_axle() const {
  return _internal_has_axle();
}
inline void HostVehicleData_VehicleWheels_WheelData::clear_axle() {
  _impl_.axle_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t HostVehicleData_VehicleWheels_WheelData::_internal_axle() const {
  return _impl_.axle_;
}
inline uint32_t HostVehicleData_VehicleWheels_WheelData::axle() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleWheels.WheelData.axle)
  return _internal_axle();
}
inline void HostVehicleData_VehicleWheels_WheelData::_internal_set_axle(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.axle_ = value;
}
inline void HostVehicleData_VehicleWheels_WheelData::set_axle(uint32_t value) {
  _internal_set_axle(value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehicleWheels.WheelData.axle)
}

// optional uint32 index = 2;
inline bool HostVehicleData_VehicleWheels_WheelData::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HostVehicleData_VehicleWheels_WheelData::has_index() const {
  return _internal_has_index();
}
inline void HostVehicleData_VehicleWheels_WheelData::clear_index() {
  _impl_.index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t HostVehicleData_VehicleWheels_WheelData::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t HostVehicleData_VehicleWheels_WheelData::index() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleWheels.WheelData.index)
  return _internal_index();
}
inline void HostVehicleData_VehicleWheels_WheelData::_internal_set_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.index_ = value;
}
inline void HostVehicleData_VehicleWheels_WheelData::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehicleWheels.WheelData.index)
}

// optional double rotation_rate = 3;
inline bool HostVehicleData_VehicleWheels_WheelData::_internal_has_rotation_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HostVehicleData_VehicleWheels_WheelData::has_rotation_rate() const {
  return _internal_has_rotation_rate();
}
inline void HostVehicleData_VehicleWheels_WheelData::clear_rotation_rate() {
  _impl_.rotation_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double HostVehicleData_VehicleWheels_WheelData::_internal_rotation_rate() const {
  return _impl_.rotation_rate_;
}
inline double HostVehicleData_VehicleWheels_WheelData::rotation_rate() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleWheels.WheelData.rotation_rate)
  return _internal_rotation_rate();
}
inline void HostVehicleData_VehicleWheels_WheelData::_internal_set_rotation_rate(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.rotation_rate_ = value;
}
inline void HostVehicleData_VehicleWheels_WheelData::set_rotation_rate(double value) {
  _internal_set_rotation_rate(value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehicleWheels.WheelData.rotation_rate)
}

// optional double slip = 4;
inline bool HostVehicleData_VehicleWheels_WheelData::_internal_has_slip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HostVehicleData_VehicleWheels_WheelData::has_slip() const {
  return _internal_has_slip();
}
inline void HostVehicleData_VehicleWheels_WheelData::clear_slip() {
  _impl_.slip_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double HostVehicleData_VehicleWheels_WheelData::_internal_slip() const {
  return _impl_.slip_;
}
inline double HostVehicleData_VehicleWheels_WheelData::slip() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleWheels.WheelData.slip)
  return _internal_slip();
}
inline void HostVehicleData_VehicleWheels_WheelData::_internal_set_slip(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.slip_ = value;
}
inline void HostVehicleData_VehicleWheels_WheelData::set_slip(double value) {
  _internal_set_slip(value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehicleWheels.WheelData.slip)
}

// -------------------------------------------------------------------

// HostVehicleData_VehicleWheels

// repeated .osi3.HostVehicleData.VehicleWheels.WheelData wheel_data = 1;
inline int HostVehicleData_VehicleWheels::_internal_wheel_data_size() const {
  return _impl_.wheel_data_.size();
}
inline int HostVehicleData_VehicleWheels::wheel_data_size() const {
  return _internal_wheel_data_size();
}
inline void HostVehicleData_VehicleWheels::clear_wheel_data() {
  _impl_.wheel_data_.Clear();
}
inline ::osi3::HostVehicleData_VehicleWheels_WheelData* HostVehicleData_VehicleWheels::mutable_wheel_data(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.VehicleWheels.wheel_data)
  return _impl_.wheel_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::HostVehicleData_VehicleWheels_WheelData >*
HostVehicleData_VehicleWheels::mutable_wheel_data() {
  // @@protoc_insertion_point(field_mutable_list:osi3.HostVehicleData.VehicleWheels.wheel_data)
  return &_impl_.wheel_data_;
}
inline const ::osi3::HostVehicleData_VehicleWheels_WheelData& HostVehicleData_VehicleWheels::_internal_wheel_data(int index) const {
  return _impl_.wheel_data_.Get(index);
}
inline const ::osi3::HostVehicleData_VehicleWheels_WheelData& HostVehicleData_VehicleWheels::wheel_data(int index) const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleWheels.wheel_data)
  return _internal_wheel_data(index);
}
inline ::osi3::HostVehicleData_VehicleWheels_WheelData* HostVehicleData_VehicleWheels::_internal_add_wheel_data() {
  return _impl_.wheel_data_.Add();
}
inline ::osi3::HostVehicleData_VehicleWheels_WheelData* HostVehicleData_VehicleWheels::add_wheel_data() {
  ::osi3::HostVehicleData_VehicleWheels_WheelData* _add = _internal_add_wheel_data();
  // @@protoc_insertion_point(field_add:osi3.HostVehicleData.VehicleWheels.wheel_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::HostVehicleData_VehicleWheels_WheelData >&
HostVehicleData_VehicleWheels::wheel_data() const {
  // @@protoc_insertion_point(field_list:osi3.HostVehicleData.VehicleWheels.wheel_data)
  return _impl_.wheel_data_;
}

// -------------------------------------------------------------------

// HostVehicleData_VehicleLocalization

// optional .osi3.Vector3d position = 1;
inline bool HostVehicleData_VehicleLocalization::_internal_has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline bool HostVehicleData_VehicleLocalization::has_position() const {
  return _internal_has_position();
}
inline const ::osi3::Vector3d& HostVehicleData_VehicleLocalization::_internal_position() const {
  const ::osi3::Vector3d* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Vector3d&>(
      ::osi3::_Vector3d_default_instance_);
}
inline const ::osi3::Vector3d& HostVehicleData_VehicleLocalization::position() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleLocalization.position)
  return _internal_position();
}
inline void HostVehicleData_VehicleLocalization::unsafe_arena_set_allocated_position(
    ::osi3::Vector3d* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.HostVehicleData.VehicleLocalization.position)
}
inline ::osi3::Vector3d* HostVehicleData_VehicleLocalization::release_position() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osi3::Vector3d* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::Vector3d* HostVehicleData_VehicleLocalization::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.VehicleLocalization.position)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osi3::Vector3d* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* HostVehicleData_VehicleLocalization::_internal_mutable_position() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::osi3::Vector3d* HostVehicleData_VehicleLocalization::mutable_position() {
  ::osi3::Vector3d* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.VehicleLocalization.position)
  return _msg;
}
inline void HostVehicleData_VehicleLocalization::set_allocated_position(::osi3::Vector3d* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.VehicleLocalization.position)
}

// optional .osi3.Orientation3d orientation = 2;
inline bool HostVehicleData_VehicleLocalization::_internal_has_orientation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.orientation_ != nullptr);
  return value;
}
inline bool HostVehicleData_VehicleLocalization::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::osi3::Orientation3d& HostVehicleData_VehicleLocalization::_internal_orientation() const {
  const ::osi3::Orientation3d* p = _impl_.orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Orientation3d&>(
      ::osi3::_Orientation3d_default_instance_);
}
inline const ::osi3::Orientation3d& HostVehicleData_VehicleLocalization::orientation() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleLocalization.orientation)
  return _internal_orientation();
}
inline void HostVehicleData_VehicleLocalization::unsafe_arena_set_allocated_orientation(
    ::osi3::Orientation3d* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_);
  }
  _impl_.orientation_ = orientation;
  if (orientation) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.HostVehicleData.VehicleLocalization.orientation)
}
inline ::osi3::Orientation3d* HostVehicleData_VehicleLocalization::release_orientation() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::osi3::Orientation3d* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::Orientation3d* HostVehicleData_VehicleLocalization::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.VehicleLocalization.orientation)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::osi3::Orientation3d* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
  return temp;
}
inline ::osi3::Orientation3d* HostVehicleData_VehicleLocalization::_internal_mutable_orientation() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Orientation3d>(GetArenaForAllocation());
    _impl_.orientation_ = p;
  }
  return _impl_.orientation_;
}
inline ::osi3::Orientation3d* HostVehicleData_VehicleLocalization::mutable_orientation() {
  ::osi3::Orientation3d* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.VehicleLocalization.orientation)
  return _msg;
}
inline void HostVehicleData_VehicleLocalization::set_allocated_orientation(::osi3::Orientation3d* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation));
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.VehicleLocalization.orientation)
}

// optional .osi3.GeodeticPosition geodetic_position = 3;
inline bool HostVehicleData_VehicleLocalization::_internal_has_geodetic_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.geodetic_position_ != nullptr);
  return value;
}
inline bool HostVehicleData_VehicleLocalization::has_geodetic_position() const {
  return _internal_has_geodetic_position();
}
inline const ::osi3::GeodeticPosition& HostVehicleData_VehicleLocalization::_internal_geodetic_position() const {
  const ::osi3::GeodeticPosition* p = _impl_.geodetic_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::GeodeticPosition&>(
      ::osi3::_GeodeticPosition_default_instance_);
}
inline const ::osi3::GeodeticPosition& HostVehicleData_VehicleLocalization::geodetic_position() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleLocalization.geodetic_position)
  return _internal_geodetic_position();
}
inline void HostVehicleData_VehicleLocalization::unsafe_arena_set_allocated_geodetic_position(
    ::osi3::GeodeticPosition* geodetic_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.geodetic_position_);
  }
  _impl_.geodetic_position_ = geodetic_position;
  if (geodetic_position) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.HostVehicleData.VehicleLocalization.geodetic_position)
}
inline ::osi3::GeodeticPosition* HostVehicleData_VehicleLocalization::release_geodetic_position() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::osi3::GeodeticPosition* temp = _impl_.geodetic_position_;
  _impl_.geodetic_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::GeodeticPosition* HostVehicleData_VehicleLocalization::unsafe_arena_release_geodetic_position() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.VehicleLocalization.geodetic_position)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::osi3::GeodeticPosition* temp = _impl_.geodetic_position_;
  _impl_.geodetic_position_ = nullptr;
  return temp;
}
inline ::osi3::GeodeticPosition* HostVehicleData_VehicleLocalization::_internal_mutable_geodetic_position() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.geodetic_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::GeodeticPosition>(GetArenaForAllocation());
    _impl_.geodetic_position_ = p;
  }
  return _impl_.geodetic_position_;
}
inline ::osi3::GeodeticPosition* HostVehicleData_VehicleLocalization::mutable_geodetic_position() {
  ::osi3::GeodeticPosition* _msg = _internal_mutable_geodetic_position();
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.VehicleLocalization.geodetic_position)
  return _msg;
}
inline void HostVehicleData_VehicleLocalization::set_allocated_geodetic_position(::osi3::GeodeticPosition* geodetic_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.geodetic_position_);
  }
  if (geodetic_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geodetic_position));
    if (message_arena != submessage_arena) {
      geodetic_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geodetic_position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.geodetic_position_ = geodetic_position;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.VehicleLocalization.geodetic_position)
}

// -------------------------------------------------------------------

// HostVehicleData_VehicleMotion

// optional .osi3.Vector3d position = 1;
inline bool HostVehicleData_VehicleMotion::_internal_has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline bool HostVehicleData_VehicleMotion::has_position() const {
  return _internal_has_position();
}
inline const ::osi3::Vector3d& HostVehicleData_VehicleMotion::_internal_position() const {
  const ::osi3::Vector3d* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Vector3d&>(
      ::osi3::_Vector3d_default_instance_);
}
inline const ::osi3::Vector3d& HostVehicleData_VehicleMotion::position() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleMotion.position)
  return _internal_position();
}
inline void HostVehicleData_VehicleMotion::unsafe_arena_set_allocated_position(
    ::osi3::Vector3d* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.HostVehicleData.VehicleMotion.position)
}
inline ::osi3::Vector3d* HostVehicleData_VehicleMotion::release_position() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osi3::Vector3d* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::Vector3d* HostVehicleData_VehicleMotion::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.VehicleMotion.position)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osi3::Vector3d* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* HostVehicleData_VehicleMotion::_internal_mutable_position() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::osi3::Vector3d* HostVehicleData_VehicleMotion::mutable_position() {
  ::osi3::Vector3d* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.VehicleMotion.position)
  return _msg;
}
inline void HostVehicleData_VehicleMotion::set_allocated_position(::osi3::Vector3d* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.VehicleMotion.position)
}

// optional .osi3.Orientation3d orientation = 2;
inline bool HostVehicleData_VehicleMotion::_internal_has_orientation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.orientation_ != nullptr);
  return value;
}
inline bool HostVehicleData_VehicleMotion::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::osi3::Orientation3d& HostVehicleData_VehicleMotion::_internal_orientation() const {
  const ::osi3::Orientation3d* p = _impl_.orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Orientation3d&>(
      ::osi3::_Orientation3d_default_instance_);
}
inline const ::osi3::Orientation3d& HostVehicleData_VehicleMotion::orientation() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleMotion.orientation)
  return _internal_orientation();
}
inline void HostVehicleData_VehicleMotion::unsafe_arena_set_allocated_orientation(
    ::osi3::Orientation3d* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_);
  }
  _impl_.orientation_ = orientation;
  if (orientation) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.HostVehicleData.VehicleMotion.orientation)
}
inline ::osi3::Orientation3d* HostVehicleData_VehicleMotion::release_orientation() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::osi3::Orientation3d* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::Orientation3d* HostVehicleData_VehicleMotion::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.VehicleMotion.orientation)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::osi3::Orientation3d* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
  return temp;
}
inline ::osi3::Orientation3d* HostVehicleData_VehicleMotion::_internal_mutable_orientation() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Orientation3d>(GetArenaForAllocation());
    _impl_.orientation_ = p;
  }
  return _impl_.orientation_;
}
inline ::osi3::Orientation3d* HostVehicleData_VehicleMotion::mutable_orientation() {
  ::osi3::Orientation3d* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.VehicleMotion.orientation)
  return _msg;
}
inline void HostVehicleData_VehicleMotion::set_allocated_orientation(::osi3::Orientation3d* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation));
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.VehicleMotion.orientation)
}

// optional .osi3.Vector3d velocity = 3;
inline bool HostVehicleData_VehicleMotion::_internal_has_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.velocity_ != nullptr);
  return value;
}
inline bool HostVehicleData_VehicleMotion::has_velocity() const {
  return _internal_has_velocity();
}
inline const ::osi3::Vector3d& HostVehicleData_VehicleMotion::_internal_velocity() const {
  const ::osi3::Vector3d* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Vector3d&>(
      ::osi3::_Vector3d_default_instance_);
}
inline const ::osi3::Vector3d& HostVehicleData_VehicleMotion::velocity() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleMotion.velocity)
  return _internal_velocity();
}
inline void HostVehicleData_VehicleMotion::unsafe_arena_set_allocated_velocity(
    ::osi3::Vector3d* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.HostVehicleData.VehicleMotion.velocity)
}
inline ::osi3::Vector3d* HostVehicleData_VehicleMotion::release_velocity() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::osi3::Vector3d* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::Vector3d* HostVehicleData_VehicleMotion::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.VehicleMotion.velocity)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::osi3::Vector3d* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* HostVehicleData_VehicleMotion::_internal_mutable_velocity() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::osi3::Vector3d* HostVehicleData_VehicleMotion::mutable_velocity() {
  ::osi3::Vector3d* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.VehicleMotion.velocity)
  return _msg;
}
inline void HostVehicleData_VehicleMotion::set_allocated_velocity(::osi3::Vector3d* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity));
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.VehicleMotion.velocity)
}

// optional .osi3.Orientation3d orientation_rate = 4;
inline bool HostVehicleData_VehicleMotion::_internal_has_orientation_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.orientation_rate_ != nullptr);
  return value;
}
inline bool HostVehicleData_VehicleMotion::has_orientation_rate() const {
  return _internal_has_orientation_rate();
}
inline const ::osi3::Orientation3d& HostVehicleData_VehicleMotion::_internal_orientation_rate() const {
  const ::osi3::Orientation3d* p = _impl_.orientation_rate_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Orientation3d&>(
      ::osi3::_Orientation3d_default_instance_);
}
inline const ::osi3::Orientation3d& HostVehicleData_VehicleMotion::orientation_rate() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleMotion.orientation_rate)
  return _internal_orientation_rate();
}
inline void HostVehicleData_VehicleMotion::unsafe_arena_set_allocated_orientation_rate(
    ::osi3::Orientation3d* orientation_rate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_rate_);
  }
  _impl_.orientation_rate_ = orientation_rate;
  if (orientation_rate) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.HostVehicleData.VehicleMotion.orientation_rate)
}
inline ::osi3::Orientation3d* HostVehicleData_VehicleMotion::release_orientation_rate() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::osi3::Orientation3d* temp = _impl_.orientation_rate_;
  _impl_.orientation_rate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::Orientation3d* HostVehicleData_VehicleMotion::unsafe_arena_release_orientation_rate() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.VehicleMotion.orientation_rate)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::osi3::Orientation3d* temp = _impl_.orientation_rate_;
  _impl_.orientation_rate_ = nullptr;
  return temp;
}
inline ::osi3::Orientation3d* HostVehicleData_VehicleMotion::_internal_mutable_orientation_rate() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.orientation_rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Orientation3d>(GetArenaForAllocation());
    _impl_.orientation_rate_ = p;
  }
  return _impl_.orientation_rate_;
}
inline ::osi3::Orientation3d* HostVehicleData_VehicleMotion::mutable_orientation_rate() {
  ::osi3::Orientation3d* _msg = _internal_mutable_orientation_rate();
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.VehicleMotion.orientation_rate)
  return _msg;
}
inline void HostVehicleData_VehicleMotion::set_allocated_orientation_rate(::osi3::Orientation3d* orientation_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_rate_);
  }
  if (orientation_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_rate));
    if (message_arena != submessage_arena) {
      orientation_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation_rate, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.orientation_rate_ = orientation_rate;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.VehicleMotion.orientation_rate)
}

// optional .osi3.Vector3d acceleration = 5;
inline bool HostVehicleData_VehicleMotion::_internal_has_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.acceleration_ != nullptr);
  return value;
}
inline bool HostVehicleData_VehicleMotion::has_acceleration() const {
  return _internal_has_acceleration();
}
inline const ::osi3::Vector3d& HostVehicleData_VehicleMotion::_internal_acceleration() const {
  const ::osi3::Vector3d* p = _impl_.acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Vector3d&>(
      ::osi3::_Vector3d_default_instance_);
}
inline const ::osi3::Vector3d& HostVehicleData_VehicleMotion::acceleration() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleMotion.acceleration)
  return _internal_acceleration();
}
inline void HostVehicleData_VehicleMotion::unsafe_arena_set_allocated_acceleration(
    ::osi3::Vector3d* acceleration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.acceleration_);
  }
  _impl_.acceleration_ = acceleration;
  if (acceleration) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.HostVehicleData.VehicleMotion.acceleration)
}
inline ::osi3::Vector3d* HostVehicleData_VehicleMotion::release_acceleration() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::osi3::Vector3d* temp = _impl_.acceleration_;
  _impl_.acceleration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::Vector3d* HostVehicleData_VehicleMotion::unsafe_arena_release_acceleration() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.VehicleMotion.acceleration)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::osi3::Vector3d* temp = _impl_.acceleration_;
  _impl_.acceleration_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* HostVehicleData_VehicleMotion::_internal_mutable_acceleration() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArenaForAllocation());
    _impl_.acceleration_ = p;
  }
  return _impl_.acceleration_;
}
inline ::osi3::Vector3d* HostVehicleData_VehicleMotion::mutable_acceleration() {
  ::osi3::Vector3d* _msg = _internal_mutable_acceleration();
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.VehicleMotion.acceleration)
  return _msg;
}
inline void HostVehicleData_VehicleMotion::set_allocated_acceleration(::osi3::Vector3d* acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.acceleration_);
  }
  if (acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acceleration));
    if (message_arena != submessage_arena) {
      acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.VehicleMotion.acceleration)
}

// optional double current_curvature = 6;
inline bool HostVehicleData_VehicleMotion::_internal_has_current_curvature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool HostVehicleData_VehicleMotion::has_current_curvature() const {
  return _internal_has_current_curvature();
}
inline void HostVehicleData_VehicleMotion::clear_current_curvature() {
  _impl_.current_curvature_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double HostVehicleData_VehicleMotion::_internal_current_curvature() const {
  return _impl_.current_curvature_;
}
inline double HostVehicleData_VehicleMotion::current_curvature() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleMotion.current_curvature)
  return _internal_current_curvature();
}
inline void HostVehicleData_VehicleMotion::_internal_set_current_curvature(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.current_curvature_ = value;
}
inline void HostVehicleData_VehicleMotion::set_current_curvature(double value) {
  _internal_set_current_curvature(value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehicleMotion.current_curvature)
}

// -------------------------------------------------------------------

// HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride

// optional bool active = 1;
inline bool HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::_internal_has_active() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::has_active() const {
  return _internal_has_active();
}
inline void HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::clear_active() {
  _impl_.active_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::_internal_active() const {
  return _impl_.active_;
}
inline bool HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::active() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride.active)
  return _internal_active();
}
inline void HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::_internal_set_active(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.active_ = value;
}
inline void HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride.active)
}

// repeated .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride.Reason override_reason = 2;
inline int HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::_internal_override_reason_size() const {
  return _impl_.override_reason_.size();
}
inline int HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::override_reason_size() const {
  return _internal_override_reason_size();
}
inline void HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::clear_override_reason() {
  _impl_.override_reason_.Clear();
}
inline ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::_internal_override_reason(int index) const {
  return static_cast< ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason >(_impl_.override_reason_.Get(index));
}
inline ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::override_reason(int index) const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride.override_reason)
  return _internal_override_reason(index);
}
inline void HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::set_override_reason(int index, ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason value) {
  assert(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_IsValid(value));
  _impl_.override_reason_.Set(index, value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride.override_reason)
}
inline void HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::_internal_add_override_reason(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason value) {
  assert(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_IsValid(value));
  _impl_.override_reason_.Add(value);
}
inline void HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::add_override_reason(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason value) {
  _internal_add_override_reason(value);
  // @@protoc_insertion_point(field_add:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride.override_reason)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::override_reason() const {
  // @@protoc_insertion_point(field_list:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride.override_reason)
  return _impl_.override_reason_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::_internal_mutable_override_reason() {
  return &_impl_.override_reason_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::mutable_override_reason() {
  // @@protoc_insertion_point(field_mutable_list:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride.override_reason)
  return _internal_mutable_override_reason();
}

// -------------------------------------------------------------------

// HostVehicleData_VehicleAutomatedDrivingFunction

// optional .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.Name name = 1;
inline bool HostVehicleData_VehicleAutomatedDrivingFunction::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HostVehicleData_VehicleAutomatedDrivingFunction::has_name() const {
  return _internal_has_name();
}
inline void HostVehicleData_VehicleAutomatedDrivingFunction::clear_name() {
  _impl_.name_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::_internal_name() const {
  return static_cast< ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_Name >(_impl_.name_);
}
inline ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::name() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.name)
  return _internal_name();
}
inline void HostVehicleData_VehicleAutomatedDrivingFunction::_internal_set_name(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_Name value) {
  assert(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_Name_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.name_ = value;
}
inline void HostVehicleData_VehicleAutomatedDrivingFunction::set_name(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_Name value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.name)
}

// optional string custom_name = 2;
inline bool HostVehicleData_VehicleAutomatedDrivingFunction::_internal_has_custom_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HostVehicleData_VehicleAutomatedDrivingFunction::has_custom_name() const {
  return _internal_has_custom_name();
}
inline void HostVehicleData_VehicleAutomatedDrivingFunction::clear_custom_name() {
  _impl_.custom_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HostVehicleData_VehicleAutomatedDrivingFunction::custom_name() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.custom_name)
  return _internal_custom_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HostVehicleData_VehicleAutomatedDrivingFunction::set_custom_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.custom_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.custom_name)
}
inline std::string* HostVehicleData_VehicleAutomatedDrivingFunction::mutable_custom_name() {
  std::string* _s = _internal_mutable_custom_name();
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.custom_name)
  return _s;
}
inline const std::string& HostVehicleData_VehicleAutomatedDrivingFunction::_internal_custom_name() const {
  return _impl_.custom_name_.Get();
}
inline void HostVehicleData_VehicleAutomatedDrivingFunction::_internal_set_custom_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.custom_name_.Set(value, GetArenaForAllocation());
}
inline std::string* HostVehicleData_VehicleAutomatedDrivingFunction::_internal_mutable_custom_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.custom_name_.Mutable(GetArenaForAllocation());
}
inline std::string* HostVehicleData_VehicleAutomatedDrivingFunction::release_custom_name() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.custom_name)
  if (!_internal_has_custom_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.custom_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.custom_name_.IsDefault()) {
    _impl_.custom_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HostVehicleData_VehicleAutomatedDrivingFunction::set_allocated_custom_name(std::string* custom_name) {
  if (custom_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.custom_name_.SetAllocated(custom_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.custom_name_.IsDefault()) {
    _impl_.custom_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.custom_name)
}

// optional .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.State state = 3;
inline bool HostVehicleData_VehicleAutomatedDrivingFunction::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool HostVehicleData_VehicleAutomatedDrivingFunction::has_state() const {
  return _internal_has_state();
}
inline void HostVehicleData_VehicleAutomatedDrivingFunction::clear_state() {
  _impl_.state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_State HostVehicleData_VehicleAutomatedDrivingFunction::_internal_state() const {
  return static_cast< ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_State >(_impl_.state_);
}
inline ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_State HostVehicleData_VehicleAutomatedDrivingFunction::state() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.state)
  return _internal_state();
}
inline void HostVehicleData_VehicleAutomatedDrivingFunction::_internal_set_state(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_State value) {
  assert(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_State_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.state_ = value;
}
inline void HostVehicleData_VehicleAutomatedDrivingFunction::set_state(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.state)
}

// optional string custom_state = 4;
inline bool HostVehicleData_VehicleAutomatedDrivingFunction::_internal_has_custom_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HostVehicleData_VehicleAutomatedDrivingFunction::has_custom_state() const {
  return _internal_has_custom_state();
}
inline void HostVehicleData_VehicleAutomatedDrivingFunction::clear_custom_state() {
  _impl_.custom_state_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HostVehicleData_VehicleAutomatedDrivingFunction::custom_state() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.custom_state)
  return _internal_custom_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HostVehicleData_VehicleAutomatedDrivingFunction::set_custom_state(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.custom_state_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.custom_state)
}
inline std::string* HostVehicleData_VehicleAutomatedDrivingFunction::mutable_custom_state() {
  std::string* _s = _internal_mutable_custom_state();
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.custom_state)
  return _s;
}
inline const std::string& HostVehicleData_VehicleAutomatedDrivingFunction::_internal_custom_state() const {
  return _impl_.custom_state_.Get();
}
inline void HostVehicleData_VehicleAutomatedDrivingFunction::_internal_set_custom_state(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.custom_state_.Set(value, GetArenaForAllocation());
}
inline std::string* HostVehicleData_VehicleAutomatedDrivingFunction::_internal_mutable_custom_state() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.custom_state_.Mutable(GetArenaForAllocation());
}
inline std::string* HostVehicleData_VehicleAutomatedDrivingFunction::release_custom_state() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.custom_state)
  if (!_internal_has_custom_state()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.custom_state_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.custom_state_.IsDefault()) {
    _impl_.custom_state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HostVehicleData_VehicleAutomatedDrivingFunction::set_allocated_custom_state(std::string* custom_state) {
  if (custom_state != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.custom_state_.SetAllocated(custom_state, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.custom_state_.IsDefault()) {
    _impl_.custom_state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.custom_state)
}

// optional .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride driver_override = 5;
inline bool HostVehicleData_VehicleAutomatedDrivingFunction::_internal_has_driver_override() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.driver_override_ != nullptr);
  return value;
}
inline bool HostVehicleData_VehicleAutomatedDrivingFunction::has_driver_override() const {
  return _internal_has_driver_override();
}
inline void HostVehicleData_VehicleAutomatedDrivingFunction::clear_driver_override() {
  if (_impl_.driver_override_ != nullptr) _impl_.driver_override_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride& HostVehicleData_VehicleAutomatedDrivingFunction::_internal_driver_override() const {
  const ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride* p = _impl_.driver_override_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride&>(
      ::osi3::_HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_default_instance_);
}
inline const ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride& HostVehicleData_VehicleAutomatedDrivingFunction::driver_override() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.driver_override)
  return _internal_driver_override();
}
inline void HostVehicleData_VehicleAutomatedDrivingFunction::unsafe_arena_set_allocated_driver_override(
    ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride* driver_override) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.driver_override_);
  }
  _impl_.driver_override_ = driver_override;
  if (driver_override) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.driver_override)
}
inline ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride* HostVehicleData_VehicleAutomatedDrivingFunction::release_driver_override() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride* temp = _impl_.driver_override_;
  _impl_.driver_override_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride* HostVehicleData_VehicleAutomatedDrivingFunction::unsafe_arena_release_driver_override() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.driver_override)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride* temp = _impl_.driver_override_;
  _impl_.driver_override_ = nullptr;
  return temp;
}
inline ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride* HostVehicleData_VehicleAutomatedDrivingFunction::_internal_mutable_driver_override() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.driver_override_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride>(GetArenaForAllocation());
    _impl_.driver_override_ = p;
  }
  return _impl_.driver_override_;
}
inline ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride* HostVehicleData_VehicleAutomatedDrivingFunction::mutable_driver_override() {
  ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride* _msg = _internal_mutable_driver_override();
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.driver_override)
  return _msg;
}
inline void HostVehicleData_VehicleAutomatedDrivingFunction::set_allocated_driver_override(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride* driver_override) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.driver_override_;
  }
  if (driver_override) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(driver_override);
    if (message_arena != submessage_arena) {
      driver_override = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, driver_override, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.driver_override_ = driver_override;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.driver_override)
}

// repeated .osi3.KeyValuePair custom_detail = 6;
inline int HostVehicleData_VehicleAutomatedDrivingFunction::_internal_custom_detail_size() const {
  return _impl_.custom_detail_.size();
}
inline int HostVehicleData_VehicleAutomatedDrivingFunction::custom_detail_size() const {
  return _internal_custom_detail_size();
}
inline ::osi3::KeyValuePair* HostVehicleData_VehicleAutomatedDrivingFunction::mutable_custom_detail(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.custom_detail)
  return _impl_.custom_detail_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::KeyValuePair >*
HostVehicleData_VehicleAutomatedDrivingFunction::mutable_custom_detail() {
  // @@protoc_insertion_point(field_mutable_list:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.custom_detail)
  return &_impl_.custom_detail_;
}
inline const ::osi3::KeyValuePair& HostVehicleData_VehicleAutomatedDrivingFunction::_internal_custom_detail(int index) const {
  return _impl_.custom_detail_.Get(index);
}
inline const ::osi3::KeyValuePair& HostVehicleData_VehicleAutomatedDrivingFunction::custom_detail(int index) const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.custom_detail)
  return _internal_custom_detail(index);
}
inline ::osi3::KeyValuePair* HostVehicleData_VehicleAutomatedDrivingFunction::_internal_add_custom_detail() {
  return _impl_.custom_detail_.Add();
}
inline ::osi3::KeyValuePair* HostVehicleData_VehicleAutomatedDrivingFunction::add_custom_detail() {
  ::osi3::KeyValuePair* _add = _internal_add_custom_detail();
  // @@protoc_insertion_point(field_add:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.custom_detail)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::KeyValuePair >&
HostVehicleData_VehicleAutomatedDrivingFunction::custom_detail() const {
  // @@protoc_insertion_point(field_list:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.custom_detail)
  return _impl_.custom_detail_;
}

// -------------------------------------------------------------------

// HostVehicleData

// optional .osi3.InterfaceVersion version = 9;
inline bool HostVehicleData::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.version_ != nullptr);
  return value;
}
inline bool HostVehicleData::has_version() const {
  return _internal_has_version();
}
inline const ::osi3::InterfaceVersion& HostVehicleData::_internal_version() const {
  const ::osi3::InterfaceVersion* p = _impl_.version_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::InterfaceVersion&>(
      ::osi3::_InterfaceVersion_default_instance_);
}
inline const ::osi3::InterfaceVersion& HostVehicleData::version() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.version)
  return _internal_version();
}
inline void HostVehicleData::unsafe_arena_set_allocated_version(
    ::osi3::InterfaceVersion* version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.version_);
  }
  _impl_.version_ = version;
  if (version) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.HostVehicleData.version)
}
inline ::osi3::InterfaceVersion* HostVehicleData::release_version() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::osi3::InterfaceVersion* temp = _impl_.version_;
  _impl_.version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::InterfaceVersion* HostVehicleData::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.version)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::osi3::InterfaceVersion* temp = _impl_.version_;
  _impl_.version_ = nullptr;
  return temp;
}
inline ::osi3::InterfaceVersion* HostVehicleData::_internal_mutable_version() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.version_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::InterfaceVersion>(GetArenaForAllocation());
    _impl_.version_ = p;
  }
  return _impl_.version_;
}
inline ::osi3::InterfaceVersion* HostVehicleData::mutable_version() {
  ::osi3::InterfaceVersion* _msg = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.version)
  return _msg;
}
inline void HostVehicleData::set_allocated_version(::osi3::InterfaceVersion* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.version_);
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(version));
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.version_ = version;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.version)
}

// optional .osi3.Timestamp timestamp = 10;
inline bool HostVehicleData::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline bool HostVehicleData::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::osi3::Timestamp& HostVehicleData::_internal_timestamp() const {
  const ::osi3::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Timestamp&>(
      ::osi3::_Timestamp_default_instance_);
}
inline const ::osi3::Timestamp& HostVehicleData::timestamp() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.timestamp)
  return _internal_timestamp();
}
inline void HostVehicleData::unsafe_arena_set_allocated_timestamp(
    ::osi3::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.HostVehicleData.timestamp)
}
inline ::osi3::Timestamp* HostVehicleData::release_timestamp() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::osi3::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::Timestamp* HostVehicleData::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.timestamp)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::osi3::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::osi3::Timestamp* HostVehicleData::_internal_mutable_timestamp() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::osi3::Timestamp* HostVehicleData::mutable_timestamp() {
  ::osi3::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.timestamp)
  return _msg;
}
inline void HostVehicleData::set_allocated_timestamp(::osi3::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.timestamp)
}

// optional .osi3.Identifier host_vehicle_id = 11;
inline bool HostVehicleData::_internal_has_host_vehicle_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.host_vehicle_id_ != nullptr);
  return value;
}
inline bool HostVehicleData::has_host_vehicle_id() const {
  return _internal_has_host_vehicle_id();
}
inline const ::osi3::Identifier& HostVehicleData::_internal_host_vehicle_id() const {
  const ::osi3::Identifier* p = _impl_.host_vehicle_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Identifier&>(
      ::osi3::_Identifier_default_instance_);
}
inline const ::osi3::Identifier& HostVehicleData::host_vehicle_id() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.host_vehicle_id)
  return _internal_host_vehicle_id();
}
inline void HostVehicleData::unsafe_arena_set_allocated_host_vehicle_id(
    ::osi3::Identifier* host_vehicle_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.host_vehicle_id_);
  }
  _impl_.host_vehicle_id_ = host_vehicle_id;
  if (host_vehicle_id) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.HostVehicleData.host_vehicle_id)
}
inline ::osi3::Identifier* HostVehicleData::release_host_vehicle_id() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::osi3::Identifier* temp = _impl_.host_vehicle_id_;
  _impl_.host_vehicle_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::Identifier* HostVehicleData::unsafe_arena_release_host_vehicle_id() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.host_vehicle_id)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::osi3::Identifier* temp = _impl_.host_vehicle_id_;
  _impl_.host_vehicle_id_ = nullptr;
  return temp;
}
inline ::osi3::Identifier* HostVehicleData::_internal_mutable_host_vehicle_id() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.host_vehicle_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Identifier>(GetArenaForAllocation());
    _impl_.host_vehicle_id_ = p;
  }
  return _impl_.host_vehicle_id_;
}
inline ::osi3::Identifier* HostVehicleData::mutable_host_vehicle_id() {
  ::osi3::Identifier* _msg = _internal_mutable_host_vehicle_id();
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.host_vehicle_id)
  return _msg;
}
inline void HostVehicleData::set_allocated_host_vehicle_id(::osi3::Identifier* host_vehicle_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.host_vehicle_id_);
  }
  if (host_vehicle_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_vehicle_id));
    if (message_arena != submessage_arena) {
      host_vehicle_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host_vehicle_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.host_vehicle_id_ = host_vehicle_id;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.host_vehicle_id)
}

// optional .osi3.BaseMoving location = 1;
inline bool HostVehicleData::_internal_has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline bool HostVehicleData::has_location() const {
  return _internal_has_location();
}
inline const ::osi3::BaseMoving& HostVehicleData::_internal_location() const {
  const ::osi3::BaseMoving* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::BaseMoving&>(
      ::osi3::_BaseMoving_default_instance_);
}
inline const ::osi3::BaseMoving& HostVehicleData::location() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.location)
  return _internal_location();
}
inline void HostVehicleData::unsafe_arena_set_allocated_location(
    ::osi3::BaseMoving* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.HostVehicleData.location)
}
inline ::osi3::BaseMoving* HostVehicleData::release_location() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osi3::BaseMoving* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::BaseMoving* HostVehicleData::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.location)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::osi3::BaseMoving* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::osi3::BaseMoving* HostVehicleData::_internal_mutable_location() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::BaseMoving>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::osi3::BaseMoving* HostVehicleData::mutable_location() {
  ::osi3::BaseMoving* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.location)
  return _msg;
}
inline void HostVehicleData::set_allocated_location(::osi3::BaseMoving* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location));
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.location)
}

// optional .osi3.BaseMoving location_rmse = 2;
inline bool HostVehicleData::_internal_has_location_rmse() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_rmse_ != nullptr);
  return value;
}
inline bool HostVehicleData::has_location_rmse() const {
  return _internal_has_location_rmse();
}
inline const ::osi3::BaseMoving& HostVehicleData::_internal_location_rmse() const {
  const ::osi3::BaseMoving* p = _impl_.location_rmse_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::BaseMoving&>(
      ::osi3::_BaseMoving_default_instance_);
}
inline const ::osi3::BaseMoving& HostVehicleData::location_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.location_rmse)
  return _internal_location_rmse();
}
inline void HostVehicleData::unsafe_arena_set_allocated_location_rmse(
    ::osi3::BaseMoving* location_rmse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_rmse_);
  }
  _impl_.location_rmse_ = location_rmse;
  if (location_rmse) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.HostVehicleData.location_rmse)
}
inline ::osi3::BaseMoving* HostVehicleData::release_location_rmse() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::osi3::BaseMoving* temp = _impl_.location_rmse_;
  _impl_.location_rmse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::BaseMoving* HostVehicleData::unsafe_arena_release_location_rmse() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.location_rmse)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::osi3::BaseMoving* temp = _impl_.location_rmse_;
  _impl_.location_rmse_ = nullptr;
  return temp;
}
inline ::osi3::BaseMoving* HostVehicleData::_internal_mutable_location_rmse() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.location_rmse_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::BaseMoving>(GetArenaForAllocation());
    _impl_.location_rmse_ = p;
  }
  return _impl_.location_rmse_;
}
inline ::osi3::BaseMoving* HostVehicleData::mutable_location_rmse() {
  ::osi3::BaseMoving* _msg = _internal_mutable_location_rmse();
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.location_rmse)
  return _msg;
}
inline void HostVehicleData::set_allocated_location_rmse(::osi3::BaseMoving* location_rmse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_rmse_);
  }
  if (location_rmse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_rmse));
    if (message_arena != submessage_arena) {
      location_rmse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location_rmse, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.location_rmse_ = location_rmse;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.location_rmse)
}

// optional .osi3.HostVehicleData.VehicleBasics vehicle_basics = 3;
inline bool HostVehicleData::_internal_has_vehicle_basics() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vehicle_basics_ != nullptr);
  return value;
}
inline bool HostVehicleData::has_vehicle_basics() const {
  return _internal_has_vehicle_basics();
}
inline void HostVehicleData::clear_vehicle_basics() {
  if (_impl_.vehicle_basics_ != nullptr) _impl_.vehicle_basics_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::osi3::HostVehicleData_VehicleBasics& HostVehicleData::_internal_vehicle_basics() const {
  const ::osi3::HostVehicleData_VehicleBasics* p = _impl_.vehicle_basics_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::HostVehicleData_VehicleBasics&>(
      ::osi3::_HostVehicleData_VehicleBasics_default_instance_);
}
inline const ::osi3::HostVehicleData_VehicleBasics& HostVehicleData::vehicle_basics() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.vehicle_basics)
  return _internal_vehicle_basics();
}
inline void HostVehicleData::unsafe_arena_set_allocated_vehicle_basics(
    ::osi3::HostVehicleData_VehicleBasics* vehicle_basics) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vehicle_basics_);
  }
  _impl_.vehicle_basics_ = vehicle_basics;
  if (vehicle_basics) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.HostVehicleData.vehicle_basics)
}
inline ::osi3::HostVehicleData_VehicleBasics* HostVehicleData::release_vehicle_basics() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::osi3::HostVehicleData_VehicleBasics* temp = _impl_.vehicle_basics_;
  _impl_.vehicle_basics_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::HostVehicleData_VehicleBasics* HostVehicleData::unsafe_arena_release_vehicle_basics() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.vehicle_basics)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::osi3::HostVehicleData_VehicleBasics* temp = _impl_.vehicle_basics_;
  _impl_.vehicle_basics_ = nullptr;
  return temp;
}
inline ::osi3::HostVehicleData_VehicleBasics* HostVehicleData::_internal_mutable_vehicle_basics() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.vehicle_basics_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::HostVehicleData_VehicleBasics>(GetArenaForAllocation());
    _impl_.vehicle_basics_ = p;
  }
  return _impl_.vehicle_basics_;
}
inline ::osi3::HostVehicleData_VehicleBasics* HostVehicleData::mutable_vehicle_basics() {
  ::osi3::HostVehicleData_VehicleBasics* _msg = _internal_mutable_vehicle_basics();
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.vehicle_basics)
  return _msg;
}
inline void HostVehicleData::set_allocated_vehicle_basics(::osi3::HostVehicleData_VehicleBasics* vehicle_basics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vehicle_basics_;
  }
  if (vehicle_basics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vehicle_basics);
    if (message_arena != submessage_arena) {
      vehicle_basics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_basics, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.vehicle_basics_ = vehicle_basics;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.vehicle_basics)
}

// optional .osi3.HostVehicleData.VehiclePowertrain vehicle_powertrain = 4;
inline bool HostVehicleData::_internal_has_vehicle_powertrain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vehicle_powertrain_ != nullptr);
  return value;
}
inline bool HostVehicleData::has_vehicle_powertrain() const {
  return _internal_has_vehicle_powertrain();
}
inline void HostVehicleData::clear_vehicle_powertrain() {
  if (_impl_.vehicle_powertrain_ != nullptr) _impl_.vehicle_powertrain_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::osi3::HostVehicleData_VehiclePowertrain& HostVehicleData::_internal_vehicle_powertrain() const {
  const ::osi3::HostVehicleData_VehiclePowertrain* p = _impl_.vehicle_powertrain_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::HostVehicleData_VehiclePowertrain&>(
      ::osi3::_HostVehicleData_VehiclePowertrain_default_instance_);
}
inline const ::osi3::HostVehicleData_VehiclePowertrain& HostVehicleData::vehicle_powertrain() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.vehicle_powertrain)
  return _internal_vehicle_powertrain();
}
inline void HostVehicleData::unsafe_arena_set_allocated_vehicle_powertrain(
    ::osi3::HostVehicleData_VehiclePowertrain* vehicle_powertrain) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vehicle_powertrain_);
  }
  _impl_.vehicle_powertrain_ = vehicle_powertrain;
  if (vehicle_powertrain) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.HostVehicleData.vehicle_powertrain)
}
inline ::osi3::HostVehicleData_VehiclePowertrain* HostVehicleData::release_vehicle_powertrain() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::osi3::HostVehicleData_VehiclePowertrain* temp = _impl_.vehicle_powertrain_;
  _impl_.vehicle_powertrain_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::HostVehicleData_VehiclePowertrain* HostVehicleData::unsafe_arena_release_vehicle_powertrain() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.vehicle_powertrain)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::osi3::HostVehicleData_VehiclePowertrain* temp = _impl_.vehicle_powertrain_;
  _impl_.vehicle_powertrain_ = nullptr;
  return temp;
}
inline ::osi3::HostVehicleData_VehiclePowertrain* HostVehicleData::_internal_mutable_vehicle_powertrain() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.vehicle_powertrain_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::HostVehicleData_VehiclePowertrain>(GetArenaForAllocation());
    _impl_.vehicle_powertrain_ = p;
  }
  return _impl_.vehicle_powertrain_;
}
inline ::osi3::HostVehicleData_VehiclePowertrain* HostVehicleData::mutable_vehicle_powertrain() {
  ::osi3::HostVehicleData_VehiclePowertrain* _msg = _internal_mutable_vehicle_powertrain();
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.vehicle_powertrain)
  return _msg;
}
inline void HostVehicleData::set_allocated_vehicle_powertrain(::osi3::HostVehicleData_VehiclePowertrain* vehicle_powertrain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vehicle_powertrain_;
  }
  if (vehicle_powertrain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vehicle_powertrain);
    if (message_arena != submessage_arena) {
      vehicle_powertrain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_powertrain, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.vehicle_powertrain_ = vehicle_powertrain;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.vehicle_powertrain)
}

// optional .osi3.HostVehicleData.VehicleBrakeSystem vehicle_brake_system = 5;
inline bool HostVehicleData::_internal_has_vehicle_brake_system() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vehicle_brake_system_ != nullptr);
  return value;
}
inline bool HostVehicleData::has_vehicle_brake_system() const {
  return _internal_has_vehicle_brake_system();
}
inline void HostVehicleData::clear_vehicle_brake_system() {
  if (_impl_.vehicle_brake_system_ != nullptr) _impl_.vehicle_brake_system_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::osi3::HostVehicleData_VehicleBrakeSystem& HostVehicleData::_internal_vehicle_brake_system() const {
  const ::osi3::HostVehicleData_VehicleBrakeSystem* p = _impl_.vehicle_brake_system_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::HostVehicleData_VehicleBrakeSystem&>(
      ::osi3::_HostVehicleData_VehicleBrakeSystem_default_instance_);
}
inline const ::osi3::HostVehicleData_VehicleBrakeSystem& HostVehicleData::vehicle_brake_system() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.vehicle_brake_system)
  return _internal_vehicle_brake_system();
}
inline void HostVehicleData::unsafe_arena_set_allocated_vehicle_brake_system(
    ::osi3::HostVehicleData_VehicleBrakeSystem* vehicle_brake_system) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vehicle_brake_system_);
  }
  _impl_.vehicle_brake_system_ = vehicle_brake_system;
  if (vehicle_brake_system) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.HostVehicleData.vehicle_brake_system)
}
inline ::osi3::HostVehicleData_VehicleBrakeSystem* HostVehicleData::release_vehicle_brake_system() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::osi3::HostVehicleData_VehicleBrakeSystem* temp = _impl_.vehicle_brake_system_;
  _impl_.vehicle_brake_system_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::HostVehicleData_VehicleBrakeSystem* HostVehicleData::unsafe_arena_release_vehicle_brake_system() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.vehicle_brake_system)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::osi3::HostVehicleData_VehicleBrakeSystem* temp = _impl_.vehicle_brake_system_;
  _impl_.vehicle_brake_system_ = nullptr;
  return temp;
}
inline ::osi3::HostVehicleData_VehicleBrakeSystem* HostVehicleData::_internal_mutable_vehicle_brake_system() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.vehicle_brake_system_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::HostVehicleData_VehicleBrakeSystem>(GetArenaForAllocation());
    _impl_.vehicle_brake_system_ = p;
  }
  return _impl_.vehicle_brake_system_;
}
inline ::osi3::HostVehicleData_VehicleBrakeSystem* HostVehicleData::mutable_vehicle_brake_system() {
  ::osi3::HostVehicleData_VehicleBrakeSystem* _msg = _internal_mutable_vehicle_brake_system();
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.vehicle_brake_system)
  return _msg;
}
inline void HostVehicleData::set_allocated_vehicle_brake_system(::osi3::HostVehicleData_VehicleBrakeSystem* vehicle_brake_system) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vehicle_brake_system_;
  }
  if (vehicle_brake_system) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vehicle_brake_system);
    if (message_arena != submessage_arena) {
      vehicle_brake_system = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_brake_system, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.vehicle_brake_system_ = vehicle_brake_system;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.vehicle_brake_system)
}

// optional .osi3.HostVehicleData.VehicleSteering vehicle_steering = 6;
inline bool HostVehicleData::_internal_has_vehicle_steering() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vehicle_steering_ != nullptr);
  return value;
}
inline bool HostVehicleData::has_vehicle_steering() const {
  return _internal_has_vehicle_steering();
}
inline void HostVehicleData::clear_vehicle_steering() {
  if (_impl_.vehicle_steering_ != nullptr) _impl_.vehicle_steering_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::osi3::HostVehicleData_VehicleSteering& HostVehicleData::_internal_vehicle_steering() const {
  const ::osi3::HostVehicleData_VehicleSteering* p = _impl_.vehicle_steering_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::HostVehicleData_VehicleSteering&>(
      ::osi3::_HostVehicleData_VehicleSteering_default_instance_);
}
inline const ::osi3::HostVehicleData_VehicleSteering& HostVehicleData::vehicle_steering() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.vehicle_steering)
  return _internal_vehicle_steering();
}
inline void HostVehicleData::unsafe_arena_set_allocated_vehicle_steering(
    ::osi3::HostVehicleData_VehicleSteering* vehicle_steering) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vehicle_steering_);
  }
  _impl_.vehicle_steering_ = vehicle_steering;
  if (vehicle_steering) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.HostVehicleData.vehicle_steering)
}
inline ::osi3::HostVehicleData_VehicleSteering* HostVehicleData::release_vehicle_steering() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::osi3::HostVehicleData_VehicleSteering* temp = _impl_.vehicle_steering_;
  _impl_.vehicle_steering_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::HostVehicleData_VehicleSteering* HostVehicleData::unsafe_arena_release_vehicle_steering() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.vehicle_steering)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::osi3::HostVehicleData_VehicleSteering* temp = _impl_.vehicle_steering_;
  _impl_.vehicle_steering_ = nullptr;
  return temp;
}
inline ::osi3::HostVehicleData_VehicleSteering* HostVehicleData::_internal_mutable_vehicle_steering() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.vehicle_steering_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::HostVehicleData_VehicleSteering>(GetArenaForAllocation());
    _impl_.vehicle_steering_ = p;
  }
  return _impl_.vehicle_steering_;
}
inline ::osi3::HostVehicleData_VehicleSteering* HostVehicleData::mutable_vehicle_steering() {
  ::osi3::HostVehicleData_VehicleSteering* _msg = _internal_mutable_vehicle_steering();
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.vehicle_steering)
  return _msg;
}
inline void HostVehicleData::set_allocated_vehicle_steering(::osi3::HostVehicleData_VehicleSteering* vehicle_steering) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vehicle_steering_;
  }
  if (vehicle_steering) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vehicle_steering);
    if (message_arena != submessage_arena) {
      vehicle_steering = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_steering, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.vehicle_steering_ = vehicle_steering;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.vehicle_steering)
}

// optional .osi3.HostVehicleData.VehicleWheels vehicle_wheels = 7;
inline bool HostVehicleData::_internal_has_vehicle_wheels() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vehicle_wheels_ != nullptr);
  return value;
}
inline bool HostVehicleData::has_vehicle_wheels() const {
  return _internal_has_vehicle_wheels();
}
inline void HostVehicleData::clear_vehicle_wheels() {
  if (_impl_.vehicle_wheels_ != nullptr) _impl_.vehicle_wheels_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::osi3::HostVehicleData_VehicleWheels& HostVehicleData::_internal_vehicle_wheels() const {
  const ::osi3::HostVehicleData_VehicleWheels* p = _impl_.vehicle_wheels_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::HostVehicleData_VehicleWheels&>(
      ::osi3::_HostVehicleData_VehicleWheels_default_instance_);
}
inline const ::osi3::HostVehicleData_VehicleWheels& HostVehicleData::vehicle_wheels() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.vehicle_wheels)
  return _internal_vehicle_wheels();
}
inline void HostVehicleData::unsafe_arena_set_allocated_vehicle_wheels(
    ::osi3::HostVehicleData_VehicleWheels* vehicle_wheels) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vehicle_wheels_);
  }
  _impl_.vehicle_wheels_ = vehicle_wheels;
  if (vehicle_wheels) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.HostVehicleData.vehicle_wheels)
}
inline ::osi3::HostVehicleData_VehicleWheels* HostVehicleData::release_vehicle_wheels() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::osi3::HostVehicleData_VehicleWheels* temp = _impl_.vehicle_wheels_;
  _impl_.vehicle_wheels_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::HostVehicleData_VehicleWheels* HostVehicleData::unsafe_arena_release_vehicle_wheels() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.vehicle_wheels)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::osi3::HostVehicleData_VehicleWheels* temp = _impl_.vehicle_wheels_;
  _impl_.vehicle_wheels_ = nullptr;
  return temp;
}
inline ::osi3::HostVehicleData_VehicleWheels* HostVehicleData::_internal_mutable_vehicle_wheels() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.vehicle_wheels_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::HostVehicleData_VehicleWheels>(GetArenaForAllocation());
    _impl_.vehicle_wheels_ = p;
  }
  return _impl_.vehicle_wheels_;
}
inline ::osi3::HostVehicleData_VehicleWheels* HostVehicleData::mutable_vehicle_wheels() {
  ::osi3::HostVehicleData_VehicleWheels* _msg = _internal_mutable_vehicle_wheels();
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.vehicle_wheels)
  return _msg;
}
inline void HostVehicleData::set_allocated_vehicle_wheels(::osi3::HostVehicleData_VehicleWheels* vehicle_wheels) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vehicle_wheels_;
  }
  if (vehicle_wheels) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vehicle_wheels);
    if (message_arena != submessage_arena) {
      vehicle_wheels = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_wheels, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.vehicle_wheels_ = vehicle_wheels;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.vehicle_wheels)
}

// optional .osi3.HostVehicleData.VehicleLocalization vehicle_localization = 8;
inline bool HostVehicleData::_internal_has_vehicle_localization() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vehicle_localization_ != nullptr);
  return value;
}
inline bool HostVehicleData::has_vehicle_localization() const {
  return _internal_has_vehicle_localization();
}
inline void HostVehicleData::clear_vehicle_localization() {
  if (_impl_.vehicle_localization_ != nullptr) _impl_.vehicle_localization_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::osi3::HostVehicleData_VehicleLocalization& HostVehicleData::_internal_vehicle_localization() const {
  const ::osi3::HostVehicleData_VehicleLocalization* p = _impl_.vehicle_localization_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::HostVehicleData_VehicleLocalization&>(
      ::osi3::_HostVehicleData_VehicleLocalization_default_instance_);
}
inline const ::osi3::HostVehicleData_VehicleLocalization& HostVehicleData::vehicle_localization() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.vehicle_localization)
  return _internal_vehicle_localization();
}
inline void HostVehicleData::unsafe_arena_set_allocated_vehicle_localization(
    ::osi3::HostVehicleData_VehicleLocalization* vehicle_localization) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vehicle_localization_);
  }
  _impl_.vehicle_localization_ = vehicle_localization;
  if (vehicle_localization) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.HostVehicleData.vehicle_localization)
}
inline ::osi3::HostVehicleData_VehicleLocalization* HostVehicleData::release_vehicle_localization() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::osi3::HostVehicleData_VehicleLocalization* temp = _impl_.vehicle_localization_;
  _impl_.vehicle_localization_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::HostVehicleData_VehicleLocalization* HostVehicleData::unsafe_arena_release_vehicle_localization() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.vehicle_localization)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::osi3::HostVehicleData_VehicleLocalization* temp = _impl_.vehicle_localization_;
  _impl_.vehicle_localization_ = nullptr;
  return temp;
}
inline ::osi3::HostVehicleData_VehicleLocalization* HostVehicleData::_internal_mutable_vehicle_localization() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.vehicle_localization_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::HostVehicleData_VehicleLocalization>(GetArenaForAllocation());
    _impl_.vehicle_localization_ = p;
  }
  return _impl_.vehicle_localization_;
}
inline ::osi3::HostVehicleData_VehicleLocalization* HostVehicleData::mutable_vehicle_localization() {
  ::osi3::HostVehicleData_VehicleLocalization* _msg = _internal_mutable_vehicle_localization();
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.vehicle_localization)
  return _msg;
}
inline void HostVehicleData::set_allocated_vehicle_localization(::osi3::HostVehicleData_VehicleLocalization* vehicle_localization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vehicle_localization_;
  }
  if (vehicle_localization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vehicle_localization);
    if (message_arena != submessage_arena) {
      vehicle_localization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_localization, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.vehicle_localization_ = vehicle_localization;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.vehicle_localization)
}

// repeated .osi3.HostVehicleData.VehicleAutomatedDrivingFunction vehicle_automated_driving_function = 12;
inline int HostVehicleData::_internal_vehicle_automated_driving_function_size() const {
  return _impl_.vehicle_automated_driving_function_.size();
}
inline int HostVehicleData::vehicle_automated_driving_function_size() const {
  return _internal_vehicle_automated_driving_function_size();
}
inline void HostVehicleData::clear_vehicle_automated_driving_function() {
  _impl_.vehicle_automated_driving_function_.Clear();
}
inline ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction* HostVehicleData::mutable_vehicle_automated_driving_function(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.vehicle_automated_driving_function)
  return _impl_.vehicle_automated_driving_function_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction >*
HostVehicleData::mutable_vehicle_automated_driving_function() {
  // @@protoc_insertion_point(field_mutable_list:osi3.HostVehicleData.vehicle_automated_driving_function)
  return &_impl_.vehicle_automated_driving_function_;
}
inline const ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction& HostVehicleData::_internal_vehicle_automated_driving_function(int index) const {
  return _impl_.vehicle_automated_driving_function_.Get(index);
}
inline const ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction& HostVehicleData::vehicle_automated_driving_function(int index) const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.vehicle_automated_driving_function)
  return _internal_vehicle_automated_driving_function(index);
}
inline ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction* HostVehicleData::_internal_add_vehicle_automated_driving_function() {
  return _impl_.vehicle_automated_driving_function_.Add();
}
inline ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction* HostVehicleData::add_vehicle_automated_driving_function() {
  ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction* _add = _internal_add_vehicle_automated_driving_function();
  // @@protoc_insertion_point(field_add:osi3.HostVehicleData.vehicle_automated_driving_function)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction >&
HostVehicleData::vehicle_automated_driving_function() const {
  // @@protoc_insertion_point(field_list:osi3.HostVehicleData.vehicle_automated_driving_function)
  return _impl_.vehicle_automated_driving_function_;
}

// optional .osi3.HostVehicleData.VehicleMotion vehicle_motion = 13;
inline bool HostVehicleData::_internal_has_vehicle_motion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vehicle_motion_ != nullptr);
  return value;
}
inline bool HostVehicleData::has_vehicle_motion() const {
  return _internal_has_vehicle_motion();
}
inline void HostVehicleData::clear_vehicle_motion() {
  if (_impl_.vehicle_motion_ != nullptr) _impl_.vehicle_motion_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const ::osi3::HostVehicleData_VehicleMotion& HostVehicleData::_internal_vehicle_motion() const {
  const ::osi3::HostVehicleData_VehicleMotion* p = _impl_.vehicle_motion_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::HostVehicleData_VehicleMotion&>(
      ::osi3::_HostVehicleData_VehicleMotion_default_instance_);
}
inline const ::osi3::HostVehicleData_VehicleMotion& HostVehicleData::vehicle_motion() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.vehicle_motion)
  return _internal_vehicle_motion();
}
inline void HostVehicleData::unsafe_arena_set_allocated_vehicle_motion(
    ::osi3::HostVehicleData_VehicleMotion* vehicle_motion) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vehicle_motion_);
  }
  _impl_.vehicle_motion_ = vehicle_motion;
  if (vehicle_motion) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.HostVehicleData.vehicle_motion)
}
inline ::osi3::HostVehicleData_VehicleMotion* HostVehicleData::release_vehicle_motion() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::osi3::HostVehicleData_VehicleMotion* temp = _impl_.vehicle_motion_;
  _impl_.vehicle_motion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::osi3::HostVehicleData_VehicleMotion* HostVehicleData::unsafe_arena_release_vehicle_motion() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.vehicle_motion)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::osi3::HostVehicleData_VehicleMotion* temp = _impl_.vehicle_motion_;
  _impl_.vehicle_motion_ = nullptr;
  return temp;
}
inline ::osi3::HostVehicleData_VehicleMotion* HostVehicleData::_internal_mutable_vehicle_motion() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.vehicle_motion_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::HostVehicleData_VehicleMotion>(GetArenaForAllocation());
    _impl_.vehicle_motion_ = p;
  }
  return _impl_.vehicle_motion_;
}
inline ::osi3::HostVehicleData_VehicleMotion* HostVehicleData::mutable_vehicle_motion() {
  ::osi3::HostVehicleData_VehicleMotion* _msg = _internal_mutable_vehicle_motion();
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.vehicle_motion)
  return _msg;
}
inline void HostVehicleData::set_allocated_vehicle_motion(::osi3::HostVehicleData_VehicleMotion* vehicle_motion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vehicle_motion_;
  }
  if (vehicle_motion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vehicle_motion);
    if (message_arena != submessage_arena) {
      vehicle_motion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_motion, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.vehicle_motion_ = vehicle_motion;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.vehicle_motion)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::osi3::HostVehicleData_VehicleBasics_OperatingState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::HostVehicleData_VehicleBasics_OperatingState>() {
  return ::osi3::HostVehicleData_VehicleBasics_OperatingState_descriptor();
}
template <> struct is_proto_enum< ::osi3::HostVehicleData_VehiclePowertrain_Motor_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::HostVehicleData_VehiclePowertrain_Motor_Type>() {
  return ::osi3::HostVehicleData_VehiclePowertrain_Motor_Type_descriptor();
}
template <> struct is_proto_enum< ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason>() {
  return ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_descriptor();
}
template <> struct is_proto_enum< ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_Name> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_Name>() {
  return ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_Name_descriptor();
}
template <> struct is_proto_enum< ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_State>() {
  return ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_osi_5fhostvehicledata_2eproto
